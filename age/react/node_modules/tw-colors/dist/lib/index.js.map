{"version":3,"sources":["../../lib/index.ts"],"sourcesContent":["import Color from 'color';\nimport plugin from 'tailwindcss/plugin';\nimport forEach from 'lodash.foreach';\nimport flatten from 'flat';\n\ninterface MaybeNested<K extends keyof any = string, V = string> {\n   [key: string]: V | MaybeNested<K, V>;\n}\n\nconst SCHEME = Symbol('color-scheme');\nconst VAR_PREFIX = 'twc';\n\nexport type Colors = MaybeNested<string, string>;\n\nexport interface ColorsWithScheme<T> extends Colors {\n   [SCHEME]?: T;\n}\n\ninterface FlatColorsWithScheme<T> extends Record<string, string> {\n   [SCHEME]?: T;\n}\n\ntype SchemerFn<T> = (colors: Colors) => ColorsWithScheme<T>;\n\nconst dark: SchemerFn<'dark'> = (colors) => {\n   return {\n      [SCHEME]: 'dark',\n      ...colors,\n   };\n};\n\nconst light: SchemerFn<'light'> = (colors) => {\n   return {\n      [SCHEME]: 'light',\n      ...colors,\n   };\n};\n\ntype HslaArray = [number, number, number, number | undefined];\n\nexport const toHslaArray = (colorValue?: string): HslaArray => {\n   return Color(colorValue).hsl().round(1).array() as HslaArray;\n};\n\nexport type ConfigObject = Record<string, ColorsWithScheme<'light' | 'dark'>>;\nexport type ConfigFunction = ({\n   light,\n   dark,\n}: {\n   light: SchemerFn<'light'>;\n   dark: SchemerFn<'dark'>;\n}) => ConfigObject;\n\nexport interface Options {\n   cssVariablePrefix?: string;\n   cssVariableSuffix?: string;\n}\n\nexport const resolveConfig = (\n   config: ConfigObject | ConfigFunction = {},\n   { cssVariablePrefix = 'twc-', cssVariableSuffix = '' }: Options = {},\n) => {\n   const resolved: {\n      variants: { name: string; definition: string[] }[];\n      utilities: Record<string, Record<string, string>>;\n      colors: Record<\n         string,\n         ({\n            opacityValue,\n            opacityVariable,\n         }: {\n            opacityValue: string;\n            opacityVariable: string;\n         }) => string\n      >;\n   } = {\n      variants: [],\n      utilities: {},\n      colors: {},\n   };\n   const configObject = typeof config === 'function' ? config({ dark, light }) : config;\n\n   forEach(configObject, (colors: ColorsWithScheme<'light' | 'dark'>, themeName: string) => {\n      const cssSelector = `.theme-${themeName},[data-theme=\"${themeName}\"]`;\n\n      resolved.utilities[cssSelector] = colors[SCHEME]\n         ? {\n              'color-scheme': colors[SCHEME],\n           }\n         : {};\n\n      // flatten color definitions\n      const flatColorsWithDEFAULT: FlatColorsWithScheme<'light' | 'dark'> = flatten(colors, {\n         safe: true,\n         delimiter: '-',\n      });\n\n      const flatColors = Object.entries(flatColorsWithDEFAULT).reduce((acc, [key, value]) => {\n         acc[key.replace(/\\-DEFAULT$/, '')] = value;\n         return acc;\n      }, {} as FlatColorsWithScheme<'dark' | 'light'>);\n\n      // resolved.variants\n      resolved.variants.push({\n         name: `theme-${themeName}`,\n         definition: [`&.theme-${themeName}`, `&[data-theme='${themeName}']`],\n      });\n\n      forEach(flatColors, (colorValue, colorName) => {\n         // this case was handled above\n         if ((colorName as any) === SCHEME) return;\n         const safeColorName = escapeChars(colorName, '/');\n         const [h, s, l, defaultAlphaValue] = toHslaArray(colorValue);\n         const twcColorVariable = `--${cssVariablePrefix}${safeColorName}${cssVariableSuffix}`;\n         const twcOpacityVariable = `--${cssVariablePrefix}${safeColorName}-opacity${cssVariableSuffix}`;\n         // set the css variable in \"@layer utilities\"\n         resolved.utilities[cssSelector]![twcColorVariable] = `${h} ${s}% ${l}%`;\n         // if an alpha value was provided in the color definition, store it in a css variable\n         if (typeof defaultAlphaValue === 'number') {\n            resolved.utilities[cssSelector]![twcOpacityVariable] = defaultAlphaValue.toFixed(2);\n         }\n         // set the dynamic color in tailwind config theme.colors\n         resolved.colors[colorName] = ({ opacityVariable, opacityValue }) => {\n            // if the opacity is set  with a slash (e.g. bg-primary/90), use the provided value\n            if (!isNaN(+opacityValue)) {\n               return `hsl(var(${twcColorVariable}) / ${opacityValue})`;\n            }\n            // if no opacityValue was provided (=it is not parsable to a number)\n            // the twcOpacityVariable (opacity defined in the color definition rgb(0, 0, 0, 0.5)) should have the priority\n            // over the tw class based opacity(e.g. \"bg-opacity-90\")\n            // This is how tailwind behaves as for v3.2.4\n            if (opacityVariable) {\n               return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, var(${opacityVariable})))`;\n            }\n            return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, 1))`;\n         };\n      });\n   });\n\n   return resolved;\n};\n\nexport const createThemes = (config: ConfigObject | ConfigFunction = {}, options: Options = {}) => {\n   const resolved = resolveConfig(config, options);\n\n   return plugin(\n      ({ addUtilities, addVariant }) => {\n         // add the css variables to \"@layer utilities\"\n         addUtilities(resolved.utilities);\n         // add the theme as variant e.g. \"theme-[name]:text-2xl\"\n         resolved.variants.forEach((variant) => {\n            addVariant(variant.name, variant.definition);\n         });\n      },\n      // extend the colors config\n      {\n         theme: {\n            extend: {\n               // @ts-ignore\n               colors: resolved.colors,\n            },\n         },\n      },\n   );\n};\n\nfunction escapeChars(str: string, ...chars: string[]) {\n   let result = str;\n   for (let char of chars) {\n      const regexp = new RegExp(char, 'g');\n      result = str.replace(regexp, '\\\\' + char);\n   }\n   return result;\n}\n"],"mappings":"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","names":["Color","forEach","flatten","plugin"]}