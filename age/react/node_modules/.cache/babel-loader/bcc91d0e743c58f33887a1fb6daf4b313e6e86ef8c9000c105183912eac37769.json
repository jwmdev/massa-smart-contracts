{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MassaStationAccount = void 0;\nconst RequestHandler_1 = require(\"./RequestHandler\");\nconst MassaStationProvider_1 = require(\"./MassaStationProvider\");\nconst argsToBase64_1 = require(\"../utils/argsToBase64\");\n/**\n * The maximum allowed gas for a read operation\n */\nconst MAX_READ_BLOCK_GAS = BigInt(4294967295);\n/**\n * This module contains the MassaStationAccount class. It is responsible for representing an account in\n * the MassaStation wallet.\n *\n * @remarks\n * This class provides methods to interact with MassaStation account's {@link balance} and to {@link sign} messages.\n *\n */\nclass MassaStationAccount {\n  /**\n   * This constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n   *\n   * @param address - The address of the account.\n   * @param name - The name of the account.\n   * @param providerName - The name of the provider.\n   * @returns An instance of the Account class.\n   *\n   * @remarks\n   * - The Account constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n   * - The IAccountDetails object contains the account's address and name.\n   * - The providerName string identifies the provider that is used to interact with the blockchain.\n   */\n  constructor({\n    address,\n    name\n  }, providerName) {\n    this._address = address;\n    this._name = name;\n    this._providerName = providerName;\n  }\n  /**\n   * @returns The address of the account.\n   */\n  address() {\n    return this._address;\n  }\n  /**\n   * @returns The name of the account.\n   */\n  name() {\n    return this._name;\n  }\n  /**\n   * @returns The name of the provider.\n   */\n  providerName() {\n    return this._providerName;\n  }\n  /**\n   * This method aims to retrieve the account's balance.\n   *\n   * @returns A promise that resolves to an object of type IAccountBalanceResponse. It contains the account's balance.\n   */\n  async balance() {\n    let signOpResponse = null;\n    try {\n      signOpResponse = await (0, RequestHandler_1.getRequest)(`${MassaStationProvider_1.MASSA_STATION_URL}massa/addresses?attributes=balance&addresses=${this._address}`);\n    } catch (ex) {\n      console.error(`MassaStation account balance error`);\n      throw ex;\n    }\n    if (signOpResponse.isError || signOpResponse.error) {\n      throw signOpResponse.error;\n    }\n    const balance = signOpResponse.result.addressesAttributes[this._address].balance;\n    return {\n      finalBalance: balance.final,\n      candidateBalance: balance.pending\n    };\n  }\n  /**\n   * This method aims to sign a message.\n   *\n   * @param data - The message to be signed.\n   * @returns An IAccountSignResponse object. It contains the signature of the message.\n   */\n  async sign(data) {\n    let signOpResponse = null;\n    try {\n      signOpResponse = await (0, RequestHandler_1.postRequest)(`${MassaStationProvider_1.MASSA_STATION_ACCOUNTS_URL}/${this._name}/sign`, {\n        operation: data,\n        batch: false\n      });\n    } catch (ex) {\n      console.error(`MassaStation account signing error`);\n      throw ex;\n    }\n    if (signOpResponse.isError || signOpResponse.error) {\n      throw signOpResponse.error;\n    }\n    return signOpResponse.result;\n  }\n  /**\n   * This method aims to buy rolls on behalf of the sender.\n   *\n   * @param amount - The amount of rolls to be bought.\n   * @param fee - The fee to be paid for the transaction execution by the node.\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  async buyRolls(amount, fee) {\n    let buyRollsOpResponse = null;\n    const url = `${MassaStationProvider_1.MASSA_STATION_ACCOUNTS_URL}/${this._name}/rolls`;\n    const body = {\n      fee: fee.toString(),\n      amount: amount.toString(),\n      side: 'buy'\n    };\n    try {\n      buyRollsOpResponse = await (0, RequestHandler_1.postRequest)(url, body);\n    } catch (ex) {\n      console.error(`MassaStation account: error while buying rolls: ${ex}`);\n      throw ex;\n    }\n    if (buyRollsOpResponse.isError || buyRollsOpResponse.error) {\n      throw buyRollsOpResponse.error;\n    }\n    return buyRollsOpResponse.result;\n  }\n  /**\n   * This method aims to sell rolls on behalf of the sender.\n   *\n   * @param amount - The amount of rolls to be sold.\n   * @param fee - The fee to be paid for the transaction execution by the node.\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  async sellRolls(amount, fee) {\n    let sellRollsOpResponse = null;\n    const url = `${MassaStationProvider_1.MASSA_STATION_ACCOUNTS_URL}/${this._name}/rolls`;\n    const body = {\n      fee: fee.toString(),\n      amount: amount.toString(),\n      side: 'sell'\n    };\n    try {\n      sellRollsOpResponse = await (0, RequestHandler_1.postRequest)(url, body);\n    } catch (ex) {\n      console.error(`MassaStation account: error while selling rolls: ${ex}`);\n      throw ex;\n    }\n    if (sellRollsOpResponse.isError || sellRollsOpResponse.error) {\n      throw sellRollsOpResponse.error;\n    }\n    return sellRollsOpResponse.result;\n  }\n  /**\n   * This method aims to transfer MAS on behalf of the sender to a recipient.\n   *\n   * @param amount - The amount of MAS (in the smallest unit) to be transferred.\n   * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  async sendTransaction(amount, recipientAddress, fee) {\n    let sendTxOpResponse = null;\n    const url = `${MassaStationProvider_1.MASSA_STATION_ACCOUNTS_URL}/${this._name}/transfer`;\n    const body = {\n      fee: fee.toString(),\n      amount: amount.toString(),\n      recipientAddress: recipientAddress\n    };\n    try {\n      sendTxOpResponse = await (0, RequestHandler_1.postRequest)(url, body);\n    } catch (ex) {\n      console.error(`MassaStation account: error while sending transaction: ${ex}`);\n      throw ex;\n    }\n    if (sendTxOpResponse.isError || sendTxOpResponse.error) {\n      throw sendTxOpResponse.error;\n    }\n    return sendTxOpResponse.result;\n  }\n  /**\n   * This method aims to interact with a smart contract deployed on the MASSA blockchain.\n   *\n   * @remarks\n   * If dryRun.dryRun is true, the method will dry run the smart contract call and return an\n   * IContractReadOperationResponse object which contains all the information about the dry run\n   * (state changes, gas used, etc.)\n   *\n   * @param contractAddress - The address of the smart contract.\n   * @param functionName - The name of the function to be called.\n   * @param parameter - The parameters as an Args object to be passed to the function.\n   * @param amount - The amount of MASSA coins to be sent to the contract (in the smallest unit).\n   * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n   * @param maxGas - The maximum amount of gas to be used for the transaction execution.\n   * @param nonPersistentExecution - The dryRun object to be passed to the function.\n   *\n   * @returns if 'nonPersistentExecution' is true, it returns an IContractReadOperationResponse object.\n   * Otherwise, it returns an ITransactionDetails object which contains the operationId on the network.\n   *\n   */\n  async callSC(contractAddress, functionName, parameter, amount, fee, maxGas, nonPersistentExecution = false) {\n    if (nonPersistentExecution) {\n      return this.nonPersistentCallSC(contractAddress, functionName, parameter, amount, fee, maxGas);\n    }\n    // convert parameter to base64\n    let args = '';\n    if (parameter instanceof Uint8Array) {\n      args = (0, argsToBase64_1.uint8ArrayToBase64)(parameter);\n    } else {\n      args = (0, argsToBase64_1.argsToBase64)(parameter);\n    }\n    let CallSCOpResponse = null;\n    const url = `${MassaStationProvider_1.MASSA_STATION_URL}cmd/executeFunction`;\n    const body = {\n      nickname: this._name,\n      name: functionName,\n      at: contractAddress,\n      args: args,\n      coins: Number(amount)\n    };\n    try {\n      CallSCOpResponse = await (0, RequestHandler_1.postRequest)(url, body);\n    } catch (ex) {\n      console.log(`MassaStation account: error while interacting with smart contract: ${ex}`);\n      throw ex;\n    }\n    if (CallSCOpResponse.isError || CallSCOpResponse.error) {\n      throw CallSCOpResponse.error;\n    }\n    return CallSCOpResponse.result;\n  }\n  async getNodeUrlFromMassaStation() {\n    // get the node url from MassaStation\n    let nodesResponse = null;\n    let node = '';\n    try {\n      nodesResponse = await (0, RequestHandler_1.getRequest)(`${MassaStationProvider_1.MASSA_STATION_URL}massa/node`);\n      if (nodesResponse.isError || nodesResponse.error) {\n        throw nodesResponse.error.message;\n      }\n      // transform nodesResponse.result to a json and then get the \"url\" property\n      const nodes = nodesResponse.result;\n      node = nodes.url;\n    } catch (ex) {\n      throw new Error(`MassaStation nodes retrieval error: ${ex}`);\n    }\n    return node;\n  }\n  async nonPersistentCallSC(contractAddress, functionName, parameter, amount, fee, maxGas) {\n    const node = await this.getNodeUrlFromMassaStation();\n    // Gas amount check\n    if (maxGas > MAX_READ_BLOCK_GAS) {\n      throw new Error(`\n        The gas submitted ${maxGas.toString()} exceeds the max. allowed block gas of \n        ${MAX_READ_BLOCK_GAS.toString()}\n        `);\n    }\n    // convert parameter to an array of numbers\n    let argumentArray = [];\n    if (parameter instanceof Uint8Array) {\n      argumentArray = Array.from(parameter);\n    } else {\n      argumentArray = Array.from(parameter.serialize());\n    }\n    // setup the request body\n    const data = {\n      max_gas: Number(maxGas),\n      target_address: contractAddress,\n      target_function: functionName,\n      parameter: argumentArray,\n      caller_address: this._address\n    };\n    const body = [{\n      jsonrpc: '2.0',\n      method: 'execute_read_only_call',\n      params: [[data]],\n      id: 0\n    }];\n    // returns operation ids\n    let jsonRpcCallResult = [];\n    try {\n      let resp = await (0, RequestHandler_1.postRequest)(node, body);\n      if (resp.isError || resp.error) {\n        throw resp.error.message;\n      }\n      jsonRpcCallResult = resp.result;\n    } catch (ex) {\n      throw new Error(`MassaStation account: error while interacting with smart contract: ${ex}`);\n    }\n    if (jsonRpcCallResult.length <= 0) {\n      throw new Error(`Read operation bad response. No results array in json rpc response. Inspect smart contract`);\n    }\n    if (jsonRpcCallResult[0].result.Error) {\n      throw new Error(jsonRpcCallResult[0].result.Error);\n    }\n    return {\n      returnValue: jsonRpcCallResult[0].result[0].result.Ok,\n      info: jsonRpcCallResult[0]\n    };\n  }\n}\nexports.MassaStationAccount = MassaStationAccount;","map":{"version":3,"names":["Object","defineProperty","exports","value","MassaStationAccount","RequestHandler_1","require","MassaStationProvider_1","argsToBase64_1","MAX_READ_BLOCK_GAS","BigInt","constructor","address","name","providerName","_address","_name","_providerName","balance","signOpResponse","getRequest","MASSA_STATION_URL","ex","console","error","isError","result","addressesAttributes","finalBalance","final","candidateBalance","pending","sign","data","postRequest","MASSA_STATION_ACCOUNTS_URL","operation","batch","buyRolls","amount","fee","buyRollsOpResponse","url","body","toString","side","sellRolls","sellRollsOpResponse","sendTransaction","recipientAddress","sendTxOpResponse","callSC","contractAddress","functionName","parameter","maxGas","nonPersistentExecution","nonPersistentCallSC","args","Uint8Array","uint8ArrayToBase64","argsToBase64","CallSCOpResponse","nickname","at","coins","Number","log","getNodeUrlFromMassaStation","nodesResponse","node","message","nodes","Error","argumentArray","Array","from","serialize","max_gas","target_address","target_function","caller_address","jsonrpc","method","params","id","jsonRpcCallResult","resp","length","returnValue","Ok","info"],"sources":["/Users/jwmdev/Development/github/massa/massa-sc-examples/age/react/node_modules/@massalabs/wallet-provider/dist/massaStation/MassaStationAccount.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MassaStationAccount = void 0;\nconst RequestHandler_1 = require(\"./RequestHandler\");\nconst MassaStationProvider_1 = require(\"./MassaStationProvider\");\nconst argsToBase64_1 = require(\"../utils/argsToBase64\");\n/**\n * The maximum allowed gas for a read operation\n */\nconst MAX_READ_BLOCK_GAS = BigInt(4294967295);\n/**\n * This module contains the MassaStationAccount class. It is responsible for representing an account in\n * the MassaStation wallet.\n *\n * @remarks\n * This class provides methods to interact with MassaStation account's {@link balance} and to {@link sign} messages.\n *\n */\nclass MassaStationAccount {\n    /**\n     * This constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n     *\n     * @param address - The address of the account.\n     * @param name - The name of the account.\n     * @param providerName - The name of the provider.\n     * @returns An instance of the Account class.\n     *\n     * @remarks\n     * - The Account constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n     * - The IAccountDetails object contains the account's address and name.\n     * - The providerName string identifies the provider that is used to interact with the blockchain.\n     */\n    constructor({ address, name }, providerName) {\n        this._address = address;\n        this._name = name;\n        this._providerName = providerName;\n    }\n    /**\n     * @returns The address of the account.\n     */\n    address() {\n        return this._address;\n    }\n    /**\n     * @returns The name of the account.\n     */\n    name() {\n        return this._name;\n    }\n    /**\n     * @returns The name of the provider.\n     */\n    providerName() {\n        return this._providerName;\n    }\n    /**\n     * This method aims to retrieve the account's balance.\n     *\n     * @returns A promise that resolves to an object of type IAccountBalanceResponse. It contains the account's balance.\n     */\n    async balance() {\n        let signOpResponse = null;\n        try {\n            signOpResponse = await (0, RequestHandler_1.getRequest)(`${MassaStationProvider_1.MASSA_STATION_URL}massa/addresses?attributes=balance&addresses=${this._address}`);\n        }\n        catch (ex) {\n            console.error(`MassaStation account balance error`);\n            throw ex;\n        }\n        if (signOpResponse.isError || signOpResponse.error) {\n            throw signOpResponse.error;\n        }\n        const balance = signOpResponse.result.addressesAttributes[this._address].balance;\n        return {\n            finalBalance: balance.final,\n            candidateBalance: balance.pending,\n        };\n    }\n    /**\n     * This method aims to sign a message.\n     *\n     * @param data - The message to be signed.\n     * @returns An IAccountSignResponse object. It contains the signature of the message.\n     */\n    async sign(data) {\n        let signOpResponse = null;\n        try {\n            signOpResponse = await (0, RequestHandler_1.postRequest)(`${MassaStationProvider_1.MASSA_STATION_ACCOUNTS_URL}/${this._name}/sign`, {\n                operation: data,\n                batch: false,\n            });\n        }\n        catch (ex) {\n            console.error(`MassaStation account signing error`);\n            throw ex;\n        }\n        if (signOpResponse.isError || signOpResponse.error) {\n            throw signOpResponse.error;\n        }\n        return signOpResponse.result;\n    }\n    /**\n     * This method aims to buy rolls on behalf of the sender.\n     *\n     * @param amount - The amount of rolls to be bought.\n     * @param fee - The fee to be paid for the transaction execution by the node.\n     * @returns An ITransactionDetails object. It contains the operationId on the network.\n     */\n    async buyRolls(amount, fee) {\n        let buyRollsOpResponse = null;\n        const url = `${MassaStationProvider_1.MASSA_STATION_ACCOUNTS_URL}/${this._name}/rolls`;\n        const body = {\n            fee: fee.toString(),\n            amount: amount.toString(),\n            side: 'buy',\n        };\n        try {\n            buyRollsOpResponse = await (0, RequestHandler_1.postRequest)(url, body);\n        }\n        catch (ex) {\n            console.error(`MassaStation account: error while buying rolls: ${ex}`);\n            throw ex;\n        }\n        if (buyRollsOpResponse.isError || buyRollsOpResponse.error) {\n            throw buyRollsOpResponse.error;\n        }\n        return buyRollsOpResponse.result;\n    }\n    /**\n     * This method aims to sell rolls on behalf of the sender.\n     *\n     * @param amount - The amount of rolls to be sold.\n     * @param fee - The fee to be paid for the transaction execution by the node.\n     * @returns An ITransactionDetails object. It contains the operationId on the network.\n     */\n    async sellRolls(amount, fee) {\n        let sellRollsOpResponse = null;\n        const url = `${MassaStationProvider_1.MASSA_STATION_ACCOUNTS_URL}/${this._name}/rolls`;\n        const body = {\n            fee: fee.toString(),\n            amount: amount.toString(),\n            side: 'sell',\n        };\n        try {\n            sellRollsOpResponse = await (0, RequestHandler_1.postRequest)(url, body);\n        }\n        catch (ex) {\n            console.error(`MassaStation account: error while selling rolls: ${ex}`);\n            throw ex;\n        }\n        if (sellRollsOpResponse.isError || sellRollsOpResponse.error) {\n            throw sellRollsOpResponse.error;\n        }\n        return sellRollsOpResponse.result;\n    }\n    /**\n     * This method aims to transfer MAS on behalf of the sender to a recipient.\n     *\n     * @param amount - The amount of MAS (in the smallest unit) to be transferred.\n     * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n     * @returns An ITransactionDetails object. It contains the operationId on the network.\n     */\n    async sendTransaction(amount, recipientAddress, fee) {\n        let sendTxOpResponse = null;\n        const url = `${MassaStationProvider_1.MASSA_STATION_ACCOUNTS_URL}/${this._name}/transfer`;\n        const body = {\n            fee: fee.toString(),\n            amount: amount.toString(),\n            recipientAddress: recipientAddress,\n        };\n        try {\n            sendTxOpResponse = await (0, RequestHandler_1.postRequest)(url, body);\n        }\n        catch (ex) {\n            console.error(`MassaStation account: error while sending transaction: ${ex}`);\n            throw ex;\n        }\n        if (sendTxOpResponse.isError || sendTxOpResponse.error) {\n            throw sendTxOpResponse.error;\n        }\n        return sendTxOpResponse.result;\n    }\n    /**\n     * This method aims to interact with a smart contract deployed on the MASSA blockchain.\n     *\n     * @remarks\n     * If dryRun.dryRun is true, the method will dry run the smart contract call and return an\n     * IContractReadOperationResponse object which contains all the information about the dry run\n     * (state changes, gas used, etc.)\n     *\n     * @param contractAddress - The address of the smart contract.\n     * @param functionName - The name of the function to be called.\n     * @param parameter - The parameters as an Args object to be passed to the function.\n     * @param amount - The amount of MASSA coins to be sent to the contract (in the smallest unit).\n     * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n     * @param maxGas - The maximum amount of gas to be used for the transaction execution.\n     * @param nonPersistentExecution - The dryRun object to be passed to the function.\n     *\n     * @returns if 'nonPersistentExecution' is true, it returns an IContractReadOperationResponse object.\n     * Otherwise, it returns an ITransactionDetails object which contains the operationId on the network.\n     *\n     */\n    async callSC(contractAddress, functionName, parameter, amount, fee, maxGas, nonPersistentExecution = false) {\n        if (nonPersistentExecution) {\n            return this.nonPersistentCallSC(contractAddress, functionName, parameter, amount, fee, maxGas);\n        }\n        // convert parameter to base64\n        let args = '';\n        if (parameter instanceof Uint8Array) {\n            args = (0, argsToBase64_1.uint8ArrayToBase64)(parameter);\n        }\n        else {\n            args = (0, argsToBase64_1.argsToBase64)(parameter);\n        }\n        let CallSCOpResponse = null;\n        const url = `${MassaStationProvider_1.MASSA_STATION_URL}cmd/executeFunction`;\n        const body = {\n            nickname: this._name,\n            name: functionName,\n            at: contractAddress,\n            args: args,\n            coins: Number(amount),\n        };\n        try {\n            CallSCOpResponse = await (0, RequestHandler_1.postRequest)(url, body);\n        }\n        catch (ex) {\n            console.log(`MassaStation account: error while interacting with smart contract: ${ex}`);\n            throw ex;\n        }\n        if (CallSCOpResponse.isError || CallSCOpResponse.error) {\n            throw CallSCOpResponse.error;\n        }\n        return CallSCOpResponse.result;\n    }\n    async getNodeUrlFromMassaStation() {\n        // get the node url from MassaStation\n        let nodesResponse = null;\n        let node = '';\n        try {\n            nodesResponse = await (0, RequestHandler_1.getRequest)(`${MassaStationProvider_1.MASSA_STATION_URL}massa/node`);\n            if (nodesResponse.isError || nodesResponse.error) {\n                throw nodesResponse.error.message;\n            }\n            // transform nodesResponse.result to a json and then get the \"url\" property\n            const nodes = nodesResponse.result;\n            node = nodes.url;\n        }\n        catch (ex) {\n            throw new Error(`MassaStation nodes retrieval error: ${ex}`);\n        }\n        return node;\n    }\n    async nonPersistentCallSC(contractAddress, functionName, parameter, amount, fee, maxGas) {\n        const node = await this.getNodeUrlFromMassaStation();\n        // Gas amount check\n        if (maxGas > MAX_READ_BLOCK_GAS) {\n            throw new Error(`\n        The gas submitted ${maxGas.toString()} exceeds the max. allowed block gas of \n        ${MAX_READ_BLOCK_GAS.toString()}\n        `);\n        }\n        // convert parameter to an array of numbers\n        let argumentArray = [];\n        if (parameter instanceof Uint8Array) {\n            argumentArray = Array.from(parameter);\n        }\n        else {\n            argumentArray = Array.from(parameter.serialize());\n        }\n        // setup the request body\n        const data = {\n            max_gas: Number(maxGas),\n            target_address: contractAddress,\n            target_function: functionName,\n            parameter: argumentArray,\n            caller_address: this._address,\n        };\n        const body = [\n            {\n                jsonrpc: '2.0',\n                method: 'execute_read_only_call',\n                params: [[data]],\n                id: 0,\n            },\n        ];\n        // returns operation ids\n        let jsonRpcCallResult = [];\n        try {\n            let resp = await (0, RequestHandler_1.postRequest)(node, body);\n            if (resp.isError || resp.error) {\n                throw resp.error.message;\n            }\n            jsonRpcCallResult = resp.result;\n        }\n        catch (ex) {\n            throw new Error(`MassaStation account: error while interacting with smart contract: ${ex}`);\n        }\n        if (jsonRpcCallResult.length <= 0) {\n            throw new Error(`Read operation bad response. No results array in json rpc response. Inspect smart contract`);\n        }\n        if (jsonRpcCallResult[0].result.Error) {\n            throw new Error(jsonRpcCallResult[0].result.Error);\n        }\n        return {\n            returnValue: jsonRpcCallResult[0].result[0].result.Ok,\n            info: jsonRpcCallResult[0],\n        };\n    }\n}\nexports.MassaStationAccount = MassaStationAccount;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}