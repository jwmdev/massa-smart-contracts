{"ast":null,"code":"import { ProviderType } from '../interfaces/IProvider';\nimport { Client } from './Client';\nimport { Web3Account } from './accounts/Web3Account';\nimport { PublicApiClient } from './PublicApiClient';\nimport { WalletProviderAccount } from './accounts/WalletProviderAccount';\n/** Global connection urls, for Massa's MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET */\nexport var DefaultProviderUrls;\n(function (DefaultProviderUrls) {\n  DefaultProviderUrls[\"MAINNET\"] = \"https://massa.net/api/v2\";\n  DefaultProviderUrls[\"TESTNET\"] = \"https://test.massa.net/api/v2\";\n  DefaultProviderUrls[\"BUILDNET\"] = \"https://buildnet.massa.net/api/v2\";\n  DefaultProviderUrls[\"LABNET\"] = \"https://labnet.massa.net/api/v2\";\n  DefaultProviderUrls[\"LOCALNET\"] = \"http://127.0.0.1\";\n})(DefaultProviderUrls || (DefaultProviderUrls = {}));\n/**\n * Massa Web3 ClientFactory class allows you to easily initialize a client to\n * connect to the massa blockchain.\n *\n * @remarks\n * The client can be initialized using a default provider (MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET)\n * or a custom set of providers.\n */\nexport class ClientFactory {\n  /**\n   * Creates a default client using a default provider (MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET).\n   *\n   * @param provider - Default provider to be used by the client.\n   * @param retryStrategyOn - Whether to retry failed requests.\n   * @param baseAccount - Base account to use with the client (optional).\n   *\n   * @returns A promise that resolves to a Client object.\n   */\n  static async createDefaultClient(provider, retryStrategyOn = true, baseAccount) {\n    let publicProviderUrl = provider.toString();\n    let privateProviderUrl = provider.toString();\n    switch (provider) {\n      // in the case of LocalNet append specific default ports to url.\n      case DefaultProviderUrls.LOCALNET:\n        {\n          privateProviderUrl = `${privateProviderUrl}:33034`;\n          publicProviderUrl = `${publicProviderUrl}:33035`;\n          break;\n        }\n      // all other networks should have public access only.\n      default:\n        {\n          break;\n        }\n    }\n    const providers = [{\n      url: publicProviderUrl,\n      type: ProviderType.PUBLIC\n    }, {\n      url: privateProviderUrl,\n      type: ProviderType.PRIVATE\n    }];\n    let clientConfig = {\n      retryStrategyOn,\n      providers\n    };\n    let publicApi = new PublicApiClient(clientConfig);\n    let account = null;\n    if (baseAccount) {\n      account = new Web3Account(baseAccount, publicApi);\n    }\n    const client = new Client({\n      retryStrategyOn,\n      providers\n    }, account, publicApi);\n    return client;\n  }\n  /**\n   * Initializes a new client using a custom set of private and public providers.\n   *\n   * @remarks\n   * Suitable for local node interactions.\n   *\n   * @param providers - Array of providers to be used by the client.\n   * @param retryStrategyOn - Whether to retry failed requests.\n   * @param baseAccount - Base account to be used by the client (optional).\n   *\n   * @returns A promise that resolves to a Client object.\n   */\n  static async createCustomClient(providers, retryStrategyOn = true, baseAccount) {\n    let clientConfig = {\n      retryStrategyOn,\n      providers\n    };\n    let publicApi = new PublicApiClient(clientConfig);\n    let account = null;\n    if (baseAccount) {\n      account = new Web3Account(baseAccount, publicApi);\n    }\n    const client = new Client(clientConfig, account, publicApi);\n    return client;\n  }\n  /**\n   * Initializes a new client using the wallet provider.\n   *\n   * @remarks\n   * Suitable for local node interactions.\n   *\n   * @param provider - Provider from wallet provider to be used by the client.\n   * @param baseAccount - Base account from the wallet provider to be used by the client.\n   * @param retryStrategyOn - Whether to retry failed requests.\n   *\n   * @returns A promise that resolves to a Client object.\n   */\n  static async fromWalletProvider(provider, baseAccount, retryStrategyOn = true) {\n    const providers = (await provider.getNodesUrls()).map(url => {\n      return {\n        url,\n        type: ProviderType.PUBLIC\n      };\n    });\n    const client = new Client({\n      retryStrategyOn,\n      providers\n    }, new WalletProviderAccount(baseAccount));\n    return client;\n  }\n}","map":{"version":3,"names":["ProviderType","Client","Web3Account","PublicApiClient","WalletProviderAccount","DefaultProviderUrls","ClientFactory","createDefaultClient","provider","retryStrategyOn","baseAccount","publicProviderUrl","toString","privateProviderUrl","LOCALNET","providers","url","type","PUBLIC","PRIVATE","clientConfig","publicApi","account","client","createCustomClient","fromWalletProvider","getNodesUrls","map"],"sources":["../../../src/web3/ClientFactory.ts"],"sourcesContent":[null],"mappings":"AAAA,SAAoBA,YAAY,QAAQ,yBAAyB;AAEjE,SAASC,MAAM,QAAQ,UAAU;AAMjC,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,qBAAqB,QAAQ,kCAAkC;AAExE;AACA,WAAYC,mBAMX;AAND,WAAYA,mBAAmB;EAC7BA,mBAAA,wCAAoC;EACpCA,mBAAA,6CAAyC;EACzCA,mBAAA,kDAA8C;EAC9CA,mBAAA,8CAA0C;EAC1CA,mBAAA,iCAA6B;AAC/B,CAAC,EANWA,mBAAmB,KAAnBA,mBAAmB;AAQ/B;;;;;;;;AAQA,OAAM,MAAOC,aAAa;EACxB;;;;;;;;;EASO,aAAaC,mBAAmBA,CACrCC,QAA6B,EAC7BC,eAAe,GAAG,IAAI,EACtBC,WAAsB;IAEtB,IAAIC,iBAAiB,GAAGH,QAAQ,CAACI,QAAQ,EAAE;IAC3C,IAAIC,kBAAkB,GAAGL,QAAQ,CAACI,QAAQ,EAAE;IAC5C,QAAQJ,QAAQ;MACd;MACA,KAAKH,mBAAmB,CAACS,QAAQ;QAAE;UACjCD,kBAAkB,GAAG,GAAGA,kBAAkB,QAAQ;UAClDF,iBAAiB,GAAG,GAAGA,iBAAiB,QAAQ;UAChD;;MAEF;MACA;QAAS;UACP;;;IAIJ,MAAMI,SAAS,GAAG,CAChB;MACEC,GAAG,EAAEL,iBAAiB;MACtBM,IAAI,EAAEjB,YAAY,CAACkB;KACP,EACd;MACEF,GAAG,EAAEH,kBAAkB;MACvBI,IAAI,EAAEjB,YAAY,CAACmB;KACP,CACf;IAED,IAAIC,YAAY,GAAG;MACjBX,eAAe;MACfM;KACgB;IAClB,IAAIM,SAAS,GAAG,IAAIlB,eAAe,CAACiB,YAAY,CAAC;IACjD,IAAIE,OAAO,GAAgB,IAAI;IAC/B,IAAIZ,WAAW,EAAE;MACfY,OAAO,GAAG,IAAIpB,WAAW,CAACQ,WAAW,EAAEW,SAAS,CAAC;;IAEnD,MAAME,MAAM,GAAW,IAAItB,MAAM,CAC/B;MACEQ,eAAe;MACfM;KACgB,EAClBO,OAAO,EACPD,SAAS,CACV;IACD,OAAOE,MAAM;EACf;EAEA;;;;;;;;;;;;EAYO,aAAaC,kBAAkBA,CACpCT,SAA2B,EAC3BN,eAAe,GAAG,IAAI,EACtBC,WAAsB;IAEtB,IAAIU,YAAY,GAAG;MACjBX,eAAe;MACfM;KACgB;IAClB,IAAIM,SAAS,GAAG,IAAIlB,eAAe,CAACiB,YAAY,CAAC;IACjD,IAAIE,OAAO,GAAgB,IAAI;IAC/B,IAAIZ,WAAW,EAAE;MACfY,OAAO,GAAG,IAAIpB,WAAW,CAACQ,WAAW,EAAEW,SAAS,CAAC;;IAEnD,MAAME,MAAM,GAAW,IAAItB,MAAM,CAACmB,YAAY,EAAEE,OAAO,EAAED,SAAS,CAAC;IACnE,OAAOE,MAAM;EACf;EAEA;;;;;;;;;;;;EAYO,aAAaE,kBAAkBA,CACpCjB,QAAiC,EACjCE,WAAmC,EACnCD,eAAe,GAAG,IAAI;IAEtB,MAAMM,SAAS,GAAG,CAAC,MAAMP,QAAQ,CAACkB,YAAY,EAAE,EAAEC,GAAG,CAAEX,GAAG,IAAI;MAC5D,OAAO;QACLA,GAAG;QACHC,IAAI,EAAEjB,YAAY,CAACkB;OACpB;IACH,CAAC,CAAC;IACF,MAAMK,MAAM,GAAW,IAAItB,MAAM,CAC/B;MACEQ,eAAe;MACfM;KACgB,EAClB,IAAIX,qBAAqB,CAACM,WAAW,CAAC,CACvC;IAED,OAAOa,MAAM;EACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}