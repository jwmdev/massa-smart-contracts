{"ast":null,"code":"import { base58Encode, hashBlake3, varintEncode } from '../../utils/Xbqcrypto';\nimport { Address, SecretKey } from '../../utils/keyAndAddresses';\nimport * as ed from '@noble/ed25519';\nimport { BaseClient } from '../BaseClient';\nimport { OperationTypeId } from '../../interfaces/OperationTypes';\nimport { getBytesPublicKey } from '../../utils/bytes';\nimport { JSON_RPC_REQUEST_METHOD } from '../../interfaces/JsonRpcMethods';\nimport { trySafeExecute } from '../../utils/retryExecuteFunction';\nexport class Web3Account extends BaseClient {\n  account;\n  publicApiClient;\n  constructor(account, publicApiClient) {\n    super(publicApiClient.clientConfig);\n    this.account = account;\n    this.publicApiClient = publicApiClient;\n  }\n  async verify() {\n    // Create the secret key object\n    const secretKeyBase58Encoded = this.account.secretKey;\n    const secretKey = new SecretKey(secretKeyBase58Encoded);\n    // create the public key object\n    const publicKey = await secretKey.getPublicKey();\n    if (this.account.publicKey && this.account.publicKey !== publicKey.base58Encode) {\n      throw new Error('Public key does not correspond the the private key submitted');\n    }\n    // get wallet account address\n    const address = new Address(publicKey);\n    if (this.account.address && this.account.address !== address.base58Encode) {\n      throw new Error('Account address not correspond the the address submitted');\n    }\n  }\n  async sign(data) {\n    // check private keys to sign the message with.\n    if (!this.account.secretKey) {\n      throw new Error('No private key to sign the message with');\n    }\n    // check public key to verify the message with.\n    if (!this.account.publicKey) {\n      throw new Error('No public key to verify the signed message with');\n    }\n    // get private key\n    const secretKey = new SecretKey(this.account.secretKey);\n    // bytes compaction\n    const bytesCompact = Buffer.from(data);\n    // Hash byte compact\n    const messageHashDigest = hashBlake3(bytesCompact);\n    // sign the digest\n    const sig = await secretKey.signDigest(messageHashDigest);\n    // check sig length\n    if (sig.length != 64) {\n      throw new Error(`Invalid signature length. Expected 64, got ${sig.length}`);\n    }\n    // verify signature\n    if (this.account.publicKey) {\n      const publicKey = await secretKey.getPublicKey();\n      const isVerified = await ed.verify(sig, messageHashDigest, publicKey.bytes);\n      if (!isVerified) {\n        throw new Error(`Signature could not be verified with public key. Please inspect`);\n      }\n    }\n    // convert signature to base58\n    const version = Buffer.from(varintEncode(secretKey.version));\n    const base58Encoded = base58Encode(Buffer.concat([version, sig]));\n    return {\n      base58Encoded\n    };\n  }\n  address() {\n    return this.account.address;\n  }\n  async sellRolls(txData) {\n    if (!this.account) {\n      throw new Error(`No tx sender available`);\n    }\n    // get next period info\n    const nodeStatusInfo = await this.publicApiClient.getNodeStatus();\n    const expiryPeriod = nodeStatusInfo.next_slot.period + this.clientConfig.periodOffset;\n    // bytes compaction\n    const bytesCompact = this.compactBytesForOperation(txData, OperationTypeId.RollSell, expiryPeriod);\n    // sign payload\n    const signature = await this.sign(Buffer.concat([getBytesPublicKey(this.account.publicKey), bytesCompact]));\n    const data = {\n      serialized_content: Array.prototype.slice.call(bytesCompact),\n      creator_public_key: this.account.publicKey,\n      signature: signature.base58Encoded\n    };\n    // returns operation ids\n    const opIds = await this.sendJsonRPCRequest(JSON_RPC_REQUEST_METHOD.SEND_OPERATIONS, [[data]]);\n    return opIds[0];\n  }\n  async buyRolls(txData) {\n    // get next period info\n    const nodeStatusInfo = await this.publicApiClient.getNodeStatus();\n    const expiryPeriod = nodeStatusInfo.next_slot.period + this.clientConfig.periodOffset;\n    // bytes compaction\n    const bytesCompact = this.compactBytesForOperation(txData, OperationTypeId.RollBuy, expiryPeriod);\n    // sign payload\n    const signature = await this.sign(Buffer.concat([getBytesPublicKey(this.account.publicKey), bytesCompact]));\n    const data = {\n      serialized_content: Array.prototype.slice.call(bytesCompact),\n      creator_public_key: this.account.publicKey,\n      signature: signature.base58Encoded\n    };\n    // returns operation ids\n    const opIds = await this.sendJsonRPCRequest(JSON_RPC_REQUEST_METHOD.SEND_OPERATIONS, [[data]]);\n    return opIds[0];\n  }\n  async sendTransaction(txData) {\n    // get next period info\n    const nodeStatusInfo = await this.publicApiClient.getNodeStatus();\n    const expiryPeriod = nodeStatusInfo.next_slot.period + this.clientConfig.periodOffset;\n    // bytes compaction\n    const bytesCompact = this.compactBytesForOperation(txData, OperationTypeId.Transaction, expiryPeriod);\n    // sign payload\n    const bytesPublicKey = getBytesPublicKey(this.account.publicKey);\n    const signature = await this.sign(Buffer.concat([bytesPublicKey, bytesCompact]));\n    // prepare tx data\n    const data = {\n      serialized_content: Array.prototype.slice.call(bytesCompact),\n      creator_public_key: this.account.publicKey,\n      signature: signature.base58Encoded\n    };\n    // returns operation ids\n    const opIds = await this.sendJsonRPCRequest(JSON_RPC_REQUEST_METHOD.SEND_OPERATIONS, [[data]]);\n    return opIds[0];\n  }\n  async callSmartContract(callData) {\n    // get next period info\n    const nodeStatusInfo = await this.publicApiClient.getNodeStatus();\n    const expiryPeriod = nodeStatusInfo.next_slot.period + this.clientConfig.periodOffset;\n    // bytes compaction\n    const bytesCompact = this.compactBytesForOperation(callData, OperationTypeId.CallSC, expiryPeriod);\n    // sign payload\n    const bytesPublicKey = getBytesPublicKey(this.account.publicKey);\n    const signature = await this.sign(Buffer.concat([bytesPublicKey, bytesCompact]));\n    // request data\n    const data = {\n      serialized_content: Array.prototype.slice.call(bytesCompact),\n      creator_public_key: this.account.publicKey,\n      signature: signature.base58Encoded\n    };\n    // returns operation ids\n    let opIds = [];\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.SEND_OPERATIONS;\n    if (this.clientConfig.retryStrategyOn) {\n      opIds = await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[data]]]);\n    } else {\n      opIds = await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[data]]);\n    }\n    if (opIds.length <= 0) {\n      throw new Error(`Call smart contract operation bad response. No results array in json rpc response. Inspect smart contract`);\n    }\n    return opIds[0];\n  }\n  async deploySmartContract(contractData) {\n    // get next period info\n    const nodeStatusInfo = await this.publicApiClient.getNodeStatus();\n    const expiryPeriod = nodeStatusInfo.next_slot.period + this.clientConfig.periodOffset;\n    // Check if SC data exists\n    if (!contractData.contractDataBinary) {\n      throw new Error(`Expected non-null contract bytecode, but received null.`);\n    }\n    // get the block size\n    if (contractData.contractDataBinary.length > nodeStatusInfo.config.max_block_size / 2) {\n      console.warn('bytecode size exceeded half of the maximum size of a block, operation will certainly be rejected');\n    }\n    // bytes compaction\n    const bytesCompact = this.compactBytesForOperation(contractData, OperationTypeId.ExecuteSC, expiryPeriod);\n    // sign payload\n    const bytesPublicKey = getBytesPublicKey(this.account.publicKey);\n    const signature = await this.sign(Buffer.concat([bytesPublicKey, bytesCompact]));\n    const data = {\n      serialized_content: Array.prototype.slice.call(bytesCompact),\n      creator_public_key: this.account.publicKey,\n      signature: signature.base58Encoded\n    };\n    // returns operation ids\n    const opIds = await this.sendJsonRPCRequest(JSON_RPC_REQUEST_METHOD.SEND_OPERATIONS, [[data]]);\n    if (opIds.length <= 0) {\n      throw new Error(`Deploy smart contract operation bad response. No results array in json rpc response. Inspect smart contract`);\n    }\n    return opIds[0];\n  }\n}","map":{"version":3,"names":["base58Encode","hashBlake3","varintEncode","Address","SecretKey","ed","BaseClient","OperationTypeId","getBytesPublicKey","JSON_RPC_REQUEST_METHOD","trySafeExecute","Web3Account","account","publicApiClient","constructor","clientConfig","verify","secretKeyBase58Encoded","secretKey","publicKey","getPublicKey","Error","address","sign","data","bytesCompact","Buffer","from","messageHashDigest","sig","signDigest","length","isVerified","bytes","version","base58Encoded","concat","sellRolls","txData","nodeStatusInfo","getNodeStatus","expiryPeriod","next_slot","period","periodOffset","compactBytesForOperation","RollSell","signature","serialized_content","Array","prototype","slice","call","creator_public_key","opIds","sendJsonRPCRequest","SEND_OPERATIONS","buyRolls","RollBuy","sendTransaction","Transaction","bytesPublicKey","callSmartContract","callData","CallSC","jsonRpcRequestMethod","retryStrategyOn","deploySmartContract","contractData","contractDataBinary","config","max_block_size","console","warn","ExecuteSC"],"sources":["../../../../src/web3/accounts/Web3Account.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}