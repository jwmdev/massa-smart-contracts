{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Provider = void 0;\nconst Connector_1 = require(\"../connector/Connector\");\nconst Account_1 = require(\"../account/Account\");\nconst __1 = require(\"..\");\n/**\n * The Provider class provides a simple and intuitive interface for interacting with a specific\n * wallet service.\n *\n */\nclass Provider {\n  /**\n   * Provider constructor\n   *\n   * @param providerName - The name of the provider.\n   * @returns An instance of the Provider class.\n   */\n  constructor(providerName) {\n    this.providerName = providerName;\n  }\n  /**\n   * This method returns the name of the provider.\n   * @returns The name of the provider.\n   */\n  name() {\n    return this.providerName;\n  }\n  /**\n   * This method sends a message to the content script to get the list of accounts for the provider.\n   * It returns a Promise that resolves to an array of Account instances.\n   *\n   * @returns A promise that resolves to an array of Account instances.\n   */\n  async accounts() {\n    const providersPromise = new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderListAccounts, {}, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n    const providerAccounts = await providersPromise;\n    let accounts = [];\n    for (const providerAccount of providerAccounts) {\n      const accInstance = new Account_1.Account(providerAccount, this.providerName);\n      accounts.push(accInstance);\n    }\n    return accounts;\n  }\n  /**\n   * This method sends a message to the content script to import an account with the given publicKey and privateKey.\n   *\n   * @remarks\n   * - The IAccountImportResponse object contains the address of the imported account.\n   * - The address is generated from the public key.\n   *\n   * @param publicKey - The public key of the account.\n   * @param privateKey - The private key of the account.\n   * @returns a Promise that resolves to an instance of IAccountImportResponse.\n   *\n   */\n  async importAccount(publicKey, privateKey) {\n    const accountImportRequest = {\n      publicKey,\n      privateKey\n    };\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderImportAccount, accountImportRequest, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n  /**\n   * This method sends a message to the content script to delete the account associated with the given address.\n   *\n   * @param address - The address of the account.\n   * @returns a Promise that resolves to an instance of IAccountDeletionResponse.\n   */\n  async deleteAccount(address) {\n    const accountDeletionRequest = {\n      address\n    };\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderDeleteAccount, accountDeletionRequest, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n  /**\n   * This method sends a message to the content script to get the list of nodes urls\n   * used to connect the front end to the Massa network.\n   *\n   * @returns a Promise that resolves to an array of nodes urls (string).\n   *\n   */\n  async getNodesUrls() {\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderGetNodesUrls, {}, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n  /**\n   * This method generates a new account by a given name and adds it to the wallet.\n   *\n   * @param name - The account name\n   * @returns a Promise that resolves to an instance of IAccountDetails.\n   */\n  async generateNewAccount(name) {\n    const accountGenerationRequest = {\n      name\n    };\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderGenerateNewAccount, accountGenerationRequest, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n}\nexports.Provider = Provider;","map":{"version":3,"names":["Object","defineProperty","exports","value","Provider","Connector_1","require","Account_1","__1","constructor","providerName","name","accounts","providersPromise","Promise","resolve","reject","connector","sendMessageToContentScript","AvailableCommands","ProviderListAccounts","result","err","providerAccounts","providerAccount","accInstance","Account","push","importAccount","publicKey","privateKey","accountImportRequest","ProviderImportAccount","deleteAccount","address","accountDeletionRequest","ProviderDeleteAccount","getNodesUrls","ProviderGetNodesUrls","generateNewAccount","accountGenerationRequest","ProviderGenerateNewAccount"],"sources":["/Users/jwmdev/Development/github/massa/massa-sc-examples/age/react/node_modules/@massalabs/wallet-provider/dist/provider/Provider.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Provider = void 0;\nconst Connector_1 = require(\"../connector/Connector\");\nconst Account_1 = require(\"../account/Account\");\nconst __1 = require(\"..\");\n/**\n * The Provider class provides a simple and intuitive interface for interacting with a specific\n * wallet service.\n *\n */\nclass Provider {\n    /**\n     * Provider constructor\n     *\n     * @param providerName - The name of the provider.\n     * @returns An instance of the Provider class.\n     */\n    constructor(providerName) {\n        this.providerName = providerName;\n    }\n    /**\n     * This method returns the name of the provider.\n     * @returns The name of the provider.\n     */\n    name() {\n        return this.providerName;\n    }\n    /**\n     * This method sends a message to the content script to get the list of accounts for the provider.\n     * It returns a Promise that resolves to an array of Account instances.\n     *\n     * @returns A promise that resolves to an array of Account instances.\n     */\n    async accounts() {\n        const providersPromise = new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderListAccounts, {}, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n        const providerAccounts = await providersPromise;\n        let accounts = [];\n        for (const providerAccount of providerAccounts) {\n            const accInstance = new Account_1.Account(providerAccount, this.providerName);\n            accounts.push(accInstance);\n        }\n        return accounts;\n    }\n    /**\n     * This method sends a message to the content script to import an account with the given publicKey and privateKey.\n     *\n     * @remarks\n     * - The IAccountImportResponse object contains the address of the imported account.\n     * - The address is generated from the public key.\n     *\n     * @param publicKey - The public key of the account.\n     * @param privateKey - The private key of the account.\n     * @returns a Promise that resolves to an instance of IAccountImportResponse.\n     *\n     */\n    async importAccount(publicKey, privateKey) {\n        const accountImportRequest = {\n            publicKey,\n            privateKey,\n        };\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderImportAccount, accountImportRequest, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n    /**\n     * This method sends a message to the content script to delete the account associated with the given address.\n     *\n     * @param address - The address of the account.\n     * @returns a Promise that resolves to an instance of IAccountDeletionResponse.\n     */\n    async deleteAccount(address) {\n        const accountDeletionRequest = { address };\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderDeleteAccount, accountDeletionRequest, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n    /**\n     * This method sends a message to the content script to get the list of nodes urls\n     * used to connect the front end to the Massa network.\n     *\n     * @returns a Promise that resolves to an array of nodes urls (string).\n     *\n     */\n    async getNodesUrls() {\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderGetNodesUrls, {}, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n    /**\n     * This method generates a new account by a given name and adds it to the wallet.\n     *\n     * @param name - The account name\n     * @returns a Promise that resolves to an instance of IAccountDetails.\n     */\n    async generateNewAccount(name) {\n        const accountGenerationRequest = { name };\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderGenerateNewAccount, accountGenerationRequest, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n}\nexports.Provider = Provider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}