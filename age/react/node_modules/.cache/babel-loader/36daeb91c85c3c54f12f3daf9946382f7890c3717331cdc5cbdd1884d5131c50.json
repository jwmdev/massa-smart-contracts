{"ast":null,"code":"const LIMIT = BigInt(0x7f);\nconst zeroBI = BigInt(0);\nconst sevenBI = BigInt(7);\n/**\n * @module unsigned.ts\n *\n * This module provides functions to encode and decode unsigned integers,\n * using Varint which is a more compact binary representation of them.\n */\n/**\n * Returns the number of bytes required to store the number in a varint.\n *\n * @param value - The number to encode.\n * @returns The number of bytes required to store the number.\n */\nexport function encodingLength(value) {\n  let i = 0;\n  for (; value >= BigInt(0x80); i++) {\n    value >>= sevenBI;\n  }\n  return i + 1;\n}\n/**\n * Encodes a big number as a varint.\n *\n * @param i - The big number to encode.\n * @param buffer - The buffer to write the varint to (optional).\n * @param byteOffset - The offset in the buffer to start writing at (optional) (default: 0).\n * @returns The buffer that was written to.\n */\nexport function encode(i, buffer, byteOffset) {\n  if (i < zeroBI) {\n    throw new RangeError('value must be unsigned');\n  }\n  const byteLength = encodingLength(i);\n  buffer = buffer || new ArrayBuffer(byteLength);\n  byteOffset = byteOffset || 0;\n  if (buffer.byteLength < byteOffset + byteLength) {\n    throw new RangeError('the buffer is too small to encode the number at the offset');\n  }\n  const array = new Uint8Array(buffer, byteOffset);\n  let offset = 0;\n  while (LIMIT < i) {\n    array[offset++] = Number(i & LIMIT) | 0x80;\n    i >>= sevenBI;\n  }\n  array[offset] = Number(i);\n  return array;\n}\n/**\n * Decodes a varint as a big number.\n *\n * @param data - The data to decode.\n * @param offset - The offset in the data to start reading at (optional) (default: 0).\n * @returns The decoded big number.\n */\nexport function decode(data, offset = 0) {\n  let i = zeroBI;\n  let n = 0;\n  let b;\n  do {\n    b = data[offset + n];\n    if (b === undefined) {\n      throw new RangeError('offset out of range');\n    }\n    i += BigInt(b & 0x7f) << BigInt(n * 7);\n    n++;\n  } while (0x80 <= b);\n  return i;\n}","map":{"version":3,"names":["LIMIT","BigInt","zeroBI","sevenBI","encodingLength","value","i","encode","buffer","byteOffset","RangeError","byteLength","ArrayBuffer","array","Uint8Array","offset","Number","decode","data","n","b","undefined"],"sources":["../../../../src/utils/encode_decode_int/unsigned.ts"],"sourcesContent":[null],"mappings":"AAAA,MAAMA,KAAK,GAAGC,MAAM,CAAC,IAAI,CAAC;AAE1B,MAAMC,MAAM,GAAGD,MAAM,CAAC,CAAC,CAAC;AACxB,MAAME,OAAO,GAAGF,MAAM,CAAC,CAAC,CAAC;AACzB;;;;;;AAOA;;;;;;AAMA,OAAM,SAAUG,cAAcA,CAACC,KAAa;EAC1C,IAAIC,CAAC,GAAG,CAAC;EAET,OAAOD,KAAK,IAAIJ,MAAM,CAAC,IAAI,CAAC,EAAEK,CAAC,EAAE,EAAE;IACjCD,KAAK,KAAKF,OAAO;;EAGnB,OAAOG,CAAC,GAAG,CAAC;AACd;AAEA;;;;;;;;AAQA,OAAM,SAAUC,MAAMA,CACpBD,CAAS,EACTE,MAAoB,EACpBC,UAAmB;EAEnB,IAAIH,CAAC,GAAGJ,MAAM,EAAE;IACd,MAAM,IAAIQ,UAAU,CAAC,wBAAwB,CAAC;;EAGhD,MAAMC,UAAU,GAAGP,cAAc,CAACE,CAAC,CAAC;EACpCE,MAAM,GAAGA,MAAM,IAAI,IAAII,WAAW,CAACD,UAAU,CAAC;EAC9CF,UAAU,GAAGA,UAAU,IAAI,CAAC;EAC5B,IAAID,MAAM,CAACG,UAAU,GAAGF,UAAU,GAAGE,UAAU,EAAE;IAC/C,MAAM,IAAID,UAAU,CAClB,4DAA4D,CAC7D;;EAGH,MAAMG,KAAK,GAAG,IAAIC,UAAU,CAACN,MAAM,EAAEC,UAAU,CAAC;EAEhD,IAAIM,MAAM,GAAG,CAAC;EACd,OAAOf,KAAK,GAAGM,CAAC,EAAE;IAChBO,KAAK,CAACE,MAAM,EAAE,CAAC,GAAGC,MAAM,CAACV,CAAC,GAAGN,KAAK,CAAC,GAAG,IAAI;IAC1CM,CAAC,KAAKH,OAAO;;EAGfU,KAAK,CAACE,MAAM,CAAC,GAAGC,MAAM,CAACV,CAAC,CAAC;EAEzB,OAAOO,KAAK;AACd;AAEA;;;;;;;AAOA,OAAM,SAAUI,MAAMA,CAACC,IAAgB,EAAEH,MAAM,GAAG,CAAC;EACjD,IAAIT,CAAC,GAAGJ,MAAM;EACd,IAAIiB,CAAC,GAAG,CAAC;EACT,IAAIC,CAAS;EACb,GAAG;IACDA,CAAC,GAAGF,IAAI,CAACH,MAAM,GAAGI,CAAC,CAAC;IACpB,IAAIC,CAAC,KAAKC,SAAS,EAAE;MACnB,MAAM,IAAIX,UAAU,CAAC,qBAAqB,CAAC;;IAG7CJ,CAAC,IAAIL,MAAM,CAACmB,CAAC,GAAG,IAAI,CAAC,IAAInB,MAAM,CAACkB,CAAC,GAAG,CAAC,CAAC;IACtCA,CAAC,EAAE;GACJ,QAAQ,IAAI,IAAIC,CAAC;EAClB,OAAOd,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}