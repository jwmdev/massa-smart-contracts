{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connector = exports.MASSA_WINDOW_OBJECT = void 0;\n/**\n * This file defines a TypeScript module named connector.\n * It is the tool that allows the 'provider' and 'account' objects to communicate with the web page script.\n *\n * @remarks\n * - If you are only looking to use our library, the connector object will not be useful to you.\n * - If you want to work on this repo, you will probably be interested in this object\n *\n */\nconst uid_1 = require(\"uid\");\nconst __1 = require(\"..\");\nconst MassaStationDiscovery_1 = require(\"../massaStation/MassaStationDiscovery\");\nconst MassaStationProvider_1 = require(\"../massaStation/MassaStationProvider\");\n/**\n * A constant string that is used to identify the HTML element that is used for\n * communication between the web page script and the content script.\n */\nexports.MASSA_WINDOW_OBJECT = 'massaWalletProvider';\n/**\n * This class enables communication with the content script by sending and receiving messages.\n * @remarks\n * - This class is used to send messages to the content script and to receive messages from the content script.\n * - It is used to send messages to the content script and to receive messages from the content script.\n *\n */\nclass Connector {\n  /**\n   * Connector constructor\n   *\n   * @remarks\n   * - The Connector constructor takes no arguments.\n   * - It creates a Map object that is used to store pending requests.\n   * - It creates an HTML element that is used to communicate with the content script.\n   * - It adds an event listener to the HTML element that is used to communicate with the content script.\n   *\n   * @returns An instance of the Connector class.\n   *\n   */\n  constructor() {\n    this.registeredProviders = {};\n    this.pendingRequests = new Map();\n    this.register();\n    // start listening to messages from content script\n    document.getElementById(exports.MASSA_WINDOW_OBJECT).addEventListener('message', this.handleResponseFromContentScript.bind(this));\n  }\n  /**\n   * This method adds a register listener in the web page.\n   * It listens to the 'register' event.\n   *\n   * @returns void\n   *\n   * @remarks\n   * - It is used to register a new provider.\n   * - This method creates a new HTML element and a listener that listens to the register event.\n   *\n   */\n  register() {\n    // global event target to use for all wallet provider\n    if (!document.getElementById(exports.MASSA_WINDOW_OBJECT)) {\n      const inv = document.createElement('p');\n      inv.id = exports.MASSA_WINDOW_OBJECT;\n      inv.setAttribute('style', 'display:none');\n      document.body.appendChild(inv);\n    }\n    // add an invisible HTML element and set a listener to it like the following\n    // hook up register handler\n    document.getElementById(exports.MASSA_WINDOW_OBJECT).addEventListener('register', evt => {\n      const payload = evt.detail;\n      const providerEventTargetName = `${exports.MASSA_WINDOW_OBJECT}_${payload.providerName}`;\n      this.registeredProviders[payload.providerName] = providerEventTargetName;\n    });\n    try {\n      // start MassaStation discovery\n      this.massaStationListener = new MassaStationDiscovery_1.MassaStationDiscovery(1000);\n      this.massaStationListener.startListening();\n      this.massaStationListener.on(MassaStationDiscovery_1.ON_MASSA_STATION_DISCOVERED, () => {\n        this.registeredProviders[MassaStationProvider_1.MASSA_STATION_PROVIDER_NAME] = `${exports.MASSA_WINDOW_OBJECT}_${MassaStationProvider_1.MASSA_STATION_PROVIDER_NAME}`;\n      });\n      this.massaStationListener.on(MassaStationDiscovery_1.ON_MASSA_STATION_DISCONNECTED, () => {\n        delete this.registeredProviders[MassaStationProvider_1.MASSA_STATION_PROVIDER_NAME];\n      });\n    } catch (e) {\n      console.log('MassaStation is not detected');\n    }\n  }\n  /**\n   * This method sends a message from the webpage script to the content script.\n   *\n   * @remarks\n   * Sends a message to the content script using the specified provider name, command, and parameters,\n   *\n   * @privateRemarks\n   * This method registers the response callback with a unique ID.\n   *\n   * @param providerName - The name of the provider.\n   * @param command - The command that is sent to the content script (among the {@link AvailableCommands}).\n   * @param params - The parameters that are sent to the content script.\n   * @param responseCallback - The callback function that is called when the content script sends a response.\n   * @returns void\n   *\n   */\n  sendMessageToContentScript(providerName, command, params, responseCallback) {\n    if (!Object.values(__1.AvailableCommands).includes(command)) {\n      throw new Error(`Unknown command ${command}`);\n    }\n    const requestId = (0, uid_1.uid)();\n    const eventMessageRequest = {\n      params,\n      requestId\n    };\n    this.pendingRequests.set(requestId, responseCallback);\n    // dispatch an event to the specific provider event target\n    const specificProviderEventTarget = document.getElementById(`${this.registeredProviders[providerName]}`);\n    if (!specificProviderEventTarget) {\n      throw new Error(`Registered provider with name ${providerName} does not exist`);\n    }\n    const isDispatched = specificProviderEventTarget.dispatchEvent(new CustomEvent(command, {\n      detail: eventMessageRequest\n    }));\n    if (!isDispatched) {\n      throw new Error(`Could not dispatch a message to ${this.registeredProviders[providerName]}`);\n    }\n  }\n  /**\n   * This method returns the registered providers.\n   *\n   * @returns The registered provider associated with its unique key.\n   *\n   */\n  getWalletProviders() {\n    return this.registeredProviders;\n  }\n  /**\n   * This method handles the response from the content script by\n   * calling the response callback with the response and error objects.\n   *\n   * @param event - The event that is sent from the content script.\n   * @returns void\n   *\n   */\n  handleResponseFromContentScript(event) {\n    const {\n      result,\n      error,\n      requestId\n    } = event.detail;\n    const responseCallback = this.pendingRequests.get(requestId);\n    if (responseCallback) {\n      if (error) {\n        responseCallback(null, new Error(error.message));\n      } else {\n        responseCallback(result, null);\n      }\n      const deleted = this.pendingRequests.delete(requestId);\n      if (!deleted) {\n        console.error(`Error deleting a pending request with id ${requestId}`);\n      }\n    } else {\n      console.error(`Request Id ${requestId} not found in response callback map`);\n    }\n  }\n}\nexports.connector = new Connector();","map":{"version":3,"names":["Object","defineProperty","exports","value","connector","MASSA_WINDOW_OBJECT","uid_1","require","__1","MassaStationDiscovery_1","MassaStationProvider_1","Connector","constructor","registeredProviders","pendingRequests","Map","register","document","getElementById","addEventListener","handleResponseFromContentScript","bind","inv","createElement","id","setAttribute","body","appendChild","evt","payload","detail","providerEventTargetName","providerName","massaStationListener","MassaStationDiscovery","startListening","on","ON_MASSA_STATION_DISCOVERED","MASSA_STATION_PROVIDER_NAME","ON_MASSA_STATION_DISCONNECTED","e","console","log","sendMessageToContentScript","command","params","responseCallback","values","AvailableCommands","includes","Error","requestId","uid","eventMessageRequest","set","specificProviderEventTarget","isDispatched","dispatchEvent","CustomEvent","getWalletProviders","event","result","error","get","message","deleted","delete"],"sources":["/Users/jwmdev/Development/github/massa/massa-sc-examples/age/react/node_modules/@massalabs/wallet-provider/dist/connector/Connector.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.connector = exports.MASSA_WINDOW_OBJECT = void 0;\n/**\n * This file defines a TypeScript module named connector.\n * It is the tool that allows the 'provider' and 'account' objects to communicate with the web page script.\n *\n * @remarks\n * - If you are only looking to use our library, the connector object will not be useful to you.\n * - If you want to work on this repo, you will probably be interested in this object\n *\n */\nconst uid_1 = require(\"uid\");\nconst __1 = require(\"..\");\nconst MassaStationDiscovery_1 = require(\"../massaStation/MassaStationDiscovery\");\nconst MassaStationProvider_1 = require(\"../massaStation/MassaStationProvider\");\n/**\n * A constant string that is used to identify the HTML element that is used for\n * communication between the web page script and the content script.\n */\nexports.MASSA_WINDOW_OBJECT = 'massaWalletProvider';\n/**\n * This class enables communication with the content script by sending and receiving messages.\n * @remarks\n * - This class is used to send messages to the content script and to receive messages from the content script.\n * - It is used to send messages to the content script and to receive messages from the content script.\n *\n */\nclass Connector {\n    /**\n     * Connector constructor\n     *\n     * @remarks\n     * - The Connector constructor takes no arguments.\n     * - It creates a Map object that is used to store pending requests.\n     * - It creates an HTML element that is used to communicate with the content script.\n     * - It adds an event listener to the HTML element that is used to communicate with the content script.\n     *\n     * @returns An instance of the Connector class.\n     *\n     */\n    constructor() {\n        this.registeredProviders = {};\n        this.pendingRequests = new Map();\n        this.register();\n        // start listening to messages from content script\n        document\n            .getElementById(exports.MASSA_WINDOW_OBJECT)\n            .addEventListener('message', this.handleResponseFromContentScript.bind(this));\n    }\n    /**\n     * This method adds a register listener in the web page.\n     * It listens to the 'register' event.\n     *\n     * @returns void\n     *\n     * @remarks\n     * - It is used to register a new provider.\n     * - This method creates a new HTML element and a listener that listens to the register event.\n     *\n     */\n    register() {\n        // global event target to use for all wallet provider\n        if (!document.getElementById(exports.MASSA_WINDOW_OBJECT)) {\n            const inv = document.createElement('p');\n            inv.id = exports.MASSA_WINDOW_OBJECT;\n            inv.setAttribute('style', 'display:none');\n            document.body.appendChild(inv);\n        }\n        // add an invisible HTML element and set a listener to it like the following\n        // hook up register handler\n        document\n            .getElementById(exports.MASSA_WINDOW_OBJECT)\n            .addEventListener('register', (evt) => {\n            const payload = evt.detail;\n            const providerEventTargetName = `${exports.MASSA_WINDOW_OBJECT}_${payload.providerName}`;\n            this.registeredProviders[payload.providerName] =\n                providerEventTargetName;\n        });\n        try {\n            // start MassaStation discovery\n            this.massaStationListener = new MassaStationDiscovery_1.MassaStationDiscovery(1000);\n            this.massaStationListener.startListening();\n            this.massaStationListener.on(MassaStationDiscovery_1.ON_MASSA_STATION_DISCOVERED, () => {\n                this.registeredProviders[MassaStationProvider_1.MASSA_STATION_PROVIDER_NAME] = `${exports.MASSA_WINDOW_OBJECT}_${MassaStationProvider_1.MASSA_STATION_PROVIDER_NAME}`;\n            });\n            this.massaStationListener.on(MassaStationDiscovery_1.ON_MASSA_STATION_DISCONNECTED, () => {\n                delete this.registeredProviders[MassaStationProvider_1.MASSA_STATION_PROVIDER_NAME];\n            });\n        }\n        catch (e) {\n            console.log('MassaStation is not detected');\n        }\n    }\n    /**\n     * This method sends a message from the webpage script to the content script.\n     *\n     * @remarks\n     * Sends a message to the content script using the specified provider name, command, and parameters,\n     *\n     * @privateRemarks\n     * This method registers the response callback with a unique ID.\n     *\n     * @param providerName - The name of the provider.\n     * @param command - The command that is sent to the content script (among the {@link AvailableCommands}).\n     * @param params - The parameters that are sent to the content script.\n     * @param responseCallback - The callback function that is called when the content script sends a response.\n     * @returns void\n     *\n     */\n    sendMessageToContentScript(providerName, command, params, responseCallback) {\n        if (!Object.values(__1.AvailableCommands).includes(command)) {\n            throw new Error(`Unknown command ${command}`);\n        }\n        const requestId = (0, uid_1.uid)();\n        const eventMessageRequest = {\n            params,\n            requestId,\n        };\n        this.pendingRequests.set(requestId, responseCallback);\n        // dispatch an event to the specific provider event target\n        const specificProviderEventTarget = document.getElementById(`${this.registeredProviders[providerName]}`);\n        if (!specificProviderEventTarget) {\n            throw new Error(`Registered provider with name ${providerName} does not exist`);\n        }\n        const isDispatched = specificProviderEventTarget.dispatchEvent(new CustomEvent(command, { detail: eventMessageRequest }));\n        if (!isDispatched) {\n            throw new Error(`Could not dispatch a message to ${this.registeredProviders[providerName]}`);\n        }\n    }\n    /**\n     * This method returns the registered providers.\n     *\n     * @returns The registered provider associated with its unique key.\n     *\n     */\n    getWalletProviders() {\n        return this.registeredProviders;\n    }\n    /**\n     * This method handles the response from the content script by\n     * calling the response callback with the response and error objects.\n     *\n     * @param event - The event that is sent from the content script.\n     * @returns void\n     *\n     */\n    handleResponseFromContentScript(event) {\n        const { result, error, requestId } = event.detail;\n        const responseCallback = this.pendingRequests.get(requestId);\n        if (responseCallback) {\n            if (error) {\n                responseCallback(null, new Error(error.message));\n            }\n            else {\n                responseCallback(result, null);\n            }\n            const deleted = this.pendingRequests.delete(requestId);\n            if (!deleted) {\n                console.error(`Error deleting a pending request with id ${requestId}`);\n            }\n        }\n        else {\n            console.error(`Request Id ${requestId} not found in response callback map`);\n        }\n    }\n}\nexports.connector = new Connector();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}