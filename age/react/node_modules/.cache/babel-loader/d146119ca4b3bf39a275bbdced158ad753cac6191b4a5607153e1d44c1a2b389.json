{"ast":null,"code":"import { wait } from './time';\nconst MAX_NUMBER_RETRIALS = 5;\n/**\n * Tries to execute a function and retries if it fails.\n *\n * @param func - The function to execute\n * @param args - The arguments to pass to the function (optional)\n * @param retryTimes - The number of times to retry (default: 5)\n *\n * @throws If the function is not defined or if it fails after the number of retries\n *\n * @returns The result of the function upon successful execution\n */\nexport const trySafeExecute = async (func, args, retryTimes = MAX_NUMBER_RETRIALS) => {\n  args = args || [null, {}];\n  if (!func) throw new Error(`Function execution init conditions are erroneous: ${func}`);\n  let failureCounter = 0;\n  let res = null;\n  while (true) {\n    try {\n      res = await func(...args);\n      break;\n    } catch (ex) {\n      const msg = `Failed to execute function ${func.name}. Retrying for ${++failureCounter}th time in 1s.`;\n      console.error(msg);\n      await wait(200 * (failureCounter + 1));\n      if (failureCounter === retryTimes) {\n        throw ex;\n      }\n    }\n  }\n  return res;\n};","map":{"version":3,"names":["wait","MAX_NUMBER_RETRIALS","trySafeExecute","func","args","retryTimes","Error","failureCounter","res","ex","msg","name","console","error"],"sources":["../../../src/utils/retryExecuteFunction.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,IAAI,QAAQ,QAAQ;AAG7B,MAAMC,mBAAmB,GAAG,CAAC;AAM7B;;;;;;;;;;;AAWA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAC5BC,IAAyB,EACzBC,IAAwC,EACxCC,UAAA,GAAqBJ,mBAAmB,KAC1B;EACdG,IAAI,GAAGA,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC;EAEzB,IAAI,CAACD,IAAI,EACP,MAAM,IAAIG,KAAK,CACb,qDAAqDH,IAAI,EAAE,CAC5D;EAEH,IAAII,cAAc,GAAG,CAAC;EACtB,IAAIC,GAAG,GAAM,IAAI;EACjB,OAAO,IAAI,EAAE;IACX,IAAI;MACFA,GAAG,GAAG,MAAML,IAAI,CAAC,GAAGC,IAAI,CAAC;MACzB;KACD,CAAC,OAAOK,EAAE,EAAE;MACX,MAAMC,GAAG,GAAG,8BACVP,IAAI,CAACQ,IACP,kBAAkB,EAAEJ,cAAc,gBAAgB;MAClDK,OAAO,CAACC,KAAK,CAACH,GAAG,CAAC;MAClB,MAAMV,IAAI,CAAC,GAAG,IAAIO,cAAc,GAAG,CAAC,CAAC,CAAC;MAEtC,IAAIA,cAAc,KAAKF,UAAU,EAAE;QACjC,MAAMI,EAAE;;;;EAId,OAAOD,GAAG;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}