{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\nconst Connector_1 = require(\"../connector/Connector\");\nconst __1 = require(\"..\");\n/**\n * This module contains the Account class. It is responsible for representing an account in the wallet.\n *\n * @remarks\n * This class provides methods to interact with the account's {@link balance} and to {@link sign} messages.\n *\n */\nclass Account {\n  /**\n   * This constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n   *\n   * @param address - The address of the account.\n   * @param name - The name of the account.\n   * @param providerName - The name of the provider.\n   * @returns An instance of the Account class.\n   *\n   * @remarks\n   * - The Account constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n   * - The IAccountDetails object contains the account's address and name.\n   * - The providerName string identifies the provider that is used to interact with the blockchain.\n   */\n  constructor({\n    address,\n    name\n  }, providerName) {\n    this._address = address;\n    this._name = name ?? '';\n    this._providerName = providerName;\n  }\n  /**\n   * @returns The address of the account.\n   */\n  address() {\n    return this._address;\n  }\n  /**\n   * @returns The name of the account.\n   */\n  name() {\n    return this._name;\n  }\n  /**\n   * @returns The name of the provider.\n   */\n  providerName() {\n    return this._providerName;\n  }\n  /**\n   * This method aims to retrieve the account's balance.\n   *\n   * @returns A promise that resolves to an object of type IAccountBalanceResponse. It contains the account's balance.\n   */\n  async balance() {\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountBalance, {\n        address: this._address\n      }, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n  /**\n   * This method aims to sign a message.\n   *\n   * @param data - The message to be signed.\n   * @returns An IAccountSignResponse object. It contains the signature of the message.\n   */\n  async sign(data) {\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountSign, {\n        address: this._address,\n        data\n      }, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n  /**\n   * This method aims to buy rolls on behalf of the sender.\n   *\n   * @param amount - The amount of rolls to be purchased\n   * @param fee - The fee to be paid for the transaction execution by the node..\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  async buyRolls(amount, fee) {\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountBuyRolls, {\n        amount: amount.toString(),\n        fee: fee.toString()\n      }, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n  /**\n   * This method aims to sell rolls on behalf of the sender.\n   *\n   * @param amount - The amount of rolls to be sold.\n   * @param fee - The fee to be paid for the transaction execution by the node..\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  async sellRolls(amount, fee) {\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountSellRolls, {\n        amount: amount.toString(),\n        fee: fee.toString()\n      }, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n  /**\n   * This method aims to transfer MAS on behalf of the sender to a recipient.\n   *\n   * @param amount - The amount of MAS (in the smallest unit) to be transferred.\n   * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n   * @returns An ITransactionDetails object. It contains the operationId on the network.\n   */\n  async sendTransaction(amount, recipientAddress, fee) {\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountSendTransaction, {\n        amount: amount.toString(),\n        recipientAddress,\n        fee: fee.toString()\n      }, (result, err) => {\n        if (err) return reject(err);\n        return resolve(result);\n      });\n    });\n  }\n  /**\n   * This method aims to interact with a smart contract deployed on the MASSA blockchain.\n   *\n   * @remarks\n   * If dryRun.dryRun is true, the method will dry run the smart contract call and return an\n   * IContractReadOperationResponse object which contains all the information about the dry run\n   * (state changes, gas used, etc.)\n   *\n   * @param contractAddress - The address of the smart contract.\n   * @param functionName - The name of the function to be called.\n   * @param parameter - The parameters as an Args object to be passed to the function.\n   * @param amount - The amount of MASSA coins to be sent to the contract (in the smallest unit).\n   * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n   * @param maxGas - The maximum amount of gas to be used for the transaction execution.\n   * @param nonPersistentExecution - The dryRun object to be passed to the function.\n   *\n   * @returns if 'nonPersistentExecution' is true, it returns an IContractReadOperationResponse object.\n   * Otherwise, it returns an ITransactionDetails object which contains the operationId on the network.\n   *\n   */\n  async callSC(contractAddress, functionName, parameter, amount, fee, maxGas, nonPersistentExecution = false) {\n    return new Promise((resolve, reject) => {\n      Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountCallSC, {\n        nickname: this._name,\n        name: functionName,\n        at: contractAddress,\n        args: parameter,\n        coins: amount,\n        fee: fee,\n        maxGas: maxGas,\n        nonPersistentExecution: nonPersistentExecution\n      }, (result, err) => {\n        if (err) return reject(err);\n        return resolve(nonPersistentExecution ? result : result);\n      });\n    });\n  }\n}\nexports.Account = Account;","map":{"version":3,"names":["Object","defineProperty","exports","value","Account","Connector_1","require","__1","constructor","address","name","providerName","_address","_name","_providerName","balance","Promise","resolve","reject","connector","sendMessageToContentScript","AvailableCommands","AccountBalance","result","err","sign","data","AccountSign","buyRolls","amount","fee","AccountBuyRolls","toString","sellRolls","AccountSellRolls","sendTransaction","recipientAddress","AccountSendTransaction","callSC","contractAddress","functionName","parameter","maxGas","nonPersistentExecution","AccountCallSC","nickname","at","args","coins"],"sources":["/Users/jwmdev/Development/github/massa/massa-sc-examples/age/react/node_modules/@massalabs/wallet-provider/dist/account/Account.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst Connector_1 = require(\"../connector/Connector\");\nconst __1 = require(\"..\");\n/**\n * This module contains the Account class. It is responsible for representing an account in the wallet.\n *\n * @remarks\n * This class provides methods to interact with the account's {@link balance} and to {@link sign} messages.\n *\n */\nclass Account {\n    /**\n     * This constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n     *\n     * @param address - The address of the account.\n     * @param name - The name of the account.\n     * @param providerName - The name of the provider.\n     * @returns An instance of the Account class.\n     *\n     * @remarks\n     * - The Account constructor takes an object of type IAccountDetails and a providerName string as its arguments.\n     * - The IAccountDetails object contains the account's address and name.\n     * - The providerName string identifies the provider that is used to interact with the blockchain.\n     */\n    constructor({ address, name }, providerName) {\n        this._address = address;\n        this._name = name ?? '';\n        this._providerName = providerName;\n    }\n    /**\n     * @returns The address of the account.\n     */\n    address() {\n        return this._address;\n    }\n    /**\n     * @returns The name of the account.\n     */\n    name() {\n        return this._name;\n    }\n    /**\n     * @returns The name of the provider.\n     */\n    providerName() {\n        return this._providerName;\n    }\n    /**\n     * This method aims to retrieve the account's balance.\n     *\n     * @returns A promise that resolves to an object of type IAccountBalanceResponse. It contains the account's balance.\n     */\n    async balance() {\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountBalance, { address: this._address }, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n    /**\n     * This method aims to sign a message.\n     *\n     * @param data - The message to be signed.\n     * @returns An IAccountSignResponse object. It contains the signature of the message.\n     */\n    async sign(data) {\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountSign, { address: this._address, data }, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n    /**\n     * This method aims to buy rolls on behalf of the sender.\n     *\n     * @param amount - The amount of rolls to be purchased\n     * @param fee - The fee to be paid for the transaction execution by the node..\n     * @returns An ITransactionDetails object. It contains the operationId on the network.\n     */\n    async buyRolls(amount, fee) {\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountBuyRolls, {\n                amount: amount.toString(),\n                fee: fee.toString(),\n            }, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n    /**\n     * This method aims to sell rolls on behalf of the sender.\n     *\n     * @param amount - The amount of rolls to be sold.\n     * @param fee - The fee to be paid for the transaction execution by the node..\n     * @returns An ITransactionDetails object. It contains the operationId on the network.\n     */\n    async sellRolls(amount, fee) {\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountSellRolls, {\n                amount: amount.toString(),\n                fee: fee.toString(),\n            }, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n    /**\n     * This method aims to transfer MAS on behalf of the sender to a recipient.\n     *\n     * @param amount - The amount of MAS (in the smallest unit) to be transferred.\n     * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n     * @returns An ITransactionDetails object. It contains the operationId on the network.\n     */\n    async sendTransaction(amount, recipientAddress, fee) {\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountSendTransaction, {\n                amount: amount.toString(),\n                recipientAddress,\n                fee: fee.toString(),\n            }, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(result);\n            });\n        });\n    }\n    /**\n     * This method aims to interact with a smart contract deployed on the MASSA blockchain.\n     *\n     * @remarks\n     * If dryRun.dryRun is true, the method will dry run the smart contract call and return an\n     * IContractReadOperationResponse object which contains all the information about the dry run\n     * (state changes, gas used, etc.)\n     *\n     * @param contractAddress - The address of the smart contract.\n     * @param functionName - The name of the function to be called.\n     * @param parameter - The parameters as an Args object to be passed to the function.\n     * @param amount - The amount of MASSA coins to be sent to the contract (in the smallest unit).\n     * @param fee - The fee to be paid for the transaction execution (in the smallest unit).\n     * @param maxGas - The maximum amount of gas to be used for the transaction execution.\n     * @param nonPersistentExecution - The dryRun object to be passed to the function.\n     *\n     * @returns if 'nonPersistentExecution' is true, it returns an IContractReadOperationResponse object.\n     * Otherwise, it returns an ITransactionDetails object which contains the operationId on the network.\n     *\n     */\n    async callSC(contractAddress, functionName, parameter, amount, fee, maxGas, nonPersistentExecution = false) {\n        return new Promise((resolve, reject) => {\n            Connector_1.connector.sendMessageToContentScript(this._providerName, __1.AvailableCommands.AccountCallSC, {\n                nickname: this._name,\n                name: functionName,\n                at: contractAddress,\n                args: parameter,\n                coins: amount,\n                fee: fee,\n                maxGas: maxGas,\n                nonPersistentExecution: nonPersistentExecution,\n            }, (result, err) => {\n                if (err)\n                    return reject(err);\n                return resolve(nonPersistentExecution\n                    ? result\n                    : result);\n            });\n        });\n    }\n}\nexports.Account = Account;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}