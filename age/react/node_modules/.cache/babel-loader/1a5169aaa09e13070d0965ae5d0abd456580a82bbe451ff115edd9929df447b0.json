{"ast":null,"code":"import { trySafeExecute } from '../utils/retryExecuteFunction';\nimport { JSON_RPC_REQUEST_METHOD } from '../interfaces/JsonRpcMethods';\nimport { BaseClient } from './BaseClient';\n/**\n * Private Api Client for interacting with a massa node.\n */\nexport class PrivateApiClient extends BaseClient {\n  /**\n   * Constructor for the {@link PrivateApiClient} object.\n   *\n   * @param clientConfig - The client configuration.\n   */\n  constructor(clientConfig) {\n    super(clientConfig);\n    // ========== bind api methods ========= //\n    // private api methods\n    this.nodeStop = this.nodeStop.bind(this);\n    this.nodeBanById = this.nodeBanById.bind(this);\n    this.nodeBanByIpAddress = this.nodeBanByIpAddress.bind(this);\n    this.nodeUnbanById = this.nodeUnbanById.bind(this);\n    this.nodeUnbanByIpAddress = this.nodeUnbanByIpAddress.bind(this);\n    this.nodeAddStakingSecretKeys = this.nodeAddStakingSecretKeys.bind(this);\n    this.nodeGetStakingAddresses = this.nodeGetStakingAddresses.bind(this);\n    this.nodeRemoveStakingAddresses = this.nodeRemoveStakingAddresses.bind(this);\n    this.nodeSignMessage = this.nodeSignMessage.bind(this);\n    this.nodeRemoveFromWhitelist = this.nodeRemoveFromWhitelist.bind(this);\n    this.nodeAddToPeersWhitelist = this.nodeAddToPeersWhitelist.bind(this);\n  }\n  /**\n   * Add a given Node IP address from the whitelist.\n   *\n   * @param ipAddress - The IP address to add to the whitelist.\n   *\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeAddToPeersWhitelist(ipAddress) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.NODE_ADD_TO_PEERS_WHITELIST;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[ipAddress]]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[ipAddress]]);\n    }\n  }\n  /**\n   * Remove a given Node IP address from the whitelist.\n   *\n   * @param ipAddress - The IP address to remove from the whitelist.\n   *\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeRemoveFromWhitelist(ipAddress) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.NODE_REMOVE_FROM_WHITELIST;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[ipAddress]]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[ipAddress]]);\n    }\n  }\n  /**\n   * Unban a given IP address.\n   *\n   * @param ipAddress - The IP address to unban.\n   *\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeUnbanByIpAddress(ipAddress) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.NODE_UNBAN_BY_IP;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[ipAddress]]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[ipAddress]]);\n    }\n  }\n  /**\n   * Unban a given node id.\n   *\n   * @param nodeId - The node id to unban.\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeUnbanById(nodeId) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.NODE_UNBAN_BY_ID;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[nodeId]]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[nodeId]]);\n    }\n  }\n  /**\n   * Ban a given node IP address.\n   *\n   * @param ipAddress - The IP address to ban.\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeBanByIpAddress(ipAddress) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.NODE_BAN_BY_IP;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[ipAddress]]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[ipAddress]]);\n    }\n  }\n  /**\n   * Ban a given node Id.\n   *\n   * @param id - The node id to ban.\n   *\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeBanById(id) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.NODE_BAN_BY_ID;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[id]]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[id]]);\n    }\n  }\n  /**\n   * Stops the node.\n   *\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeStop() {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.STOP_NODE;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, []]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, []);\n    }\n  }\n  /**\n   * Node signs a message.\n   *\n   * @param message - The message to sign.\n   *\n   * @returns A promise that resolves to an ISignedMessage object.\n   */\n  async nodeSignMessage(message) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.NODE_SIGN_MESSAGE;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [message]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [message]);\n    }\n  }\n  /**\n   * Get staking addresses.\n   *\n   * @returns A promise that resolves to an array of addresses (strings).\n   */\n  async nodeGetStakingAddresses() {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_STAKING_ADDRESSES;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, []]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, []);\n    }\n  }\n  /**\n   * Remove staking addresses.\n   *\n   * @param addresses - The addresses to remove.\n   *\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeRemoveStakingAddresses(addresses) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.REMOVE_STAKING_ADDRESSES;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [addresses]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [addresses]);\n    }\n  }\n  /**\n   * Add staking private keys.\n   *\n   * @param secretKeys - The secret keys to add.\n   *\n   * @returns A promise that resolves when the request is complete.\n   */\n  async nodeAddStakingSecretKeys(secretKeys) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.ADD_STAKING_PRIVATE_KEYS;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [secretKeys]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [secretKeys]);\n    }\n  }\n}","map":{"version":3,"names":["trySafeExecute","JSON_RPC_REQUEST_METHOD","BaseClient","PrivateApiClient","constructor","clientConfig","nodeStop","bind","nodeBanById","nodeBanByIpAddress","nodeUnbanById","nodeUnbanByIpAddress","nodeAddStakingSecretKeys","nodeGetStakingAddresses","nodeRemoveStakingAddresses","nodeSignMessage","nodeRemoveFromWhitelist","nodeAddToPeersWhitelist","ipAddress","jsonRpcRequestMethod","NODE_ADD_TO_PEERS_WHITELIST","retryStrategyOn","sendJsonRPCRequest","NODE_REMOVE_FROM_WHITELIST","NODE_UNBAN_BY_IP","nodeId","NODE_UNBAN_BY_ID","NODE_BAN_BY_IP","id","NODE_BAN_BY_ID","STOP_NODE","message","NODE_SIGN_MESSAGE","GET_STAKING_ADDRESSES","addresses","REMOVE_STAKING_ADDRESSES","secretKeys","ADD_STAKING_PRIVATE_KEYS"],"sources":["../../../src/web3/PrivateApiClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}