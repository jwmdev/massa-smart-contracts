{"ast":null,"code":"import * as ser from './serializers';\n/**\n * Typed Arguments facilitating the differentiation\n * between different argument types due to Javascript's\n * single number type.\n *\n * @remarks In AssemblyScript the latter are all native types\n */\nexport var ArrayType;\n(function (ArrayType) {\n  ArrayType[ArrayType[\"STRING\"] = 0] = \"STRING\";\n  ArrayType[ArrayType[\"BOOL\"] = 1] = \"BOOL\";\n  ArrayType[ArrayType[\"U8\"] = 2] = \"U8\";\n  ArrayType[ArrayType[\"U32\"] = 3] = \"U32\";\n  ArrayType[ArrayType[\"U64\"] = 4] = \"U64\";\n  ArrayType[ArrayType[\"U128\"] = 5] = \"U128\";\n  ArrayType[ArrayType[\"U256\"] = 6] = \"U256\";\n  ArrayType[ArrayType[\"I32\"] = 7] = \"I32\";\n  ArrayType[ArrayType[\"I64\"] = 8] = \"I64\";\n  ArrayType[ArrayType[\"F32\"] = 9] = \"F32\";\n  ArrayType[ArrayType[\"F64\"] = 10] = \"F64\";\n})(ArrayType || (ArrayType = {}));\n/**\n * Storage and serialization class for remote function call arguments.\n *\n * @remarks\n * This class can serialize typescript native types into bytes, in order to\n * make smart-contract function call easier.\n * It also can deserialize bytes.\n *\n */\nexport class Args {\n  offset = 0;\n  serialized;\n  /**\n   * Constructor to either serialize or deserialize data passed from/to DApps and remote Smart contracts.\n   *\n   * @param serialized - The optional serialized arguments to deserialize.\n   * @param offset - The optional offset to start deserializing from.\n   */\n  constructor(serialized = [], offset = 0) {\n    this.serialized = Uint8Array.from(serialized);\n    this.offset = offset;\n  }\n  /**\n   * Returns the current deserialization offset of the serialized byte array.\n   *\n   * @returns the current offset\n   */\n  getOffset() {\n    return this.offset;\n  }\n  /**\n   * Returns the serialized byte array.\n   *\n   * @returns A byte array.\n   */\n  serialize() {\n    return Array.from(this.serialized);\n  }\n  // Getters\n  /**\n   * Returns the next string in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized string\n   */\n  nextString() {\n    const length = this.nextU32();\n    const end = this.offset + length;\n    const result = ser.bytesToStr(this.serialized.slice(this.offset, end));\n    this.offset = end;\n    return result;\n  }\n  /**\n   * Returns the next unsigned byte in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  nextU8() {\n    const value = ser.byteToU8(this.serialized, this.offset);\n    this.offset++;\n    return BigInt(value);\n  }\n  /**\n   * Returns the next unsigned integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number\n   */\n  nextU32() {\n    const value = ser.bytesToU32(this.serialized, this.offset);\n    this.offset += 4;\n    return value;\n  }\n  /**\n   * Returns the next long integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  nextU64() {\n    const value = ser.bytesToU64(this.serialized, this.offset);\n    this.offset += 8;\n    return value;\n  }\n  /**\n   * Returns the next uint128 in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  nextU128() {\n    const value = ser.bytesToU128(this.serialized, this.offset);\n    this.offset += 16;\n    return value;\n  }\n  /**\n   * Returns the next uint256 in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  nextU256() {\n    const value = ser.bytesToU256(this.serialized, this.offset);\n    this.offset += 32;\n    return value;\n  }\n  /**\n   * Returns the next boolean in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized boolean.\n   */\n  nextBool() {\n    return !!this.serialized[this.offset++];\n  }\n  /**\n   * Returns the next signed integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  nextI32() {\n    const value = ser.bytesToI32(this.serialized, this.offset);\n    this.offset += 4;\n    return value;\n  }\n  /**\n   * Returns the next signed long integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  nextI64() {\n    const value = ser.bytesToI64(this.serialized, this.offset);\n    this.offset += 8;\n    return BigInt(value);\n  }\n  /**\n   * Returns the next floating number in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  nextF32() {\n    const value = ser.bytesToF32(this.serialized, this.offset);\n    this.offset += 4;\n    return value;\n  }\n  /**\n   * Returns the next long floating number in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  nextF64() {\n    const value = ser.bytesToF64(this.serialized, this.offset);\n    this.offset += 8;\n    return value;\n  }\n  /**\n   * Returns the next sub byte array in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized byte array.\n   */\n  nextUint8Array() {\n    const length = this.nextU32();\n    const byteArray = this.serialized.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return byteArray;\n  }\n  /**\n   * Returns the next {@link ISerializable} object in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param ctor - the class constructor prototype T.prototype\n   *\n   * @returns the deserialized object T\n   */\n  nextSerializable(ctor) {\n    let deserializationResult = ser.deserializeObj(this.serialized, this.offset, ctor);\n    this.offset = deserializationResult.offset;\n    return deserializationResult.instance;\n  }\n  /**\n   * Returns the next array of {@link ISerializable} objects in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param ctor - the class constructor prototype T.prototype\n   *\n   * @returns the deserialized array of object that implement ISerializable\n   */\n  nextSerializableObjectArray(ctor) {\n    const length = this.nextU32();\n    if (!length) {\n      return [];\n    }\n    if (this.offset + length > this.serialized.length) {\n      throw new Error(\"can't deserialize length of array from given argument\");\n    }\n    const buffer = this.getNextData(length);\n    const value = ser.bytesToSerializableObjectArray(buffer, ctor);\n    this.offset += length;\n    return value;\n  }\n  /**\n   * Returns the next array of {@link ArrayType} objects in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param type - the type of the elements in the array.\n   *\n   * @returns the next array of object that are native type\n   */\n  nextArray(type) {\n    const length = this.nextU32();\n    if (!length) {\n      return [];\n    }\n    if (this.offset + length > this.serialized.length) {\n      throw new Error(\"can't deserialize length of array from given argument\");\n    }\n    const buffer = this.getNextData(length);\n    const value = ser.bytesToArray(buffer, type);\n    this.offset += length;\n    return value;\n  }\n  // Setter\n  /**\n   * Adds a unsigned byte to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addU8(value) {\n    this.serialized = Args.concatArrays(this.serialized, ser.u8toByte(value));\n    this.offset++;\n    return this;\n  }\n  /**\n   * Adds a boolean to the serialized arguments.\n   *\n   * @param value - the boolean to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addBool(value) {\n    this.serialized = Args.concatArrays(this.serialized, ser.u8toByte(value ? 1 : 0));\n    this.offset++;\n    return this;\n  }\n  /**\n   * Adds an unsigned integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addU32(value) {\n    this.serialized = Args.concatArrays(this.serialized, ser.u32ToBytes(value));\n    this.offset += 4;\n    return this;\n  }\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addU64(bigInt) {\n    this.serialized = Args.concatArrays(this.serialized, ser.u64ToBytes(bigInt));\n    this.offset += 8;\n    return this;\n  }\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addU128(bigInt) {\n    this.serialized = Args.concatArrays(this.serialized, ser.u128ToBytes(bigInt));\n    this.offset += 16;\n    return this;\n  }\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addU256(bigInt) {\n    this.serialized = Args.concatArrays(this.serialized, ser.u256ToBytes(bigInt));\n    this.offset += 32;\n    return this;\n  }\n  /**\n   * Adds a signed integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addI32(value) {\n    this.serialized = Args.concatArrays(this.serialized, ser.i32ToBytes(value));\n    this.offset += 4;\n    return this;\n  }\n  /**\n   * Adds a signed long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addI64(bigInt) {\n    this.serialized = Args.concatArrays(this.serialized, ser.i64ToBytes(bigInt));\n    this.offset += 8;\n    return this;\n  }\n  /**\n   * Adds a floating number to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addF32(value) {\n    this.serialized = Args.concatArrays(this.serialized, ser.f32ToBytes(value));\n    this.offset += 4;\n    return this;\n  }\n  /**\n   * Adds a long floating number to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addF64(value) {\n    this.serialized = Args.concatArrays(this.serialized, ser.f64ToBytes(value));\n    this.offset += 8;\n    return this;\n  }\n  /**\n   * Adds a byte array integer to the serialized arguments.\n   *\n   * @param array - the array to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addUint8Array(array) {\n    this.addU32(array.length);\n    this.serialized = Args.concatArrays(this.serialized, array);\n    this.offset += array.length;\n    return this;\n  }\n  /**\n   * Adds a string to the serialized arguments.\n   *\n   * @remarks\n   * Works only if the argument is an instance of a handled type (String of 4294967295 characters maximum)\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addString(arg) {\n    const maxSize = 4294967295;\n    const size = arg.length;\n    if (size > maxSize) {\n      console.warn('input string is too long, it will be truncated');\n      arg = arg.slice(0, maxSize);\n    }\n    const serialized = ser.strToBytes(arg);\n    this.addU32(serialized.length);\n    this.serialized = Args.concatArrays(this.serialized, ser.strToBytes(arg));\n    return this;\n  }\n  /**\n   * Adds a serializable object to the serialized arguments.\n   *\n   * @remarks\n   * The object must implement the {@link ISerializable} interface\n   *\n   * @see {@link ISerializable}\n   *\n   * @param value - the object to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addSerializable(value) {\n    const serializedValue = value.serialize();\n    this.serialized = Args.concatArrays(this.serialized, serializedValue);\n    this.offset += serializedValue.length;\n    return this;\n  }\n  /**\n   * Adds an array of serializable objects to the serialized arguments.\n   *\n   * @remarks\n   * Each object must implement the {@link ISerializable} interface.\n   * This will perform a deep copy of your objects thanks to the {@link ISerializable.serialize}\n   * method you define in your class.\n   *\n   * @see {@link ISerializable}\n   *\n   * @param arg - the argument to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addSerializableObjectArray(arg) {\n    const content = ser.serializableObjectsArrayToBytes(arg);\n    this.addU32(content.length);\n    this.serialized = Args.concatArrays(this.serialized, content);\n    return this;\n  }\n  /**\n   * Adds an array of objects to the serialized arguments.\n   *\n   * @remarks\n   * If the type of the values of the array is not native type, this will serialize the pointers, which is certainly\n   * not what you want! You can only serialize properly array of native types or array of `Serializable` object.\n   *\n   * @see {@link addSerializableObjectArray}\n   *\n   * @param arg - the argument to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addArray(arg, type) {\n    const content = ser.arrayToBytes(arg, type);\n    this.addU32(content.length);\n    this.serialized = Args.concatArrays(this.serialized, content);\n    return this;\n  }\n  // Utils\n  /**\n   * Internal function to concat to Uint8Array.\n   *\n   * @param a - first array to concat\n   * @param b - second array to concat\n   *\n   * @returns the concatenated array\n   */\n  static concatArrays(a, b) {\n    return new Uint8Array([...a, ...b]);\n  }\n  /**\n   * Returns the data of requested size for current offset\n   *\n   * @param size - The data size\n   * @returns the slice of the serialized internal buffer\n   */\n  getNextData(size) {\n    return this.serialized.slice(this.offset, this.offset + size);\n  }\n}","map":{"version":3,"names":["ser","ArrayType","Args","offset","serialized","constructor","Uint8Array","from","getOffset","serialize","Array","nextString","length","nextU32","end","result","bytesToStr","slice","nextU8","value","byteToU8","BigInt","bytesToU32","nextU64","bytesToU64","nextU128","bytesToU128","nextU256","bytesToU256","nextBool","nextI32","bytesToI32","nextI64","bytesToI64","nextF32","bytesToF32","nextF64","bytesToF64","nextUint8Array","byteArray","nextSerializable","ctor","deserializationResult","deserializeObj","instance","nextSerializableObjectArray","Error","buffer","getNextData","bytesToSerializableObjectArray","nextArray","type","bytesToArray","addU8","concatArrays","u8toByte","addBool","addU32","u32ToBytes","addU64","bigInt","u64ToBytes","addU128","u128ToBytes","addU256","u256ToBytes","addI32","i32ToBytes","addI64","i64ToBytes","addF32","f32ToBytes","addF64","f64ToBytes","addUint8Array","array","addString","arg","maxSize","size","console","warn","strToBytes","addSerializable","serializedValue","addSerializableObjectArray","content","serializableObjectsArrayToBytes","addArray","arrayToBytes","a","b"],"sources":["/Users/jwmdev/Development/github/massa/massa-sc-examples/age/react/node_modules/@massalabs/web3-utils/src/arguments.ts"],"sourcesContent":["import { ISerializable } from './ISerializable';\nimport * as ser from './serializers';\n\n/**\n * Typed Arguments facilitating the differentiation\n * between different argument types due to Javascript's\n * single number type.\n *\n * @remarks In AssemblyScript the latter are all native types\n */\nexport enum ArrayType {\n  STRING,\n  BOOL,\n  U8,\n  U32,\n  U64,\n  U128,\n  U256,\n  I32,\n  I64,\n  F32,\n  F64,\n}\n\n/**\n * Native types in AssemblyScript\n *\n * @remarks\n * These are the types that can be used in AssemblyScript\n */\nexport type NativeType = string | boolean | number | bigint;\n\n/**\n * Storage and serialization class for remote function call arguments.\n *\n * @remarks\n * This class can serialize typescript native types into bytes, in order to\n * make smart-contract function call easier.\n * It also can deserialize bytes.\n *\n */\nexport class Args {\n  private offset = 0;\n  private serialized: Uint8Array;\n\n  /**\n   * Constructor to either serialize or deserialize data passed from/to DApps and remote Smart contracts.\n   *\n   * @param serialized - The optional serialized arguments to deserialize.\n   * @param offset - The optional offset to start deserializing from.\n   */\n  constructor(serialized: Array<number> | Uint8Array = [], offset = 0) {\n    this.serialized = Uint8Array.from(serialized);\n    this.offset = offset;\n  }\n\n  /**\n   * Returns the current deserialization offset of the serialized byte array.\n   *\n   * @returns the current offset\n   */\n  public getOffset(): number {\n    return this.offset;\n  }\n\n  /**\n   * Returns the serialized byte array.\n   *\n   * @returns A byte array.\n   */\n  public serialize(): Array<number> {\n    return Array.from(this.serialized);\n  }\n\n  // Getters\n\n  /**\n   * Returns the next string in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized string\n   */\n  public nextString(): string {\n    const length = this.nextU32();\n    const end = this.offset + length;\n    const result = ser.bytesToStr(this.serialized.slice(this.offset, end));\n\n    this.offset = end;\n    return result;\n  }\n\n  /**\n   * Returns the next unsigned byte in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU8(): bigint {\n    const value = ser.byteToU8(this.serialized, this.offset);\n\n    this.offset++;\n    return BigInt(value);\n  }\n\n  /**\n   * Returns the next unsigned integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number\n   */\n  public nextU32(): number {\n    const value = ser.bytesToU32(this.serialized, this.offset);\n\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Returns the next long integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU64(): bigint {\n    const value = ser.bytesToU64(this.serialized, this.offset);\n\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Returns the next uint128 in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU128(): bigint {\n    const value = ser.bytesToU128(this.serialized, this.offset);\n\n    this.offset += 16;\n    return value;\n  }\n\n  /**\n   * Returns the next uint256 in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU256(): bigint {\n    const value = ser.bytesToU256(this.serialized, this.offset);\n\n    this.offset += 32;\n    return value;\n  }\n\n  /**\n   * Returns the next boolean in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized boolean.\n   */\n  nextBool(): boolean {\n    return !!this.serialized[this.offset++];\n  }\n\n  /**\n   * Returns the next signed integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextI32(): number {\n    const value = ser.bytesToI32(this.serialized, this.offset);\n\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Returns the next signed long integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextI64(): bigint {\n    const value = ser.bytesToI64(this.serialized, this.offset);\n\n    this.offset += 8;\n    return BigInt(value);\n  }\n\n  /**\n   * Returns the next floating number in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextF32(): number {\n    const value = ser.bytesToF32(this.serialized, this.offset);\n\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Returns the next long floating number in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextF64(): number {\n    const value = ser.bytesToF64(this.serialized, this.offset);\n\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Returns the next sub byte array in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized byte array.\n   */\n  public nextUint8Array(): Uint8Array {\n    const length = this.nextU32();\n    const byteArray = this.serialized.slice(this.offset, this.offset + length);\n\n    this.offset += length;\n    return byteArray;\n  }\n\n  /**\n   * Returns the next {@link ISerializable} object in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param ctor - the class constructor prototype T.prototype\n   *\n   * @returns the deserialized object T\n   */\n  public nextSerializable<T extends ISerializable<T>>(ctor: new () => T): T {\n    let deserializationResult = ser.deserializeObj(\n      this.serialized,\n      this.offset,\n      ctor,\n    );\n    this.offset = deserializationResult.offset;\n    return deserializationResult.instance;\n  }\n\n  /**\n   * Returns the next array of {@link ISerializable} objects in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param ctor - the class constructor prototype T.prototype\n   *\n   * @returns the deserialized array of object that implement ISerializable\n   */\n  public nextSerializableObjectArray<T extends ISerializable<T>>(\n    ctor: new () => T,\n  ): T[] {\n    const length = this.nextU32();\n\n    if (!length) {\n      return [];\n    }\n\n    if (this.offset + length > this.serialized.length) {\n      throw new Error(\"can't deserialize length of array from given argument\");\n    }\n\n    const buffer = this.getNextData(length);\n\n    const value = ser.bytesToSerializableObjectArray<T>(buffer, ctor);\n    this.offset += length;\n    return value;\n  }\n\n  /**\n   * Returns the next array of {@link ArrayType} objects in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param type - the type of the elements in the array.\n   *\n   * @returns the next array of object that are native type\n   */\n  nextArray<T>(type: ArrayType): T[] {\n    const length = this.nextU32();\n\n    if (!length) {\n      return [];\n    }\n\n    if (this.offset + length > this.serialized.length) {\n      throw new Error(\"can't deserialize length of array from given argument\");\n    }\n\n    const buffer = this.getNextData(length);\n    const value = ser.bytesToArray<T>(buffer, type);\n    this.offset += length;\n    return value;\n  }\n\n  // Setter\n\n  /**\n   * Adds a unsigned byte to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU8(value: number): this {\n    this.serialized = Args.concatArrays(this.serialized, ser.u8toByte(value));\n    this.offset++;\n    return this;\n  }\n\n  /**\n   * Adds a boolean to the serialized arguments.\n   *\n   * @param value - the boolean to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addBool(value: boolean): this {\n    this.serialized = Args.concatArrays(\n      this.serialized,\n      ser.u8toByte(value ? 1 : 0),\n    );\n    this.offset++;\n    return this;\n  }\n\n  /**\n   * Adds an unsigned integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU32(value: number): this {\n    this.serialized = Args.concatArrays(this.serialized, ser.u32ToBytes(value));\n    this.offset += 4;\n    return this;\n  }\n\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU64(bigInt: bigint): this {\n    this.serialized = Args.concatArrays(\n      this.serialized,\n      ser.u64ToBytes(bigInt),\n    );\n\n    this.offset += 8;\n\n    return this;\n  }\n\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU128(bigInt: bigint): this {\n    this.serialized = Args.concatArrays(\n      this.serialized,\n      ser.u128ToBytes(bigInt),\n    );\n\n    this.offset += 16;\n\n    return this;\n  }\n\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU256(bigInt: bigint): this {\n    this.serialized = Args.concatArrays(\n      this.serialized,\n      ser.u256ToBytes(bigInt),\n    );\n\n    this.offset += 32;\n\n    return this;\n  }\n\n  /**\n   * Adds a signed integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addI32(value: number): this {\n    this.serialized = Args.concatArrays(this.serialized, ser.i32ToBytes(value));\n    this.offset += 4;\n    return this;\n  }\n\n  /**\n   * Adds a signed long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addI64(bigInt: bigint): this {\n    this.serialized = Args.concatArrays(\n      this.serialized,\n      ser.i64ToBytes(bigInt),\n    );\n    this.offset += 8;\n    return this;\n  }\n\n  /**\n   * Adds a floating number to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addF32(value: number): this {\n    this.serialized = Args.concatArrays(this.serialized, ser.f32ToBytes(value));\n    this.offset += 4;\n    return this;\n  }\n\n  /**\n   * Adds a long floating number to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addF64(value: number): this {\n    this.serialized = Args.concatArrays(this.serialized, ser.f64ToBytes(value));\n    this.offset += 8;\n    return this;\n  }\n\n  /**\n   * Adds a byte array integer to the serialized arguments.\n   *\n   * @param array - the array to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addUint8Array(array: Uint8Array): this {\n    this.addU32(array.length);\n    this.serialized = Args.concatArrays(this.serialized, array);\n    this.offset += array.length;\n    return this;\n  }\n\n  /**\n   * Adds a string to the serialized arguments.\n   *\n   * @remarks\n   * Works only if the argument is an instance of a handled type (String of 4294967295 characters maximum)\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addString(arg: string): this {\n    const maxSize = 4294967295;\n    const size = arg.length;\n\n    if (size > maxSize) {\n      console.warn('input string is too long, it will be truncated');\n      arg = arg.slice(0, maxSize);\n    }\n\n    const serialized = ser.strToBytes(arg);\n    this.addU32(serialized.length);\n\n    this.serialized = Args.concatArrays(this.serialized, ser.strToBytes(arg));\n\n    return this;\n  }\n\n  /**\n   * Adds a serializable object to the serialized arguments.\n   *\n   * @remarks\n   * The object must implement the {@link ISerializable} interface\n   *\n   * @see {@link ISerializable}\n   *\n   * @param value - the object to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addSerializable<T>(value: ISerializable<T>): this {\n    const serializedValue = value.serialize();\n    this.serialized = Args.concatArrays(this.serialized, serializedValue);\n    this.offset += serializedValue.length;\n    return this;\n  }\n\n  /**\n   * Adds an array of serializable objects to the serialized arguments.\n   *\n   * @remarks\n   * Each object must implement the {@link ISerializable} interface.\n   * This will perform a deep copy of your objects thanks to the {@link ISerializable.serialize}\n   * method you define in your class.\n   *\n   * @see {@link ISerializable}\n   *\n   * @param arg - the argument to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addSerializableObjectArray<T extends ISerializable<T>>(\n    arg: T[],\n  ): this {\n    const content: Uint8Array = ser.serializableObjectsArrayToBytes(arg);\n    this.addU32(content.length);\n    this.serialized = Args.concatArrays(this.serialized, content);\n    return this;\n  }\n\n  /**\n   * Adds an array of objects to the serialized arguments.\n   *\n   * @remarks\n   * If the type of the values of the array is not native type, this will serialize the pointers, which is certainly\n   * not what you want! You can only serialize properly array of native types or array of `Serializable` object.\n   *\n   * @see {@link addSerializableObjectArray}\n   *\n   * @param arg - the argument to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addArray(arg: NativeType[], type: ArrayType): this {\n    const content = ser.arrayToBytes(arg, type);\n    this.addU32(content.length);\n    this.serialized = Args.concatArrays(this.serialized, content);\n    return this;\n  }\n\n  // Utils\n\n  /**\n   * Internal function to concat to Uint8Array.\n   *\n   * @param a - first array to concat\n   * @param b - second array to concat\n   *\n   * @returns the concatenated array\n   */\n  static concatArrays(a: Uint8Array, b: Uint8Array): Uint8Array {\n    return new Uint8Array([...a, ...b]);\n  }\n\n  /**\n   * Returns the data of requested size for current offset\n   *\n   * @param size - The data size\n   * @returns the slice of the serialized internal buffer\n   */\n  private getNextData(size: number): Uint8Array {\n    return this.serialized.slice(this.offset, this.offset + size);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}