{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { Timeout } from '../utils/time';\n/** Smart Contracts Event Poller */\nexport const ON_MASSA_EVENT_DATA = 'ON_MASSA_EVENT';\nexport const ON_MASSA_EVENT_ERROR = 'ON_MASSA_ERROR';\n/**\n * Compares two ISlot instances based on their `period` and `thread` properties.\n *\n * @remarks\n * The comparison is primarily based on the 'period' property.  If the 'period' values are the same,\n * the comparison is then based on the 'thread' property.\n *\n * @param a - The first ISlot instance to be compared.\n * @param b - The second ISlot instance to be compared.\n *\n * @returns A positive number if 'a' should come after 'b', a negative number if 'a' should come before 'b',\n * or 0 if 'a' and 'b' are considered equal.\n */\nconst compareByThreadAndPeriod = (a, b) => {\n  const periodOrder = a.period - b.period;\n  if (periodOrder === 0) {\n    const threadOrder = a.thread - b.thread;\n    return threadOrder;\n  }\n  return periodOrder;\n};\n/**\n * The EventPoller class provides a convenient way to poll events from the Massa network.\n */\nexport class EventPoller extends EventEmitter {\n  eventsFilter;\n  pollIntervalMillis;\n  web3Client;\n  timeoutId = null;\n  lastSlot;\n  /**\n   * Constructor of the EventPoller object.\n   *\n   * @param eventsFilter - The filter to use for the events.\n   * @param pollIntervalMillis - The interval in milliseconds to poll for events.\n   * @param web3Client - The web3 client to use for polling.\n   */\n  constructor(eventsFilter, pollIntervalMillis, web3Client) {\n    super();\n    this.eventsFilter = eventsFilter;\n    this.pollIntervalMillis = pollIntervalMillis;\n    this.web3Client = web3Client;\n    // bind class methods.\n    this.callback = this.callback.bind(this);\n    this.stopPolling = this.stopPolling.bind(this);\n    this.startPolling = this.startPolling.bind(this);\n  }\n  /**\n   * Polls for new events that match a specified filter and emits them.\n   *\n   * @remarks\n   * It uses the Web3 client to retrieve events from a smart contract and filters them further.\n   * based on regular expression and last scanned slot.\n   * If any matching events are found, it sorts them based on the highest period and thread and emits them.\n   */\n  async callback() {\n    try {\n      // get all events using the filter.\n      const events = await this.web3Client.smartContracts().getFilteredScOutputEvents(this.eventsFilter);\n      // filter further using regex and last scanned slot.\n      const filteredEvents = events.filter(event => {\n        // check if regex condition is met.\n        let meetsRegex = true;\n        if (this.eventsFilter.eventsNameRegex) {\n          meetsRegex = event.data.includes(this.eventsFilter.eventsNameRegex);\n        }\n        // check if after last slot.\n        let isAfterLastSlot = true;\n        if (this.lastSlot) {\n          isAfterLastSlot = compareByThreadAndPeriod(event.context.slot, this.lastSlot) > 0;\n        }\n        return meetsRegex && isAfterLastSlot;\n      });\n      // sort after highest period and thread.\n      const sortedByHighestThreadAndPeriod = filteredEvents.sort((a, b) => {\n        return compareByThreadAndPeriod(a.context.slot, b.context.slot);\n      });\n      if (sortedByHighestThreadAndPeriod.length > 0) {\n        // update slot to be the very last slot.\n        this.lastSlot = sortedByHighestThreadAndPeriod[sortedByHighestThreadAndPeriod.length - 1].context.slot;\n        // emit the filtered events.\n        this.emit(ON_MASSA_EVENT_DATA, sortedByHighestThreadAndPeriod);\n      }\n    } catch (ex) {\n      this.emit(ON_MASSA_EVENT_ERROR, ex);\n    }\n    // reset the interval.\n    this.timeoutId = new Timeout(this.pollIntervalMillis, () => this.callback());\n  }\n  /**\n   * Stops polling for events.\n   */\n  stopPolling() {\n    if (this.timeoutId) this.timeoutId.clear();\n  }\n  /**\n   * Starts polling for events.\n   */\n  startPolling() {\n    const that = this;\n    if (this.timeoutId) {\n      return;\n    }\n    this.timeoutId = new Timeout(this.pollIntervalMillis, () => that.callback());\n  }\n  /**\n   * Starts polling for events and returns the EventPoller object.\n   *\n   * @param eventsFilter - The filter to use for the events.\n   * @param pollIntervalMillis - The interval in milliseconds to poll for events.\n   * @param web3Client - The web3 client to use for polling.\n   * @param onData - The callback function to call when new events are found.\n   * @param onError - The callback function to call when an error occurs.\n   *\n   * @returns The EventPoller object created.\n   */\n  static startEventsPolling(eventsFilter, pollIntervalMillis, web3Client, onData, onError) {\n    const eventPoller = new EventPoller(eventsFilter, pollIntervalMillis, web3Client);\n    eventPoller.startPolling();\n    if (onData) {\n      eventPoller.on(ON_MASSA_EVENT_DATA, data => {\n        onData(data);\n      });\n    }\n    if (onError) {\n      eventPoller.on(ON_MASSA_EVENT_ERROR, e => {\n        onError(e);\n      });\n    }\n    return eventPoller;\n  }\n  /**\n   * Get only the events that match the filter once.\n   *\n   * @param eventsFilter - The filter to use for the events.\n   * @param web3Client - The web3 client to use for polling.\n   *\n   * @returns The events that match the filter as a promise.\n   */\n  static async getEventsOnce(eventsFilter, web3Client) {\n    const events = await web3Client.smartContracts().getFilteredScOutputEvents(eventsFilter);\n    return events;\n  }\n}","map":{"version":3,"names":["EventEmitter","Timeout","ON_MASSA_EVENT_DATA","ON_MASSA_EVENT_ERROR","compareByThreadAndPeriod","a","b","periodOrder","period","threadOrder","thread","EventPoller","eventsFilter","pollIntervalMillis","web3Client","timeoutId","lastSlot","constructor","callback","bind","stopPolling","startPolling","events","smartContracts","getFilteredScOutputEvents","filteredEvents","filter","event","meetsRegex","eventsNameRegex","data","includes","isAfterLastSlot","context","slot","sortedByHighestThreadAndPeriod","sort","length","emit","ex","clear","that","startEventsPolling","onData","onError","eventPoller","on","e","getEventsOnce"],"sources":["../../../src/web3/EventPoller.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}