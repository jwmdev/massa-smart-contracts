{"ast":null,"code":"import * as varint from 'varint';\nimport { blake3 } from '@noble/hashes/blake3';\n/**\n * A collection of utility functions for working with various data encoding and hashing formats.\n *\n * This module provides several functions for encoding and decoding data in various formats, including\n * `base58`, `varint`, and `blake3 hashes`.\n *\n * @module Xbqcrypto.ts\n */\nimport { unsignedBigIntUtils } from './encode_decode_int';\nimport { encode, decode } from 'bs58check';\n/**\n * Hashes data with blake3\n *\n * @param data - The data to hash\n *\n * @returns The hash of the data with blake3\n */\nexport function hashBlake3(data) {\n  return blake3(data);\n}\n/**\n * Encodes a buffer or an Uint8Array to base58\n *\n * @param data - The data to encode\n *\n * @returns The base58 encoded data as a string\n */\nexport function base58Encode(data) {\n  return encode(data);\n}\n/**\n * Decode a base58 encoded string to a buffer\n *\n * @param data - The base58 encoded string\n *\n * @returns The decoded buffer\n */\nexport function base58Decode(data) {\n  const decoded = decode(data);\n  return Buffer.from(decoded);\n}\n/**\n * Encodes a number or bigint to a varint encoded Uint8Array.\n *\n * @param data - The data to encode\n *\n * @returns The varint encoded data as a Uint8Array\n */\nexport function varintEncode(data) {\n  if (typeof data === 'bigint') {\n    return unsignedBigIntUtils.encode(data);\n  }\n  return varint.encode(data);\n}\n/**\n * Decodes a varint encoded Uint8Array to a number\n *\n * @param data - The varint encoded Uint8Array\n *\n * @returns The decoded number and the number of bytes read\n */\nexport function varintDecode(data) {\n  const value = varint.decode(data);\n  const bytes = varint.decode.bytes;\n  return {\n    value,\n    bytes\n  };\n}","map":{"version":3,"names":["varint","blake3","unsignedBigIntUtils","encode","decode","hashBlake3","data","base58Encode","base58Decode","decoded","Buffer","from","varintEncode","varintDecode","value","bytes"],"sources":["../../../src/utils/Xbqcrypto.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,QAAQ;AAChC,SAASC,MAAM,QAAQ,sBAAsB;AAC7C;;;;;;;;AASA,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,MAAM,EAAEC,MAAM,QAAQ,WAAW;AAE1C;;;;;;;AAOA,OAAM,SAAUC,UAAUA,CAACC,IAAyB;EAClD,OAAOL,MAAM,CAACK,IAAI,CAAC;AACrB;AAEA;;;;;;;AAOA,OAAM,SAAUC,YAAYA,CAACD,IAAyB;EACpD,OAAOH,MAAM,CAACG,IAAI,CAAC;AACrB;AAEA;;;;;;;AAOA,OAAM,SAAUE,YAAYA,CAACF,IAAY;EACvC,MAAMG,OAAO,GAAGL,MAAM,CAACE,IAAI,CAAC;EAC5B,OAAOI,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC;AAC7B;AAEA;;;;;;;AAOA,OAAM,SAAUG,YAAYA,CAACN,IAAqB;EAChD,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOJ,mBAAmB,CAACC,MAAM,CAACG,IAAc,CAAC;;EAEnD,OAAON,MAAM,CAACG,MAAM,CAACG,IAAI,CAAC;AAC5B;AAEA;;;;;;;AAOA,OAAM,SAAUO,YAAYA,CAACP,IAAgB;EAI3C,MAAMQ,KAAK,GAAGd,MAAM,CAACI,MAAM,CAACE,IAAI,CAAC;EACjC,MAAMS,KAAK,GAAGf,MAAM,CAACI,MAAM,CAACW,KAAK;EACjC,OAAO;IAAED,KAAK;IAAEC;EAAK,CAAE;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}