{"ast":null,"code":"/**\n * This file includes the implementation for the {@link SmartContractsClient} class. This class provides methods for interacting with smart contracts\n * in the Massa blockchain. Such methods include {@link SmartContractsClient#deploySmartContract|deploying}, {@link SmartContractsClient#callSmartContract|calling},\n * and {@link SmartContractsClient#readSmartContract|reading} smart contracts, as well as retrieving smart contract {@link SmartContractsClient#getFilteredScOutputEvents|events}\n * and {@link SmartContractsClient#getContractBalance|balances}.\n *\n * @module SmartContractsClient\n */\nimport { EOperationStatus } from '../interfaces/EOperationStatus';\nimport { JSON_RPC_REQUEST_METHOD } from '../interfaces/JsonRpcMethods';\nimport { fromMAS } from '../utils/converters';\nimport { trySafeExecute } from '../utils/retryExecuteFunction';\nimport { wait } from '../utils/time';\nimport { BaseClient } from './BaseClient';\nconst MAX_READ_BLOCK_GAS = BigInt(4_294_967_295);\nconst TX_POLL_INTERVAL_MS = 10000;\nconst TX_STATUS_CHECK_RETRY_COUNT = 100;\n/**\n * The key name (as a string) to look for when we are retrieving the proto file from a contract\n */\nexport const MASSA_PROTOFILE_KEY = 'protoMassa';\n/**\n * The separator used to split the proto file content into separate proto files\n */\nexport const PROTO_FILE_SEPARATOR = '|||||';\n/**\n * Smart Contracts Client object enables smart contract deployment, calls and streaming of events.\n */\nexport class SmartContractsClient extends BaseClient {\n  publicApiClient;\n  walletClient;\n  /**\n   * Constructor for {@link SmartContractsClient} objects.\n   */\n  constructor(clientConfig, publicApiClient, walletClient) {\n    super(clientConfig);\n    this.publicApiClient = publicApiClient;\n    this.walletClient = walletClient;\n    // bind class methods\n    this.deploySmartContract = this.deploySmartContract.bind(this);\n    this.getFilteredScOutputEvents = this.getFilteredScOutputEvents.bind(this);\n    this.executeReadOnlySmartContract = this.executeReadOnlySmartContract.bind(this);\n    this.awaitRequiredOperationStatus = this.awaitRequiredOperationStatus.bind(this);\n    this.getOperationStatus = this.getOperationStatus.bind(this);\n    this.callSmartContract = this.callSmartContract.bind(this);\n    this.readSmartContract = this.readSmartContract.bind(this);\n    this.getContractBalance = this.getContractBalance.bind(this);\n  }\n  /**\n   * Deploy a smart contract on th massa blockchain by creating and sending\n   * an operation containing byte code.\n   *\n   * @remarks\n   * If no executor is provided, the default wallet account from the provided {@link WalletClient}\n   * will be used.\n   *\n   * @param contractData - The deployment contract data.\n   * @param executor - The account to use for the deployment.\n   *\n   * @returns A promise that resolves to the operation ID of the deployment operation.\n   */\n  async deploySmartContract(contractData, executor) {\n    const sender = executor || this.walletClient.getBaseAccount();\n    if (!sender) {\n      throw new Error(`No tx sender available`);\n    }\n    return await sender.deploySmartContract(contractData);\n  }\n  /**\n   * Calls a smart contract method.\n   *\n   * @remarks\n   * If no executor is provided, the default wallet account will be used.\n   *\n   * @param callData -  The data required for the smart contract call.\n   * @param executor - The account that will execute the call (default: the default\n   * wallet account from {@link WalletClient}).\n   *\n   * @returns A promise that resolves to the operation ID of the call operation as a string.\n   */\n  async callSmartContract(callData, executor) {\n    const sender = executor || this.walletClient.getBaseAccount();\n    if (!sender) {\n      throw new Error(`No tx sender available`);\n    }\n    return await sender.callSmartContract(callData);\n  }\n  /**\n   * Execute a dry run Smart contract call and returns some data regarding its execution\n   * such as the changes of in the states that would have happen if the transaction was really executed on chain.\n   *\n   * @param readData - The data required for the a read operation of a smart contract.\n   *\n   * @returns A promise that resolves to an object which represents the result of the operation and contains data about its execution.\n   */\n  async readSmartContract(readData) {\n    // check the max. allowed gas\n    if (readData.maxGas > MAX_READ_BLOCK_GAS) {\n      throw new Error(`The gas submitted ${readData.maxGas.toString()} exceeds the max. allowed block gas of ${MAX_READ_BLOCK_GAS.toString()}`);\n    }\n    // request data\n    let baseAccountSignerAddress = null;\n    if (this.walletClient.getBaseAccount()) {\n      baseAccountSignerAddress = this.walletClient.getBaseAccount().address();\n    }\n    const data = {\n      max_gas: Number(readData.maxGas),\n      target_address: readData.targetAddress,\n      target_function: readData.targetFunction,\n      parameter: readData.parameter,\n      caller_address: readData.callerAddress || baseAccountSignerAddress\n    };\n    // returns operation ids\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.EXECUTE_READ_ONLY_CALL;\n    let jsonRpcCallResult = [];\n    if (this.clientConfig.retryStrategyOn) {\n      jsonRpcCallResult = await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[data]]]);\n    } else {\n      jsonRpcCallResult = await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[data]]);\n    }\n    if (jsonRpcCallResult.length <= 0) {\n      throw new Error(`Read operation bad response. No results array in json rpc response. Inspect smart contract`);\n    }\n    if (jsonRpcCallResult[0].result.Error) {\n      throw new Error(jsonRpcCallResult[0].result.Error);\n    }\n    return {\n      returnValue: new Uint8Array(jsonRpcCallResult[0].result.Ok),\n      info: jsonRpcCallResult[0]\n    };\n  }\n  /**\n   * Returns the balance of the smart contract.\n   *\n   * @param address - The address of the smart contract.\n   *\n   * @returns A promise that resolves to the balance of the smart contract.\n   */\n  async getContractBalance(address) {\n    const addresses = await this.publicApiClient.getAddresses([address]);\n    if (addresses.length === 0) return null;\n    const addressInfo = addresses.at(0);\n    return {\n      candidate: fromMAS(addressInfo.candidate_balance),\n      final: fromMAS(addressInfo.final_balance)\n    };\n  }\n  /**\n   * Get filtered smart contract output events.\n   *\n   * @param eventFilterData - The filter data for the events.\n   *\n   * @returns A promise that resolves to an array of IEvent objects containing the filtered events.\n   */\n  async getFilteredScOutputEvents(eventFilterData) {\n    const data = {\n      start: eventFilterData.start,\n      end: eventFilterData.end,\n      emitter_address: eventFilterData.emitter_address,\n      original_caller_address: eventFilterData.original_caller_address,\n      original_operation_id: eventFilterData.original_operation_id,\n      is_final: eventFilterData.is_final\n    };\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_FILTERED_SC_OUTPUT_EVENT;\n    // returns filtered events\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [data]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [data]);\n    }\n  }\n  /**\n   * Send a read-only smart contract execution request.\n   *\n   * @remarks\n   * This method is used to dry-run a smart contract execution and get the changes of the states that would\n   * have happen if the transaction was really executed on chain.\n   * This operation does not modify the blockchain state.\n   *\n   * @param contractData - The data required for the operation.\n   *\n   * @returns A promise which resolves to an object containing data about the operation.\n   *\n   * @throws\n   * - If the contract binary data is missing.\n   * - If the contract contract address is missing.\n   * - If the result is empty.\n   * - If the result contains an error.\n   */\n  async executeReadOnlySmartContract(contractData) {\n    if (!contractData.contractDataBinary) {\n      throw new Error(`Expected non-null contract bytecode, but received null.`);\n    }\n    if (!contractData.address) {\n      throw new Error(`Expected contract address, but received null.`);\n    }\n    const data = {\n      max_gas: Number(contractData.maxGas),\n      bytecode: Array.from(contractData.contractDataBinary),\n      address: contractData.address\n    };\n    let jsonRpcCallResult = [];\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.EXECUTE_READ_ONLY_BYTECODE;\n    if (this.clientConfig.retryStrategyOn) {\n      jsonRpcCallResult = await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [[data]]]);\n    } else {\n      jsonRpcCallResult = await this.sendJsonRPCRequest(jsonRpcRequestMethod, [[data]]);\n    }\n    if (jsonRpcCallResult.length <= 0) {\n      throw new Error(`Read operation bad response. No results array in json rpc response. Inspect smart contract`);\n    }\n    if (jsonRpcCallResult[0].result.Error) {\n      throw new Error('Execute read-only smart contract error', {\n        cause: jsonRpcCallResult[0].result.Error\n      });\n    }\n    return {\n      returnValue: jsonRpcCallResult[0].result.Ok,\n      info: jsonRpcCallResult[0]\n    };\n  }\n  /**\n   * Get the status of a specific operation.\n   *\n   * @param opId - The operation id.\n   *\n   * @returns A promise that resolves to the status of the operation.\n   */\n  async getOperationStatus(opId) {\n    const operationData = await this.publicApiClient.getOperations([opId]);\n    if (!operationData || operationData.length === 0) return EOperationStatus.NOT_FOUND;\n    const opData = operationData[0];\n    if (opData.is_operation_final) {\n      return EOperationStatus.FINAL;\n    }\n    if (opData.in_blocks.length > 0) {\n      return EOperationStatus.INCLUDED_PENDING;\n    }\n    if (opData.in_pool) {\n      return EOperationStatus.AWAITING_INCLUSION;\n    }\n    return EOperationStatus.INCONSISTENT;\n  }\n  /**\n   * Get the status of a specific operation and wait until it reaches the required status.\n   *\n   * @param opId - The required operation id.\n   * @param requiredStatus - The required status.\n   *\n   * @returns A promise that resolves to the status of the operation.\n   */\n  async awaitRequiredOperationStatus(opId, requiredStatus) {\n    let errCounter = 0;\n    let pendingCounter = 0;\n    while (true) {\n      let status = EOperationStatus.NOT_FOUND;\n      try {\n        status = await this.getOperationStatus(opId);\n      } catch (ex) {\n        if (++errCounter > 100) {\n          const msg = `Failed to retrieve the tx status after 100 failed attempts for operation id: ${opId}.`;\n          console.error(msg, ex);\n          throw ex;\n        }\n        await wait(TX_POLL_INTERVAL_MS);\n      }\n      if (status == requiredStatus) {\n        return status;\n      }\n      if (++pendingCounter > 1000) {\n        const msg = `Getting the tx status for operation Id ${opId} took too long to conclude. We gave up after ${TX_POLL_INTERVAL_MS * TX_STATUS_CHECK_RETRY_COUNT}ms.`;\n        console.warn(msg);\n        throw new Error(msg);\n      }\n      await wait(TX_POLL_INTERVAL_MS);\n    }\n  }\n}","map":{"version":3,"names":["EOperationStatus","JSON_RPC_REQUEST_METHOD","fromMAS","trySafeExecute","wait","BaseClient","MAX_READ_BLOCK_GAS","BigInt","TX_POLL_INTERVAL_MS","TX_STATUS_CHECK_RETRY_COUNT","MASSA_PROTOFILE_KEY","PROTO_FILE_SEPARATOR","SmartContractsClient","publicApiClient","walletClient","constructor","clientConfig","deploySmartContract","bind","getFilteredScOutputEvents","executeReadOnlySmartContract","awaitRequiredOperationStatus","getOperationStatus","callSmartContract","readSmartContract","getContractBalance","contractData","executor","sender","getBaseAccount","Error","callData","readData","maxGas","toString","baseAccountSignerAddress","address","data","max_gas","Number","target_address","targetAddress","target_function","targetFunction","parameter","caller_address","callerAddress","jsonRpcRequestMethod","EXECUTE_READ_ONLY_CALL","jsonRpcCallResult","retryStrategyOn","sendJsonRPCRequest","length","result","returnValue","Uint8Array","Ok","info","addresses","getAddresses","addressInfo","at","candidate","candidate_balance","final","final_balance","eventFilterData","start","end","emitter_address","original_caller_address","original_operation_id","is_final","GET_FILTERED_SC_OUTPUT_EVENT","contractDataBinary","bytecode","Array","from","EXECUTE_READ_ONLY_BYTECODE","cause","opId","operationData","getOperations","NOT_FOUND","opData","is_operation_final","FINAL","in_blocks","INCLUDED_PENDING","in_pool","AWAITING_INCLUSION","INCONSISTENT","requiredStatus","errCounter","pendingCounter","status","ex","msg","console","error","warn"],"sources":["../../../src/web3/SmartContractsClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}