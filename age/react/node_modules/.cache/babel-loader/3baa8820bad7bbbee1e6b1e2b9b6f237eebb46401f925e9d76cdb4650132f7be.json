{"ast":null,"code":"import { BaseClient } from './BaseClient';\nimport { base58Decode, base58Encode, varintEncode, hashBlake3 } from '../utils/Xbqcrypto';\nimport { JSON_RPC_REQUEST_METHOD } from '../interfaces/JsonRpcMethods';\nimport { trySafeExecute } from '../utils/retryExecuteFunction';\nimport * as ed from '@noble/ed25519';\nimport { fromMAS } from '../utils/converters';\nimport { Address, SecretKey, PublicKey } from '../utils/keyAndAddresses';\nimport { Web3Account } from './accounts/Web3Account';\nconst SECRET_KEY_PREFIX = 'S';\nconst VERSION_NUMBER = 0;\nconst MAX_WALLET_ACCOUNTS = 256;\n/**\n * A client class for interacting with wallets, which can seamlessly work with WebExtensions.\n *\n * @remarks\n * The WalletClient manages multiple accounts and handles operations such as transaction signing,\n * fetching account information, and interacting with the blockchain. It extends the BaseClient\n * class and implements the IWalletClient interface.\n */\nexport class WalletClient extends BaseClient {\n  publicApiClient;\n  wallet = [];\n  baseAccount;\n  /**\n   * Constructor of the {@link WalletClient} class.\n   *\n   * @param clientConfig - Configuration parameters for the client.\n   * @param publicApiClient - A {@link PublicApiClient} instance used for making API calls.\n   * @param baseAccount - (Optional) An {@link IAccount} to set as the base account for the wallet.\n   */\n  constructor(clientConfig, publicApiClient, baseAccount) {\n    super(clientConfig);\n    this.publicApiClient = publicApiClient;\n    if (baseAccount) {\n      this.baseAccount = baseAccount;\n    }\n    // ========== bind wallet methods ========= //\n    // wallet methods\n    this.cleanWallet = this.cleanWallet.bind(this);\n    this.getWalletAccounts = this.getWalletAccounts.bind(this);\n    this.getWalletAccountByAddress = this.getWalletAccountByAddress.bind(this);\n    this.addSecretKeysToWallet = this.addSecretKeysToWallet.bind(this);\n    this.addAccountsToWallet = this.addAccountsToWallet.bind(this);\n    this.removeAddressesFromWallet = this.removeAddressesFromWallet.bind(this);\n    this.walletInfo = this.walletInfo.bind(this);\n    this.signMessage = this.signMessage.bind(this);\n    this.getWalletAddressesInfo = this.getWalletAddressesInfo.bind(this);\n    this.setBaseAccount = this.setBaseAccount.bind(this);\n    this.getBaseAccount = this.getBaseAccount.bind(this);\n    this.sendTransaction = this.sendTransaction.bind(this);\n    this.sellRolls = this.sellRolls.bind(this);\n    this.buyRolls = this.buyRolls.bind(this);\n    this.getAccountBalance = this.getAccountBalance.bind(this);\n  }\n  /**\n   * Sets a provided account as the default (base) account for the wallet.\n   *\n   * @param baseAccount - An {@link IAccount} to be set as the base account.\n   *\n   * @returns A Promise that resolves to `void` when the base account has been set successfully.\n   */\n  async setBaseAccount(baseAccount) {\n    if (!baseAccount.address()) {\n      throw new Error('Invalid base account address');\n    }\n    await baseAccount.verify();\n    this.baseAccount = baseAccount;\n  }\n  /**\n   * Retrieves the default (base) account of the wallet.\n   *\n   * @returns The default {@link IAccount} of the wallet. If no default account is set, it returns `null`.\n   */\n  getBaseAccount() {\n    return this.baseAccount;\n  }\n  /**\n   * Retrieves all accounts stored in the wallet.\n   *\n   * @returns An array of {@link IAccount} objects.\n   */\n  getWalletAccounts() {\n    return this.wallet;\n  }\n  /**\n   * Removes all accounts from the wallet.\n   */\n  cleanWallet() {\n    this.wallet.length = 0;\n    this.baseAccount = null;\n  }\n  /**\n   * Retrieves a wallet account based on its address.\n   *\n   * @param address - The address of the account to retrieve.\n   *\n   * @returns The {@link IAccount} associated with the provided address\n   * or `undefined` if no account with the given address is found in the wallet.\n   */\n  getWalletAccountByAddress(address) {\n    return this.wallet.find(w => w.address.toLowerCase() === address.toLowerCase()); // ignore case for flexibility\n  }\n  /**\n   * Adds a set of private keys to the wallet.\n   *\n   * @param secretKeys - An array of base58 encoded private keys to be added to the wallet.\n   *\n   * @throws if the number of private keys exceeds the maximum limit.\n   *\n   * @returns A Promise that resolves to an array of {@link IAccount} objects.\n   */\n  async addSecretKeysToWallet(secretKeys) {\n    if (secretKeys.length > MAX_WALLET_ACCOUNTS) {\n      throw new Error(`Maximum number of allowed wallet accounts exceeded ${MAX_WALLET_ACCOUNTS}. Submitted private keys: ${secretKeys.length}`);\n    }\n    const accountsToCreate = [];\n    const uniqueSecretKeys = secretKeys.filter((value, index, self) => self.indexOf(value) === index);\n    for (const secretKeyBase58Encoded of uniqueSecretKeys) {\n      const secretKey = new SecretKey(secretKeyBase58Encoded);\n      const publicKey = await secretKey.getPublicKey();\n      const address = new Address(publicKey);\n      if (!this.getWalletAccountByAddress(address.base58Encode)) {\n        accountsToCreate.push({\n          secretKey: secretKeyBase58Encoded,\n          publicKey: publicKey.base58Encode,\n          address: address.base58Encode\n        });\n      }\n    }\n    this.wallet.push(...accountsToCreate);\n    return accountsToCreate;\n  }\n  /**\n   * Adds a set of accounts to the wallet.\n   *\n   * @privateRemarks\n   * Each account must have a base58 encoded random entropy or private key.\n   *\n   * @param accounts - An array of accounts ({@link IAccount} objects) to be added to the wallet.\n   *\n   * @throws\n   * - If the number of accounts exceeds the {@link MAX_WALLET_ACCOUNTS} limit\n   * - If an account is missing a private key\n   * - If a submitted public key doesn't correspond to the associated private key\n   * - If an account address doesn't correspond to the private key-derived address\n   *\n   * @returns A Promise that resolves to an array of {@link IAccount} objects.\n   */\n  async addAccountsToWallet(accounts) {\n    if (accounts.length > MAX_WALLET_ACCOUNTS) {\n      throw new Error(`Maximum number of allowed wallet accounts exceeded ${MAX_WALLET_ACCOUNTS}. Submitted accounts: ${accounts.length}`);\n    }\n    const accountsAdded = [];\n    for (const account of accounts) {\n      if (!account.secretKey) {\n        throw new Error('Missing account private key');\n      }\n      // Create the secret key object\n      const secretKeyBase58Encoded = account.secretKey;\n      const secretKey = new SecretKey(secretKeyBase58Encoded);\n      // create the public key object\n      const publicKey = await secretKey.getPublicKey();\n      if (account.publicKey && account.publicKey !== publicKey.base58Encode) {\n        throw new Error('Public key does not correspond the the private key submitted');\n      }\n      // get wallet account address\n      const address = new Address(publicKey);\n      if (account.address && account.address !== address.base58Encode) {\n        throw new Error('Account address not correspond the the address submitted');\n      }\n      if (!this.getWalletAccountByAddress(address.base58Encode)) {\n        accountsAdded.push({\n          address: address.base58Encode,\n          secretKey: secretKeyBase58Encoded,\n          publicKey: publicKey.base58Encode\n        });\n      }\n    }\n    this.wallet.push(...accountsAdded);\n    return accountsAdded;\n  }\n  /**\n   * Remove a list of addresses from the wallet.\n   *\n   * @param addresses - An array of addresses to remove from the wallet.\n   */\n  removeAddressesFromWallet(addresses) {\n    for (const address of addresses) {\n      const index = this.wallet.findIndex(w => w.address === address);\n      if (index > -1) {\n        this.wallet.splice(index, 1);\n      }\n    }\n  }\n  /**\n   * Retrieves detailed information about the wallet.\n   *\n   * @throws Will throw an error if the number of retrieved wallets does not match the number of addresses in the wallet.\n   *\n   * @returns A Promise that resolves to an array of {@link IFullAddressInfo} objects.\n   */\n  async walletInfo() {\n    if (this.wallet.length === 0) {\n      return [];\n    }\n    const addresses = this.wallet.map(account => account.address);\n    const addressesInfo = await this.getWalletAddressesInfo(addresses);\n    if (addressesInfo.length !== this.wallet.length) {\n      throw new Error(`Requested wallets not fully retrieved. Got ${addressesInfo.length}, expected: ${this.wallet.length}`);\n    }\n    return addressesInfo.map((info, index) => {\n      return {\n        publicKey: this.wallet[index].publicKey,\n        secretKey: this.wallet[index].secretKey,\n        ...info\n      };\n    });\n  }\n  /**\n   * Generates a new wallet account.\n   * @param version_number - The version number of the secret key to be generated, to create a new account.\n   *\n   * @returns A Promise that resolves to an {@link IAccount} object, which represents the newly created account.\n   */\n  static async walletGenerateNewAccount() {\n    // generate private key\n    const secretKeyArray = ed.utils.randomPrivateKey();\n    const version = Buffer.from(varintEncode(VERSION_NUMBER));\n    const secretKeyBase58Encoded = SECRET_KEY_PREFIX + base58Encode(Buffer.concat([version, secretKeyArray]));\n    const secretKey = new SecretKey(secretKeyBase58Encoded);\n    // get public key\n    const publicKey = await secretKey.getPublicKey();\n    // get wallet account address\n    const address = new Address(publicKey);\n    return {\n      address: address.base58Encode,\n      secretKey: secretKeyBase58Encoded,\n      publicKey: publicKey.base58Encode\n    };\n  }\n  /**\n   * Generates an account from a given private key.\n   *\n   * @param secretKeyBase58 - A base58 encoded private key from which the account will be generated.\n   *\n   * @returns A Promise that resolves to an {@link IAccount} object.\n   */\n  static async getAccountFromSecretKey(secretKeyBase58) {\n    // get private key\n    const secretKey = new SecretKey(secretKeyBase58);\n    // get public key\n    const publicKey = await secretKey.getPublicKey();\n    // get wallet account address\n    const address = new Address(publicKey);\n    return {\n      address: address.base58Encode,\n      secretKey: secretKeyBase58,\n      publicKey: publicKey.base58Encode\n    };\n  }\n  /**\n   * Signs a random message data using a wallet account that has already been added.\n   *\n   * @param data - The data to be signed.\n   * @param accountSignerAddress - The address of the wallet account that will sign the data.\n   *\n   * @throws Will throw an error if the account associated with the provided address is not found in the wallet.\n   *\n   * @returns A Promise that resolves to an {@link ISignature} object representing the signature.\n   */\n  async signMessage(data, accountSignerAddress) {\n    let signerAccount = this.getWalletAccountByAddress(accountSignerAddress);\n    let account;\n    if (!signerAccount) {\n      if (this.baseAccount.address() === accountSignerAddress) {\n        account = this.baseAccount;\n      } else {\n        throw new Error(`No signer account ${accountSignerAddress} found in wallet`);\n      }\n    } else {\n      account = new Web3Account(signerAccount, this.publicApiClient);\n    }\n    return account.sign(Buffer.from(data));\n  }\n  /**\n   * Retrieves information about specified wallet addresses.\n   *\n   * @param addresses - An array of wallet addresses for which information is to be retrieved.\n   *\n   * @returns A Promise that resolves to an array of {@link IAddressInfo} objects, each containing\n   * information about a corresponding wallet address.\n   */\n  async getWalletAddressesInfo(addresses) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_ADDRESSES;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [addresses]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [addresses]);\n    }\n  }\n  /**\n   * Signs the provided data with the given address.\n   *\n   * @remarks\n   * The address must be present in the wallet.\n   *\n   * @param data - The data to be signed.\n   * @param signer - The account that will be used to sign the data.\n   *\n   * @throws\n   * - if no private key is available for signing the message.\n   * - if no public key is available for verifying the signed message.\n   * - if the length of the generated signature is not valid.\n   * - if the signature could not be verified with the public key.\n   *\n   * @returns A Promise that resolves to an {@link ISignature} object representing the signature.\n   */\n  static async walletSignMessage(data, signer) {\n    return signer.sign(Buffer.from(data));\n  }\n  /**\n   * Verify a signature.\n   *\n   * @param data - The signed data to verify.\n   * @param signature - The signature to verify.\n   * @param signerPubKey - The public key of the signer.\n   *\n   * @returns A Promise that resolves to `true` if the signature is valid, `false` otherwise.\n   */\n  async verifySignature(data, signature, signerPubKey) {\n    // setup the public key.\n    const publicKey = PublicKey.fromString(signerPubKey);\n    // setup the message digest.\n    const bytesCompact = Buffer.from(data);\n    const messageDigest = hashBlake3(bytesCompact);\n    try {\n      // setup the signature.\n      const versionAndSignatureBytes = base58Decode(signature.base58Encoded);\n      // removing the version byte\n      const signatureBytes = versionAndSignatureBytes.slice(1);\n      // check sig length\n      if (signatureBytes.length != 64) {\n        throw new Error(`Invalid signature length. Expected 64, got ${signatureBytes.length}`);\n      }\n      // verify signature.\n      const isVerified = await ed.verify(signatureBytes, messageDigest, publicKey.bytes);\n      return isVerified;\n    } catch (err) {\n      console.error('Failed to verify signature:', err);\n      return false;\n    }\n  }\n  /**\n   * Retrieves the balance of an account.\n   *\n   * @param address - The address to get the balance from.\n   *\n   * @returns A Promise that resolves to an {@link IBalance}. If the address is not found,\n   * it returns `null`.\n   */\n  async getAccountBalance(address) {\n    try {\n      const addresses = await this.publicApiClient.getAddresses([address]);\n      if (addresses.length === 0) return null;\n      const addressInfo = addresses.at(0);\n      return {\n        candidate: fromMAS(addressInfo.candidate_balance),\n        final: fromMAS(addressInfo.final_balance)\n      };\n    } catch (err) {\n      console.error('Failed to get account balance:', err);\n      return null;\n    }\n  }\n  /**\n   * Sends native MAS from a wallet address to another.\n   *\n   * @param txData - The transaction data.\n   * @param executor - (Optional) The account that will execute the transaction. If not\n   * provided, the base account is used.\n   *\n   * @throws if no sender account is available for the transaction.\n   *\n   * @returns a promise that resolves to an array of operations ids.\n   */\n  async sendTransaction(txData, executor) {\n    // check sender account\n    const sender = executor || this.getBaseAccount();\n    if (!sender) {\n      throw new Error('No tx sender available');\n    }\n    return [await sender.sendTransaction(txData)];\n  }\n  /**\n   * Buy rolls with wallet address.\n   *\n   * @param txData - The transaction data\n   * @param executor - (Optional) The account that will execute the transaction.\n   * If not specified, the base account is used by default.\n   *\n   * @throws if no sender account is available for the transaction.\n   *\n   * @returns a promise that resolves to an array of operations ids.\n   */\n  async buyRolls(txData, executor) {\n    // check sender account\n    const sender = executor || this.getBaseAccount();\n    if (!sender) {\n      throw new Error('No tx sender available');\n    }\n    return [await sender.buyRolls(txData)];\n  }\n  /**\n   * Sell rolls with wallet address.\n   *\n   * @param txData - The transaction data.\n   * @param executor - (Optional) The account that will execute the transaction.\n   * If not specified, the base account is used by default.\n   *\n   * @throws if no sender account is available for the transaction.\n   *\n   * @returns a promise that resolves to an array of operations ids.\n   */\n  async sellRolls(txData, executor) {\n    // check sender account\n    const sender = executor || this.getBaseAccount();\n    if (!sender) {\n      throw new Error('No tx sender available');\n    }\n    return [await sender.sellRolls(txData)];\n  }\n}","map":{"version":3,"names":["BaseClient","base58Decode","base58Encode","varintEncode","hashBlake3","JSON_RPC_REQUEST_METHOD","trySafeExecute","ed","fromMAS","Address","SecretKey","PublicKey","Web3Account","SECRET_KEY_PREFIX","VERSION_NUMBER","MAX_WALLET_ACCOUNTS","WalletClient","publicApiClient","wallet","baseAccount","constructor","clientConfig","cleanWallet","bind","getWalletAccounts","getWalletAccountByAddress","addSecretKeysToWallet","addAccountsToWallet","removeAddressesFromWallet","walletInfo","signMessage","getWalletAddressesInfo","setBaseAccount","getBaseAccount","sendTransaction","sellRolls","buyRolls","getAccountBalance","address","Error","verify","length","find","w","toLowerCase","secretKeys","accountsToCreate","uniqueSecretKeys","filter","value","index","self","indexOf","secretKeyBase58Encoded","secretKey","publicKey","getPublicKey","push","accounts","accountsAdded","account","addresses","findIndex","splice","map","addressesInfo","info","walletGenerateNewAccount","secretKeyArray","utils","randomPrivateKey","version","Buffer","from","concat","getAccountFromSecretKey","secretKeyBase58","data","accountSignerAddress","signerAccount","sign","jsonRpcRequestMethod","GET_ADDRESSES","retryStrategyOn","sendJsonRPCRequest","walletSignMessage","signer","verifySignature","signature","signerPubKey","fromString","bytesCompact","messageDigest","versionAndSignatureBytes","base58Encoded","signatureBytes","slice","isVerified","bytes","err","console","error","getAddresses","addressInfo","at","candidate","candidate_balance","final","final_balance","txData","executor","sender"],"sources":["../../../src/web3/WalletClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}