{"ast":null,"code":"import { base58Decode } from './Xbqcrypto';\n/**\n * Prefixes for secret and public keys.\n * Prefixes are used as a convention to differentiate one key from another.\n */\nconst SECRET_KEY_PREFIX = 'S';\nconst PUBLIC_KEY_PREFIX = 'P';\n/**\n * Get the byte representation of a given secret key.\n *\n * @param secretKey - The secret key to get the bytes from.\n *\n * @throws if the secret key is not valid.\n *\n * @returns a Uint8Array containing the bytes of the secret key.\n */\nexport function getBytesSecretKey(secretKey) {\n  if (!(secretKey[0] == SECRET_KEY_PREFIX)) {\n    throw new Error(`Invalid secret key prefix: \"${secretKey[0]}\". The secret key should start with \"${SECRET_KEY_PREFIX}\". Please verify your secret key and try again.`);\n  }\n  const secretKeyBase58Decoded = base58Decode(secretKey.slice(1)); // Slice off the prefix\n  return secretKeyBase58Decoded;\n}\n/**\n * Retrieves the byte representation of a given public key.\n *\n * @param publicKey - The public key to obtain the bytes from.\n *\n * @throws If the public key has an incorrect {@link PUBLIC_KEY_PREFIX}.\n *\n * @returns A Uint8Array containing the bytes of the public key.\n */\nexport function getBytesPublicKey(publicKey) {\n  if (!(publicKey[0] == PUBLIC_KEY_PREFIX)) {\n    throw new Error(`Invalid public key prefix: ${publicKey[0]} should be ${PUBLIC_KEY_PREFIX}`);\n  }\n  const publicKeyBase58Decoded = base58Decode(publicKey.slice(1));\n  return publicKeyBase58Decoded;\n}","map":{"version":3,"names":["base58Decode","SECRET_KEY_PREFIX","PUBLIC_KEY_PREFIX","getBytesSecretKey","secretKey","Error","secretKeyBase58Decoded","slice","getBytesPublicKey","publicKey","publicKeyBase58Decoded"],"sources":["../../../src/utils/bytes.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,YAAY,QAAQ,aAAa;AAE1C;;;;AAIA,MAAMC,iBAAiB,GAAG,GAAG;AAC7B,MAAMC,iBAAiB,GAAG,GAAG;AAE7B;;;;;;;;;AASA,OAAM,SAAUC,iBAAiBA,CAACC,SAAiB;EACjD,IAAI,EAAEA,SAAS,CAAC,CAAC,CAAC,IAAIH,iBAAiB,CAAC,EAAE;IACxC,MAAM,IAAII,KAAK,CACb,+BAA+BD,SAAS,CAAC,CAAC,CAAC,wCAAwCH,iBAAiB,iDAAiD,CACtJ;;EAEH,MAAMK,sBAAsB,GAAWN,YAAY,CAACI,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzE,OAAOD,sBAAsB;AAC/B;AAEA;;;;;;;;;AASA,OAAM,SAAUE,iBAAiBA,CAACC,SAAiB;EACjD,IAAI,EAAEA,SAAS,CAAC,CAAC,CAAC,IAAIP,iBAAiB,CAAC,EAAE;IACxC,MAAM,IAAIG,KAAK,CACb,8BAA8BI,SAAS,CAAC,CAAC,CAAC,cAAcP,iBAAiB,EAAE,CAC5E;;EAEH,MAAMQ,sBAAsB,GAAWV,YAAY,CACjDS,SAAS,CAACF,KAAK,CAAC,CAAC,CAAC,CACnB;EACD,OAAOG,sBAAsB;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}