{"ast":null,"code":"/**\n * This module aim's to provide number variable types serialization and conversion helper functions.\n */\n/**\n * The maximum value for an unsigned 8-bit integer (u8).\n */\nconst U8_MAX = 0xff;\n/**\n * The maximum value for an unsigned 32-bit integer (u32).\n */\nconst U32_MAX = 0xffffffff;\n/**\n * The maximum value for an unsigned 64-bit integer (u64) represented as a BigInt.\n */\nconst U64_MAX = BigInt('0xffffffffffffffff');\n/**\n * The maximum value for an unsigned 128-bit integer (u128) represented as a BigInt.\n */\nconst U128_MAX = BigInt('0xffffffffffffffffffffffffffffffff');\n/**\n * The maximum value for an unsigned 256-bit integer (u256) represented as a BigInt.\n */\nconst U256_MAX = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The minimum value for a signed 32-bit integer (i32).\n */\nconst I32_MIN = -0x80000000;\n/**\n * The maximum value for a signed 32-bit integer (i32).\n */\nconst I32_MAX = 0x7fffffff;\n/**\n * The minimum value for a signed 64-bit integer (i64) represented as a BigInt.\n */\nconst I64_MIN = BigInt('-9223372036854775808');\n/**\n * The maximum value for a signed 64-bit integer (i64) represented as a BigInt.\n */\nconst I64_MAX = BigInt('0x7fffffffffffffff');\n/**\n * Converts an unsigned 8-bit integer (u8) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @throws Will throw an error if the input value is not within the valid u8 range (0 to 255)\n *\n * @returns A Uint8Array containing the serialized u8 value\n *\n */\nexport function u8toByte(val) {\n  if (val < 0 || val > U8_MAX) {\n    throw new Error(`Unable to serialize invalid Uint8 value ${val}`);\n  }\n  return new Uint8Array([val]);\n}\n/**\n * Converts a Uint8Array into an unsigned 8-bit integer (u8).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u8 value (default: 0)\n *\n * @returns The deserialized u8 value\n *\n */\nexport function byteToU8(arr, offset = 0) {\n  return arr[offset];\n}\n/**\n * Converts an unsigned 32-bit integer (u32) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @throws Will throw an error if the input value is not within the valid u32 range (0 to 4,294,967,295)\n *\n * @returns A Uint8Array containing the serialized u32 value\n *\n */\nexport function u32ToBytes(val) {\n  if (val < 0 || val > U32_MAX) {\n    throw new Error(`Unable to serialize invalid Uint32 value ${val}`);\n  }\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  view.setUint32(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n/**\n * Converts a Uint8Array into an unsigned 32-bit integer (u32).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u32 value (default: 0)\n *\n * @returns The deserialized u32 value\n *\n */\nexport function bytesToU32(arr, offset = 0) {\n  const view = new DataView(arr.buffer);\n  return view.getUint32(offset, true);\n}\n/**\n * Converts an unsigned 64-bit integer (u64) BigInt into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @throws Will throw an error if the input value is not within the valid u64 range (0 to 18,446,744,073,709,551,615)\n *\n * @returns A Uint8Array containing the serialized u64 BigInt value\n *\n */\nexport function u64ToBytes(val) {\n  if (val < 0 || val > U64_MAX) {\n    throw new Error(`Unable to serialize invalid Uint64 value ${val}`);\n  }\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  view.setBigUint64(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n/**\n * Converts a Uint8Array into an unsigned 64-bit integer (u64) BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u64 value (default: 0)\n *\n * @returns The deserialized u64 BigInt value\n *\n */\nexport function bytesToU64(arr, offset = 0) {\n  const view = new DataView(arr.buffer);\n  return view.getBigUint64(offset, true);\n}\n/**\n * Converts an unsigned 128-bit integer (u128) BigInt into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @throws Will throw an error if the input value is not within the valid u128 range (0 to 340282366920938463463374607431768211455)\n *\n * @returns A Uint8Array containing the serialized u128 BigInt value\n *\n */\nexport function u128ToBytes(val) {\n  if (val < 0 || val > U128_MAX) {\n    throw new Error(`Unable to serialize invalid Uint128 value ${val}`);\n  }\n  const upper = val >> 64n;\n  const lower = val << 64n >> 64n;\n  const buffer = new ArrayBuffer(16);\n  const view = new DataView(buffer);\n  view.setBigUint64(0, lower, true);\n  view.setBigUint64(8, upper, true);\n  return new Uint8Array(view.buffer);\n}\n/**\n * Converts a Uint8Array into an unsigned 128-bit integer (u128) BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u128 value (default: 0)\n *\n * @returns The deserialized u128BigInt value\n *\n */\nexport function bytesToU128(arr, offset = 0) {\n  const view = new DataView(arr.buffer, offset);\n  const lower = view.getBigUint64(0, true); // Lower 64 bits\n  const upper = view.getBigUint64(8, true); // Upper 64 bits\n  return upper << 64n | lower;\n}\n/**\n * Converts an unsigned 256-bit integer (u256) BigInt into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @throws Will throw an error if the input value is not within the valid u256 range (0 to 340282366920938463463374607431768211455)\n *\n * @returns A Uint8Array containing the serialized u256 BigInt value\n *\n */\nexport function u256ToBytes(val) {\n  if (val < 0 || val > U256_MAX) {\n    throw new Error(`Unable to serialize invalid Uint256 value ${val}`);\n  }\n  const p0 = val & U64_MAX;\n  const p1 = val >> 64n & U64_MAX;\n  const p2 = val >> 128n & U64_MAX;\n  const p3 = val >> 192n & U64_MAX;\n  const buffer = new ArrayBuffer(32);\n  const view = new DataView(buffer);\n  view.setBigUint64(0, p0, true);\n  view.setBigUint64(8, p1, true);\n  view.setBigUint64(16, p2, true);\n  view.setBigUint64(24, p3, true);\n  return new Uint8Array(view.buffer);\n}\n/**\n * Converts a Uint8Array into an unsigned 256-bit integer (u256) BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u256 value (default: 0)\n *\n * @returns The deserialized u256BigInt value\n *\n */\nexport function bytesToU256(arr, offset = 0) {\n  const view = new DataView(arr.buffer, offset);\n  const p0 = view.getBigUint64(0, true);\n  const p1 = view.getBigUint64(8, true);\n  const p2 = view.getBigUint64(16, true);\n  const p3 = view.getBigUint64(24, true);\n  return p3 << 192n | p2 << 128n | p1 << 64n | p0;\n}\n/**\n * Converts a signed 32-bit integer (i32) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @throws Will throw an error if the input value is not within the valid i32 range (-2,147,483,648 to 2,147,483,647)\n *\n * @returns A Uint8Array containing the serialized i32 value\n *\n */\nexport function i32ToBytes(val) {\n  if (val < I32_MIN || val > I32_MAX) {\n    throw new Error(`Unable to serialize invalid int32 value ${val}`);\n  }\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  view.setInt32(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n/**\n * Converts a Uint8Array into a signed 32-bit integer (i32).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the i32 value (default: 0)\n *\n * @returns The deserialized i32 value\n *\n */\nexport function bytesToI32(arr, offset = 0) {\n  const view = new DataView(arr.buffer);\n  return view.getInt32(offset, true);\n}\n/**\n * Converts a i64 BigInt in a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @throws Will throw an error if the input value is not within the valid i64 range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)\n *\n * @returns A Uint8Array containing the serialized i64 BigInt value\n *\n */\nexport function i64ToBytes(val) {\n  if (val < I64_MIN || val > I64_MAX) {\n    throw new Error(`Unable to serialize invalid int64 value ${val.toString()}`);\n  }\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  view.setBigInt64(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n/**\n * Converts a Uint8Array into a i64 BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the i64 value (default: 0)\n *\n * @returns The deserialized i64 BigInt value\n *\n */\nexport function bytesToI64(arr, offset = 0) {\n  const view = new DataView(arr.buffer);\n  return view.getBigInt64(offset, true);\n}\n/**\n * Converts a 32-bit floating-point number (f32) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @returns A Uint8Array containing the serialized f32 value\n *\n */\nexport function f32ToBytes(val) {\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  view.setFloat32(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n/**\n * Converts a Uint8Array into a 32-bit floating-point number (f32).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the f32 value (default: 0)\n *\n * @returns The deserialized f32 value\n *\n */\nexport function bytesToF32(arr, offset = 0) {\n  const view = new DataView(arr.buffer);\n  return view.getFloat32(offset, true);\n}\n/**\n * Converts a 64-bit floating-point number (f64) into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @returns A Uint8Array containing the serialized f64 value\n *\n */\nexport function f64ToBytes(val) {\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  view.setFloat64(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n/**\n * Converts a Uint8Array into a f64 BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the f64 value (default: 0)\n *\n * @returns The deserialized f64 value\n *\n */\nexport function bytesToF64(arr, offset = 0) {\n  const view = new DataView(arr.buffer);\n  return view.getFloat64(offset, true);\n}","map":{"version":3,"names":["U8_MAX","U32_MAX","U64_MAX","BigInt","U128_MAX","U256_MAX","I32_MIN","I32_MAX","I64_MIN","I64_MAX","u8toByte","val","Error","Uint8Array","byteToU8","arr","offset","u32ToBytes","buffer","ArrayBuffer","view","DataView","setUint32","bytesToU32","getUint32","u64ToBytes","setBigUint64","bytesToU64","getBigUint64","u128ToBytes","upper","lower","bytesToU128","u256ToBytes","p0","p1","p2","p3","bytesToU256","i32ToBytes","setInt32","bytesToI32","getInt32","i64ToBytes","toString","setBigInt64","bytesToI64","getBigInt64","f32ToBytes","setFloat32","bytesToF32","getFloat32","f64ToBytes","setFloat64","bytesToF64","getFloat64"],"sources":["/Users/jwmdev/Development/github/massa/massa-sc-examples/age/react/node_modules/@massalabs/web3-utils/src/serializers/numbers.ts"],"sourcesContent":["/**\n * This module aim's to provide number variable types serialization and conversion helper functions.\n */\n\n/**\n * The maximum value for an unsigned 8-bit integer (u8).\n */\nconst U8_MAX = 0xff;\n\n/**\n * The maximum value for an unsigned 32-bit integer (u32).\n */\nconst U32_MAX = 0xffffffff;\n\n/**\n * The maximum value for an unsigned 64-bit integer (u64) represented as a BigInt.\n */\nconst U64_MAX = BigInt('0xffffffffffffffff');\n\n/**\n * The maximum value for an unsigned 128-bit integer (u128) represented as a BigInt.\n */\nconst U128_MAX = BigInt('0xffffffffffffffffffffffffffffffff');\n\n/**\n * The maximum value for an unsigned 256-bit integer (u256) represented as a BigInt.\n */\nconst U256_MAX = BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n);\n\n/**\n * The minimum value for a signed 32-bit integer (i32).\n */\nconst I32_MIN = -0x80000000;\n\n/**\n * The maximum value for a signed 32-bit integer (i32).\n */\nconst I32_MAX = 0x7fffffff;\n\n/**\n * The minimum value for a signed 64-bit integer (i64) represented as a BigInt.\n */\nconst I64_MIN = BigInt('-9223372036854775808');\n\n/**\n * The maximum value for a signed 64-bit integer (i64) represented as a BigInt.\n */\nconst I64_MAX = BigInt('0x7fffffffffffffff');\n\n/**\n * Converts an unsigned 8-bit integer (u8) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @throws Will throw an error if the input value is not within the valid u8 range (0 to 255)\n *\n * @returns A Uint8Array containing the serialized u8 value\n *\n */\nexport function u8toByte(val: number): Uint8Array {\n  if (val < 0 || val > U8_MAX) {\n    throw new Error(`Unable to serialize invalid Uint8 value ${val}`);\n  }\n  return new Uint8Array([val]);\n}\n\n/**\n * Converts a Uint8Array into an unsigned 8-bit integer (u8).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u8 value (default: 0)\n *\n * @returns The deserialized u8 value\n *\n */\nexport function byteToU8(arr: Uint8Array, offset = 0): number {\n  return arr[offset];\n}\n\n/**\n * Converts an unsigned 32-bit integer (u32) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @throws Will throw an error if the input value is not within the valid u32 range (0 to 4,294,967,295)\n *\n * @returns A Uint8Array containing the serialized u32 value\n *\n */\nexport function u32ToBytes(val: number): Uint8Array {\n  if (val < 0 || val > U32_MAX) {\n    throw new Error(`Unable to serialize invalid Uint32 value ${val}`);\n  }\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  view.setUint32(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n\n/**\n * Converts a Uint8Array into an unsigned 32-bit integer (u32).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u32 value (default: 0)\n *\n * @returns The deserialized u32 value\n *\n */\nexport function bytesToU32(arr: Uint8Array, offset = 0): number {\n  const view = new DataView(arr.buffer);\n  return view.getUint32(offset, true);\n}\n\n/**\n * Converts an unsigned 64-bit integer (u64) BigInt into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @throws Will throw an error if the input value is not within the valid u64 range (0 to 18,446,744,073,709,551,615)\n *\n * @returns A Uint8Array containing the serialized u64 BigInt value\n *\n */\nexport function u64ToBytes(val: bigint): Uint8Array {\n  if (val < 0 || val > U64_MAX) {\n    throw new Error(`Unable to serialize invalid Uint64 value ${val}`);\n  }\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  view.setBigUint64(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n\n/**\n * Converts a Uint8Array into an unsigned 64-bit integer (u64) BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u64 value (default: 0)\n *\n * @returns The deserialized u64 BigInt value\n *\n */\nexport function bytesToU64(arr: Uint8Array, offset = 0): bigint {\n  const view = new DataView(arr.buffer);\n  return view.getBigUint64(offset, true);\n}\n\n/**\n * Converts an unsigned 128-bit integer (u128) BigInt into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @throws Will throw an error if the input value is not within the valid u128 range (0 to 340282366920938463463374607431768211455)\n *\n * @returns A Uint8Array containing the serialized u128 BigInt value\n *\n */\nexport function u128ToBytes(val: bigint): Uint8Array {\n  if (val < 0 || val > U128_MAX) {\n    throw new Error(`Unable to serialize invalid Uint128 value ${val}`);\n  }\n\n  const upper = val >> 64n;\n  const lower = (val << 64n) >> 64n;\n\n  const buffer = new ArrayBuffer(16);\n  const view = new DataView(buffer);\n\n  view.setBigUint64(0, lower, true);\n  view.setBigUint64(8, upper, true);\n\n  return new Uint8Array(view.buffer);\n}\n\n/**\n * Converts a Uint8Array into an unsigned 128-bit integer (u128) BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u128 value (default: 0)\n *\n * @returns The deserialized u128BigInt value\n *\n */\nexport function bytesToU128(arr: Uint8Array, offset = 0): bigint {\n  const view = new DataView(arr.buffer, offset);\n\n  const lower = view.getBigUint64(0, true); // Lower 64 bits\n  const upper = view.getBigUint64(8, true); // Upper 64 bits\n\n  return (upper << 64n) | lower;\n}\n\n/**\n * Converts an unsigned 256-bit integer (u256) BigInt into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @throws Will throw an error if the input value is not within the valid u256 range (0 to 340282366920938463463374607431768211455)\n *\n * @returns A Uint8Array containing the serialized u256 BigInt value\n *\n */\nexport function u256ToBytes(val: bigint): Uint8Array {\n  if (val < 0 || val > U256_MAX) {\n    throw new Error(`Unable to serialize invalid Uint256 value ${val}`);\n  }\n\n  const p0 = val & U64_MAX;\n  const p1 = (val >> 64n) & U64_MAX;\n  const p2 = (val >> 128n) & U64_MAX;\n  const p3 = (val >> 192n) & U64_MAX;\n\n  const buffer = new ArrayBuffer(32);\n  const view = new DataView(buffer);\n\n  view.setBigUint64(0, p0, true);\n  view.setBigUint64(8, p1, true);\n  view.setBigUint64(16, p2, true);\n  view.setBigUint64(24, p3, true);\n\n  return new Uint8Array(view.buffer);\n}\n\n/**\n * Converts a Uint8Array into an unsigned 256-bit integer (u256) BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the u256 value (default: 0)\n *\n * @returns The deserialized u256BigInt value\n *\n */\nexport function bytesToU256(arr: Uint8Array, offset = 0): bigint {\n  const view = new DataView(arr.buffer, offset);\n\n  const p0 = view.getBigUint64(0, true);\n  const p1 = view.getBigUint64(8, true);\n  const p2 = view.getBigUint64(16, true);\n  const p3 = view.getBigUint64(24, true);\n\n  return (p3 << 192n) | (p2 << 128n) | (p1 << 64n) | p0;\n}\n\n/**\n * Converts a signed 32-bit integer (i32) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @throws Will throw an error if the input value is not within the valid i32 range (-2,147,483,648 to 2,147,483,647)\n *\n * @returns A Uint8Array containing the serialized i32 value\n *\n */\nexport function i32ToBytes(val: number): Uint8Array {\n  if (val < I32_MIN || val > I32_MAX) {\n    throw new Error(`Unable to serialize invalid int32 value ${val}`);\n  }\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  view.setInt32(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n\n/**\n * Converts a Uint8Array into a signed 32-bit integer (i32).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the i32 value (default: 0)\n *\n * @returns The deserialized i32 value\n *\n */\nexport function bytesToI32(arr: Uint8Array, offset = 0): number {\n  const view = new DataView(arr.buffer);\n  return view.getInt32(offset, true);\n}\n\n/**\n * Converts a i64 BigInt in a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @throws Will throw an error if the input value is not within the valid i64 range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)\n *\n * @returns A Uint8Array containing the serialized i64 BigInt value\n *\n */\nexport function i64ToBytes(val: bigint): Uint8Array {\n  if (val < I64_MIN || val > I64_MAX) {\n    throw new Error(\n      `Unable to serialize invalid int64 value ${val.toString()}`,\n    );\n  }\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  view.setBigInt64(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n\n/**\n * Converts a Uint8Array into a i64 BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the i64 value (default: 0)\n *\n * @returns The deserialized i64 BigInt value\n *\n */\nexport function bytesToI64(arr: Uint8Array, offset = 0): bigint {\n  const view = new DataView(arr.buffer);\n  return view.getBigInt64(offset, true);\n}\n\n/**\n * Converts a 32-bit floating-point number (f32) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @returns A Uint8Array containing the serialized f32 value\n *\n */\nexport function f32ToBytes(val: number): Uint8Array {\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  view.setFloat32(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n\n/**\n * Converts a Uint8Array into a 32-bit floating-point number (f32).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the f32 value (default: 0)\n *\n * @returns The deserialized f32 value\n *\n */\nexport function bytesToF32(arr: Uint8Array, offset = 0): number {\n  const view = new DataView(arr.buffer);\n  return view.getFloat32(offset, true);\n}\n\n/**\n * Converts a 64-bit floating-point number (f64) into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @returns A Uint8Array containing the serialized f64 value\n *\n */\nexport function f64ToBytes(val: number): Uint8Array {\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  view.setFloat64(0, val, true);\n  return new Uint8Array(view.buffer);\n}\n\n/**\n * Converts a Uint8Array into a f64 BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the f64 value (default: 0)\n *\n * @returns The deserialized f64 value\n *\n */\nexport function bytesToF64(arr: Uint8Array, offset = 0): number {\n  const view = new DataView(arr.buffer);\n  return view.getFloat64(offset, true);\n}\n"],"mappings":"AAAA;;;AAIA;;;AAGA,MAAMA,MAAM,GAAG,IAAI;AAEnB;;;AAGA,MAAMC,OAAO,GAAG,UAAU;AAE1B;;;AAGA,MAAMC,OAAO,GAAGC,MAAM,CAAC,oBAAoB,CAAC;AAE5C;;;AAGA,MAAMC,QAAQ,GAAGD,MAAM,CAAC,oCAAoC,CAAC;AAE7D;;;AAGA,MAAME,QAAQ,GAAGF,MAAM,CACrB,oEAAoE,CACrE;AAED;;;AAGA,MAAMG,OAAO,GAAG,CAAC,UAAU;AAE3B;;;AAGA,MAAMC,OAAO,GAAG,UAAU;AAE1B;;;AAGA,MAAMC,OAAO,GAAGL,MAAM,CAAC,sBAAsB,CAAC;AAE9C;;;AAGA,MAAMM,OAAO,GAAGN,MAAM,CAAC,oBAAoB,CAAC;AAE5C;;;;;;;;;;AAUA,OAAM,SAAUO,QAAQA,CAACC,GAAW;EAClC,IAAIA,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGX,MAAM,EAAE;IAC3B,MAAM,IAAIY,KAAK,CAAC,2CAA2CD,GAAG,EAAE,CAAC;;EAEnE,OAAO,IAAIE,UAAU,CAAC,CAACF,GAAG,CAAC,CAAC;AAC9B;AAEA;;;;;;;;;AASA,OAAM,SAAUG,QAAQA,CAACC,GAAe,EAAEC,MAAM,GAAG,CAAC;EAClD,OAAOD,GAAG,CAACC,MAAM,CAAC;AACpB;AAEA;;;;;;;;;;AAUA,OAAM,SAAUC,UAAUA,CAACN,GAAW;EACpC,IAAIA,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGV,OAAO,EAAE;IAC5B,MAAM,IAAIW,KAAK,CAAC,4CAA4CD,GAAG,EAAE,CAAC;;EAEpE,MAAMO,MAAM,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;EACjCE,IAAI,CAACE,SAAS,CAAC,CAAC,EAAEX,GAAG,EAAE,IAAI,CAAC;EAC5B,OAAO,IAAIE,UAAU,CAACO,IAAI,CAACF,MAAM,CAAC;AACpC;AAEA;;;;;;;;;AASA,OAAM,SAAUK,UAAUA,CAACR,GAAe,EAAEC,MAAM,GAAG,CAAC;EACpD,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACN,GAAG,CAACG,MAAM,CAAC;EACrC,OAAOE,IAAI,CAACI,SAAS,CAACR,MAAM,EAAE,IAAI,CAAC;AACrC;AAEA;;;;;;;;;;AAUA,OAAM,SAAUS,UAAUA,CAACd,GAAW;EACpC,IAAIA,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGT,OAAO,EAAE;IAC5B,MAAM,IAAIU,KAAK,CAAC,4CAA4CD,GAAG,EAAE,CAAC;;EAEpE,MAAMO,MAAM,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;EACjCE,IAAI,CAACM,YAAY,CAAC,CAAC,EAAEf,GAAG,EAAE,IAAI,CAAC;EAC/B,OAAO,IAAIE,UAAU,CAACO,IAAI,CAACF,MAAM,CAAC;AACpC;AAEA;;;;;;;;;AASA,OAAM,SAAUS,UAAUA,CAACZ,GAAe,EAAEC,MAAM,GAAG,CAAC;EACpD,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACN,GAAG,CAACG,MAAM,CAAC;EACrC,OAAOE,IAAI,CAACQ,YAAY,CAACZ,MAAM,EAAE,IAAI,CAAC;AACxC;AAEA;;;;;;;;;;AAUA,OAAM,SAAUa,WAAWA,CAAClB,GAAW;EACrC,IAAIA,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGP,QAAQ,EAAE;IAC7B,MAAM,IAAIQ,KAAK,CAAC,6CAA6CD,GAAG,EAAE,CAAC;;EAGrE,MAAMmB,KAAK,GAAGnB,GAAG,IAAI,GAAG;EACxB,MAAMoB,KAAK,GAAIpB,GAAG,IAAI,GAAG,IAAK,GAAG;EAEjC,MAAMO,MAAM,GAAG,IAAIC,WAAW,CAAC,EAAE,CAAC;EAClC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;EAEjCE,IAAI,CAACM,YAAY,CAAC,CAAC,EAAEK,KAAK,EAAE,IAAI,CAAC;EACjCX,IAAI,CAACM,YAAY,CAAC,CAAC,EAAEI,KAAK,EAAE,IAAI,CAAC;EAEjC,OAAO,IAAIjB,UAAU,CAACO,IAAI,CAACF,MAAM,CAAC;AACpC;AAEA;;;;;;;;;AASA,OAAM,SAAUc,WAAWA,CAACjB,GAAe,EAAEC,MAAM,GAAG,CAAC;EACrD,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACN,GAAG,CAACG,MAAM,EAAEF,MAAM,CAAC;EAE7C,MAAMe,KAAK,GAAGX,IAAI,CAACQ,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAME,KAAK,GAAGV,IAAI,CAACQ,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EAE1C,OAAQE,KAAK,IAAI,GAAG,GAAIC,KAAK;AAC/B;AAEA;;;;;;;;;;AAUA,OAAM,SAAUE,WAAWA,CAACtB,GAAW;EACrC,IAAIA,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAGN,QAAQ,EAAE;IAC7B,MAAM,IAAIO,KAAK,CAAC,6CAA6CD,GAAG,EAAE,CAAC;;EAGrE,MAAMuB,EAAE,GAAGvB,GAAG,GAAGT,OAAO;EACxB,MAAMiC,EAAE,GAAIxB,GAAG,IAAI,GAAG,GAAIT,OAAO;EACjC,MAAMkC,EAAE,GAAIzB,GAAG,IAAI,IAAI,GAAIT,OAAO;EAClC,MAAMmC,EAAE,GAAI1B,GAAG,IAAI,IAAI,GAAIT,OAAO;EAElC,MAAMgB,MAAM,GAAG,IAAIC,WAAW,CAAC,EAAE,CAAC;EAClC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;EAEjCE,IAAI,CAACM,YAAY,CAAC,CAAC,EAAEQ,EAAE,EAAE,IAAI,CAAC;EAC9Bd,IAAI,CAACM,YAAY,CAAC,CAAC,EAAES,EAAE,EAAE,IAAI,CAAC;EAC9Bf,IAAI,CAACM,YAAY,CAAC,EAAE,EAAEU,EAAE,EAAE,IAAI,CAAC;EAC/BhB,IAAI,CAACM,YAAY,CAAC,EAAE,EAAEW,EAAE,EAAE,IAAI,CAAC;EAE/B,OAAO,IAAIxB,UAAU,CAACO,IAAI,CAACF,MAAM,CAAC;AACpC;AAEA;;;;;;;;;AASA,OAAM,SAAUoB,WAAWA,CAACvB,GAAe,EAAEC,MAAM,GAAG,CAAC;EACrD,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACN,GAAG,CAACG,MAAM,EAAEF,MAAM,CAAC;EAE7C,MAAMkB,EAAE,GAAGd,IAAI,CAACQ,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC;EACrC,MAAMO,EAAE,GAAGf,IAAI,CAACQ,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC;EACrC,MAAMQ,EAAE,GAAGhB,IAAI,CAACQ,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC;EACtC,MAAMS,EAAE,GAAGjB,IAAI,CAACQ,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC;EAEtC,OAAQS,EAAE,IAAI,IAAI,GAAKD,EAAE,IAAI,IAAK,GAAID,EAAE,IAAI,GAAI,GAAGD,EAAE;AACvD;AAEA;;;;;;;;;;AAUA,OAAM,SAAUK,UAAUA,CAAC5B,GAAW;EACpC,IAAIA,GAAG,GAAGL,OAAO,IAAIK,GAAG,GAAGJ,OAAO,EAAE;IAClC,MAAM,IAAIK,KAAK,CAAC,2CAA2CD,GAAG,EAAE,CAAC;;EAEnE,MAAMO,MAAM,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;EACjCE,IAAI,CAACoB,QAAQ,CAAC,CAAC,EAAE7B,GAAG,EAAE,IAAI,CAAC;EAC3B,OAAO,IAAIE,UAAU,CAACO,IAAI,CAACF,MAAM,CAAC;AACpC;AAEA;;;;;;;;;AASA,OAAM,SAAUuB,UAAUA,CAAC1B,GAAe,EAAEC,MAAM,GAAG,CAAC;EACpD,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACN,GAAG,CAACG,MAAM,CAAC;EACrC,OAAOE,IAAI,CAACsB,QAAQ,CAAC1B,MAAM,EAAE,IAAI,CAAC;AACpC;AAEA;;;;;;;;;;AAUA,OAAM,SAAU2B,UAAUA,CAAChC,GAAW;EACpC,IAAIA,GAAG,GAAGH,OAAO,IAAIG,GAAG,GAAGF,OAAO,EAAE;IAClC,MAAM,IAAIG,KAAK,CACb,2CAA2CD,GAAG,CAACiC,QAAQ,EAAE,EAAE,CAC5D;;EAEH,MAAM1B,MAAM,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;EACjCE,IAAI,CAACyB,WAAW,CAAC,CAAC,EAAElC,GAAG,EAAE,IAAI,CAAC;EAC9B,OAAO,IAAIE,UAAU,CAACO,IAAI,CAACF,MAAM,CAAC;AACpC;AAEA;;;;;;;;;AASA,OAAM,SAAU4B,UAAUA,CAAC/B,GAAe,EAAEC,MAAM,GAAG,CAAC;EACpD,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACN,GAAG,CAACG,MAAM,CAAC;EACrC,OAAOE,IAAI,CAAC2B,WAAW,CAAC/B,MAAM,EAAE,IAAI,CAAC;AACvC;AAEA;;;;;;;;AAQA,OAAM,SAAUgC,UAAUA,CAACrC,GAAW;EACpC,MAAMO,MAAM,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;EACjCE,IAAI,CAAC6B,UAAU,CAAC,CAAC,EAAEtC,GAAG,EAAE,IAAI,CAAC;EAC7B,OAAO,IAAIE,UAAU,CAACO,IAAI,CAACF,MAAM,CAAC;AACpC;AAEA;;;;;;;;;AASA,OAAM,SAAUgC,UAAUA,CAACnC,GAAe,EAAEC,MAAM,GAAG,CAAC;EACpD,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACN,GAAG,CAACG,MAAM,CAAC;EACrC,OAAOE,IAAI,CAAC+B,UAAU,CAACnC,MAAM,EAAE,IAAI,CAAC;AACtC;AAEA;;;;;;;;AAQA,OAAM,SAAUoC,UAAUA,CAACzC,GAAW;EACpC,MAAMO,MAAM,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;EACjC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,MAAM,CAAC;EACjCE,IAAI,CAACiC,UAAU,CAAC,CAAC,EAAE1C,GAAG,EAAE,IAAI,CAAC;EAC7B,OAAO,IAAIE,UAAU,CAACO,IAAI,CAACF,MAAM,CAAC;AACpC;AAEA;;;;;;;;;AASA,OAAM,SAAUoC,UAAUA,CAACvC,GAAe,EAAEC,MAAM,GAAG,CAAC;EACpD,MAAMI,IAAI,GAAG,IAAIC,QAAQ,CAACN,GAAG,CAACG,MAAM,CAAC;EACrC,OAAOE,IAAI,CAACmC,UAAU,CAACvC,MAAM,EAAE,IAAI,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}