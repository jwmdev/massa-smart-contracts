{"ast":null,"code":"import { trySafeExecute } from '../utils/retryExecuteFunction';\nimport { JSON_RPC_REQUEST_METHOD } from '../interfaces/JsonRpcMethods';\nimport { BaseClient } from './BaseClient';\n/**\n * Public API client for interacting with a Massa node.\n *\n * This class provides an interface for interacting with the public API of a Massa node.\n * It offers methods for querying various data structures used in the Massa blockchain,\n * such as blocks, endorsements, operations, and stakers.\n *\n * @module PublicApiClient\n */\nexport class PublicApiClient extends BaseClient {\n  /**\n   * Constructor for the {@link PublicApiClient} object.\n   *\n   * @param clientConfig - The configuration settings for this client.\n   */\n  constructor(clientConfig) {\n    super(clientConfig);\n    // Bind all public API methods to the current context.\n    // This ensures that the methods can be called correctly even when their context is lost.\n    // For example, when passed as a callback function.\n    // public api methods\n    this.getNodeStatus = this.getNodeStatus.bind(this);\n    this.getAddresses = this.getAddresses.bind(this);\n    this.getBlocks = this.getBlocks.bind(this);\n    this.getEndorsements = this.getEndorsements.bind(this);\n    this.getOperations = this.getOperations.bind(this);\n    this.getCliques = this.getCliques.bind(this);\n    this.getStakers = this.getStakers.bind(this);\n    this.getBlockcliqueBlockBySlot = this.getBlockcliqueBlockBySlot.bind(this);\n    this.getGraphInterval = this.getGraphInterval.bind(this);\n  }\n  /**\n   * Get graph interval.\n   *\n   * @param graphInterval - The graph interval values in ms as an IGetGraphInterval.\n   *\n   * @returns A promise which resolves in the graph interval.\n   */\n  async getGraphInterval(graphInterval) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_GRAPH_INTERVAL;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [graphInterval]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [graphInterval]);\n    }\n  }\n  /**\n   * Get blockclique details by period and thread.\n   *\n   * @param slot - The slot as an ISlot.\n   *\n   * @returns A promise which resolves in the blockclique details.\n   */\n  async getBlockcliqueBlockBySlot(slot) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_BLOCKCLIQUE_BLOCK_BY_SLOT;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [slot]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [slot]);\n    }\n  }\n  /**\n   * Retrieves the node's status.\n   *\n   * @remarks\n   * The returned information includes:\n   * - Whether the node is reachable\n   * - The number of connected peers\n   * - The node's version\n   * - The node's configuration parameters\n   *\n   * @returns A promise that resolves to the node's status information.\n   */\n  async getNodeStatus() {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_STATUS;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, []]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, []);\n    }\n  }\n  /**\n   * Retrieves data about a list of addresses, such as their balances and block creation details.\n   *\n   * @param addresses - An array of addresses to query.\n   *\n   * @returns A promise that resolves to an array of address information.\n   */\n  async getAddresses(addresses) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_ADDRESSES;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [addresses]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [addresses]);\n    }\n  }\n  /**\n   * Show data about a block (content, finality ...).\n   *\n   * @remarks\n   * The blocks are stored in the node cache. After a certain time (depending of the network activity),\n   * the blocks are removed from the cache and the node will not be able to return the block data.\n   * The corresponding api parameter is 'max_discarded_blocks'.\n   * More information can be found here: https://docs.massa.net/en/latest/testnet/all-config.html\n   *\n   * @param blockIds - The block ids as an array of strings.\n   *\n   * @returns A promise which resolves in the block data.\n   */\n  async getBlocks(blockIds) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_BLOCKS;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [blockIds]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [blockIds]);\n    }\n  }\n  /**\n   * Show info about a list of endorsements.\n   *\n   * @param endorsementIds - The endorsement ids as an array of strings.\n   *\n   * @returns A promise which resolves in the endorsement data.\n   */\n  async getEndorsements(endorsementIds) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_ENDORSEMENTS;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [endorsementIds]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [endorsementIds]);\n    }\n  }\n  /**\n   * Retrieves data about a list of operations.\n   *\n   * @param operationIds - An array of operation IDs to query.\n   *\n   * @returns A promise that resolves to an array of operation data.\n   */\n  async getOperations(operationIds) {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_OPERATIONS;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [operationIds]]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, [operationIds]);\n    }\n  }\n  /**\n   * Get cliques.\n   *\n   * @returns A promise which resolves to the cliques.\n   */\n  async getCliques() {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_CLIQUES;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, []]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, []);\n    }\n  }\n  /**\n   * Retrieves a list of active stakers and their roll counts for the current cycle.\n   *\n   * @returns A promise that resolves to an array of staking addresses and their roll counts.\n   */\n  async getStakers() {\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_STAKERS;\n    if (this.clientConfig.retryStrategyOn) {\n      return await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, []]);\n    } else {\n      return await this.sendJsonRPCRequest(jsonRpcRequestMethod, []);\n    }\n  }\n  /**\n   * Retrieves the data entries at both the latest final and active executed slots.\n   *\n   * @param addressesKeys - An array of objects containing address and key data.\n   *\n   * @returns A promise that resolves to an array of datastore entries.\n   */\n  async getDatastoreEntries(addressesKeys) {\n    const data = [];\n    for (const input of addressesKeys) {\n      data.push({\n        address: input.address,\n        key: Array.prototype.slice.call(Buffer.from(input.key))\n      });\n    }\n    const jsonRpcRequestMethod = JSON_RPC_REQUEST_METHOD.GET_DATASTORE_ENTRIES;\n    let datastoreEntries = [];\n    if (this.clientConfig.retryStrategyOn) {\n      datastoreEntries = await trySafeExecute(this.sendJsonRPCRequest, [jsonRpcRequestMethod, [data]]);\n    } else {\n      datastoreEntries = await this.sendJsonRPCRequest(jsonRpcRequestMethod, [data]);\n    }\n    return datastoreEntries.map(e => {\n      return {\n        final_value: new Uint8Array(e.final_value),\n        candidate_value: new Uint8Array(e.candidate_value)\n      };\n    });\n  }\n}","map":{"version":3,"names":["trySafeExecute","JSON_RPC_REQUEST_METHOD","BaseClient","PublicApiClient","constructor","clientConfig","getNodeStatus","bind","getAddresses","getBlocks","getEndorsements","getOperations","getCliques","getStakers","getBlockcliqueBlockBySlot","getGraphInterval","graphInterval","jsonRpcRequestMethod","GET_GRAPH_INTERVAL","retryStrategyOn","sendJsonRPCRequest","slot","GET_BLOCKCLIQUE_BLOCK_BY_SLOT","GET_STATUS","addresses","GET_ADDRESSES","blockIds","GET_BLOCKS","endorsementIds","GET_ENDORSEMENTS","operationIds","GET_OPERATIONS","GET_CLIQUES","GET_STAKERS","getDatastoreEntries","addressesKeys","data","input","push","address","key","Array","prototype","slice","call","Buffer","from","GET_DATASTORE_ENTRIES","datastoreEntries","map","e","final_value","Uint8Array","candidate_value"],"sources":["../../../src/web3/PublicApiClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}