{"ast":null,"code":"import { ProviderType } from '../interfaces/IProvider';\nimport { Buffer } from 'buffer';\nimport { base58Decode, varintEncode } from '../utils/Xbqcrypto';\nimport axios from 'axios';\nimport { JSON_RPC_REQUEST_METHOD } from '../interfaces/JsonRpcMethods';\nimport { OperationTypeId } from '../interfaces/OperationTypes';\n// encode a string address to bytes.\nconst encodeAddressToBytes = (address, isSmartContract = false) => {\n  let targetAddressEncoded = base58Decode(address.slice(2));\n  targetAddressEncoded = Buffer.concat([isSmartContract ? Buffer.from([1]) : Buffer.from([0]), targetAddressEncoded]);\n  return targetAddressEncoded;\n};\nexport const requestHeaders = {\n  Accept: 'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Credentials': true,\n  'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n};\nexport const PERIOD_OFFSET = 5;\n/**\n * The Base Client object is the main entry point for interacting with the massa blockchain.\n *\n * @remarks\n * The `BaseClient` class should not be instantiated directly; instead, it should\n * be extended by other client classes to provide additional functionality on top of the core\n * methods provided by this class.\n *\n * @throws Will throw an error if no public providers are included in client configuration.\n * @throws Will throw an error if no private providers are included in client configuration.\n */\nexport class BaseClient {\n  clientConfig;\n  /**\n   * Constructor of the BaseClient class\n   *\n   * @param clientConfig - The client configuration object as defined in {@link IClientConfig}\n   */\n  constructor(clientConfig) {\n    this.clientConfig = clientConfig;\n    this.clientConfig.periodOffset = this.clientConfig.periodOffset | PERIOD_OFFSET;\n    if (this.getPublicProviders().length === 0) {\n      throw new Error('Cannot initialize web3 with no public providers. Need at least one');\n    }\n    // bind class methods\n    this.getPrivateProviders = this.getPrivateProviders.bind(this);\n    this.getProviderForRpcMethod = this.getProviderForRpcMethod.bind(this);\n    this.getPublicProviders = this.getPublicProviders.bind(this);\n    this.sendJsonRPCRequest = this.sendJsonRPCRequest.bind(this);\n    this.compactBytesForOperation = this.compactBytesForOperation.bind(this);\n    this.setProviders = this.setProviders.bind(this);\n    this.promisifyJsonRpcCall = this.promisifyJsonRpcCall.bind(this);\n  }\n  /**\n   * Set new providers as {@link IProvider}.\n   *\n   * @privateRemarks\n   * This methods add the providers to the existing ones in the clientConfig object.\n   *\n   * @param providers - The new providers to set as an array of IProvider.\n   *\n   * @throws Will throw an error if no public providers are included in the given array of providers.\n   * @throws Will throw an error if no private providers are included in the given array of providers.\n   */\n  setProviders(providers) {\n    const hasPublicProvider = providers.some(provider => provider.type === ProviderType.PUBLIC);\n    if (!hasPublicProvider) {\n      throw new Error('Cannot set providers with no public providers. Need at least one');\n    }\n    this.clientConfig.providers = providers;\n  }\n  /**\n   * Returns all the private providers.\n   *\n   * @returns An array of IProvider containing all the private providers.\n   */\n  getPrivateProviders() {\n    return this.clientConfig.providers.filter(provider => provider.type === ProviderType.PRIVATE);\n  }\n  /**\n   * Returns all the public providers.\n   *\n   * @returns An array of IProvider containing all the public providers.\n   */\n  getPublicProviders() {\n    return this.clientConfig.providers.filter(provider => provider.type === ProviderType.PUBLIC);\n  }\n  /**\n   * Find provider for a concrete rpc method\n   *\n   * @remarks\n   * This method chooses the provider to use for a given rpc method.\n   *  - If the rpc method is about getting or sending data to the blockchain,\n   *    it will choose a public provider.\n   *  - If the rpc method is meant to be used by the node itself, it will choose a private provider.\n   *  - An error is thrown if no provider is found for the rpc method.\n   *\n   * @param requestMethod - The rpc method to find the provider for.\n   *\n   * @returns The provider for the rpc method.\n   */\n  getProviderForRpcMethod(requestMethod) {\n    switch (requestMethod) {\n      case JSON_RPC_REQUEST_METHOD.GET_ADDRESSES:\n      case JSON_RPC_REQUEST_METHOD.GET_STATUS:\n      case JSON_RPC_REQUEST_METHOD.SEND_OPERATIONS:\n      case JSON_RPC_REQUEST_METHOD.GET_OPERATIONS:\n      case JSON_RPC_REQUEST_METHOD.GET_BLOCKS:\n      case JSON_RPC_REQUEST_METHOD.GET_ENDORSEMENTS:\n      case JSON_RPC_REQUEST_METHOD.GET_CLIQUES:\n      case JSON_RPC_REQUEST_METHOD.GET_STAKERS:\n      case JSON_RPC_REQUEST_METHOD.GET_FILTERED_SC_OUTPUT_EVENT:\n      case JSON_RPC_REQUEST_METHOD.EXECUTE_READ_ONLY_BYTECODE:\n      case JSON_RPC_REQUEST_METHOD.EXECUTE_READ_ONLY_CALL:\n      case JSON_RPC_REQUEST_METHOD.GET_DATASTORE_ENTRIES:\n      case JSON_RPC_REQUEST_METHOD.GET_BLOCKCLIQUE_BLOCK_BY_SLOT:\n      case JSON_RPC_REQUEST_METHOD.GET_GRAPH_INTERVAL:\n        {\n          let providers = this.getPublicProviders();\n          let idx = Math.floor(Math.random() * providers.length);\n          return providers[idx];\n        }\n      case JSON_RPC_REQUEST_METHOD.STOP_NODE:\n      case JSON_RPC_REQUEST_METHOD.NODE_BAN_BY_ID:\n      case JSON_RPC_REQUEST_METHOD.NODE_BAN_BY_IP:\n      case JSON_RPC_REQUEST_METHOD.NODE_UNBAN_BY_ID:\n      case JSON_RPC_REQUEST_METHOD.NODE_UNBAN_BY_IP:\n      case JSON_RPC_REQUEST_METHOD.GET_STAKING_ADDRESSES:\n      case JSON_RPC_REQUEST_METHOD.REMOVE_STAKING_ADDRESSES:\n      case JSON_RPC_REQUEST_METHOD.ADD_STAKING_PRIVATE_KEYS:\n      case JSON_RPC_REQUEST_METHOD.NODE_SIGN_MESSAGE:\n      case JSON_RPC_REQUEST_METHOD.NODE_REMOVE_FROM_WHITELIST:\n        {\n          let providers = this.getPrivateProviders();\n          let idx = Math.floor(Math.random() * providers.length);\n          return providers[idx];\n        }\n      default:\n        throw new Error(`Unknown Json rpc method: ${requestMethod}`);\n    }\n  }\n  /**\n   * Converts a json rpc call to a promise that resolves as a JsonRpcResponseData\n   *\n   * @privateRemarks\n   * If there is an error while sending the request, the function catches the error, the isError\n   * property is set to true, the result property set to null, and the error property set to a\n   * new Error object with a message indicating that there was an error.\n   *\n   * @param resource - The rpc method to call.\n   * @param params - The parameters to pass to the rpc method.\n   *\n   * @returns A promise that resolves as a JsonRpcResponseData.\n   */\n  async promisifyJsonRpcCall(resource, params) {\n    let resp = null;\n    const body = {\n      jsonrpc: '2.0',\n      method: resource,\n      params: params,\n      id: 0\n    };\n    try {\n      resp = await axios.post(this.getProviderForRpcMethod(resource).url, body, requestHeaders);\n    } catch (ex) {\n      return {\n        isError: true,\n        result: null,\n        error: new Error('JSON.parse error: ' + String(ex))\n      };\n    }\n    const responseData = resp.data;\n    if (responseData.error) {\n      return {\n        isError: true,\n        result: null,\n        error: new Error(responseData.error.message)\n      };\n    }\n    return {\n      isError: false,\n      result: responseData.result,\n      error: null\n    };\n  }\n  /**\n   * Sends a post JSON rpc request to the node.\n   *\n   * @param resource - The rpc method to call.\n   * @param params - The parameters to pass to the rpc method.\n   *\n   * @throws An error if the rpc method returns an error.\n   *\n   * @returns A promise that resolves as the result of the rpc method.\n   */\n  async sendJsonRPCRequest(resource, params) {\n    let resp = null;\n    resp = await this.promisifyJsonRpcCall(resource, params);\n    // in case of rpc error, rethrow the error.\n    if (resp.error && resp.error) {\n      throw resp.error;\n    }\n    return resp.result;\n  }\n  /**\n   * Compacts bytes payload per operation.\n   *\n   * @param data - The operation data.\n   * @param opTypeId - The operation type id.\n   * @param account - The account used.\n   * @param expirePeriod - The expire period.\n   *\n   * @returns The compacted bytes payload.\n   */\n  compactBytesForOperation(data, opTypeId, expirePeriod) {\n    const feeEncoded = Buffer.from(varintEncode(data.fee));\n    const expirePeriodEncoded = Buffer.from(varintEncode(expirePeriod));\n    const typeIdEncoded = Buffer.from(varintEncode(opTypeId.valueOf()));\n    switch (opTypeId) {\n      case OperationTypeId.ExecuteSC:\n        {\n          // get sc data binary\n          const scBinaryCode = data.contractDataBinary;\n          // max gas\n          const maxGasEncoded = Buffer.from(varintEncode(data.maxGas));\n          // max coins amount\n          const maxCoinEncoded = Buffer.from(varintEncode(data.maxCoins));\n          // contract data\n          const contractDataEncoded = Buffer.from(scBinaryCode);\n          const dataLengthEncoded = Buffer.from(varintEncode(contractDataEncoded.length));\n          // smart contract operation datastore\n          const datastoreKeyMap = data.datastore ? data.datastore : new Map();\n          let datastoreSerializedBuffer = Buffer.from(new Uint8Array());\n          for (const [key, value] of datastoreKeyMap) {\n            const encodedKeyBytes = Buffer.from(key);\n            const encodedKeyLen = Buffer.from(varintEncode(encodedKeyBytes.length));\n            const encodedValueBytes = Buffer.from(value);\n            const encodedValueLen = Buffer.from(varintEncode(encodedValueBytes.length));\n            datastoreSerializedBuffer = Buffer.concat([datastoreSerializedBuffer, encodedKeyLen, encodedKeyBytes, encodedValueLen, encodedValueBytes]);\n          }\n          const datastoreSerializedBufferLen = Buffer.from(varintEncode(datastoreKeyMap.size));\n          if (datastoreSerializedBuffer.length === 0) {\n            return Buffer.concat([feeEncoded, expirePeriodEncoded, typeIdEncoded, maxGasEncoded, maxCoinEncoded, dataLengthEncoded, contractDataEncoded, datastoreSerializedBufferLen]);\n          }\n          return Buffer.concat([feeEncoded, expirePeriodEncoded, typeIdEncoded, maxGasEncoded, maxCoinEncoded, dataLengthEncoded, contractDataEncoded, datastoreSerializedBufferLen, datastoreSerializedBuffer]);\n        }\n      case OperationTypeId.CallSC:\n        {\n          // max gas\n          const maxGasEncoded = Buffer.from(varintEncode(data.maxGas));\n          // coins to send\n          const coinsEncoded = Buffer.from(varintEncode(data.coins));\n          // target address\n          const targetAddressEncoded = encodeAddressToBytes(data.targetAddress, true);\n          // target function name and name length\n          const functionNameEncoded = new Uint8Array(Buffer.from(data.functionName, 'utf8'));\n          const functionNameLengthEncoded = Buffer.from(varintEncode(functionNameEncoded.length));\n          // parameter\n          const parametersEncoded = new Uint8Array(data.parameter);\n          const parametersLengthEncoded = Buffer.from(varintEncode(parametersEncoded.length));\n          return Buffer.concat([feeEncoded, expirePeriodEncoded, typeIdEncoded, maxGasEncoded, coinsEncoded, targetAddressEncoded, functionNameLengthEncoded, functionNameEncoded, parametersLengthEncoded, parametersEncoded]);\n        }\n      case OperationTypeId.Transaction:\n        {\n          // transfer amount\n          const amount = data.amount;\n          const transferAmountEncoded = Buffer.from(varintEncode(amount));\n          // recipient\n          const recipientAddressEncoded = encodeAddressToBytes(data.recipientAddress, false);\n          return Buffer.concat([feeEncoded, expirePeriodEncoded, typeIdEncoded, recipientAddressEncoded, transferAmountEncoded]);\n        }\n      case OperationTypeId.RollBuy:\n      case OperationTypeId.RollSell:\n        {\n          // rolls amount\n          const rollsAmountEncoded = Buffer.from(varintEncode(data.amount));\n          return Buffer.concat([feeEncoded, expirePeriodEncoded, typeIdEncoded, rollsAmountEncoded]);\n        }\n    }\n  }\n}","map":{"version":3,"names":["ProviderType","Buffer","base58Decode","varintEncode","axios","JSON_RPC_REQUEST_METHOD","OperationTypeId","encodeAddressToBytes","address","isSmartContract","targetAddressEncoded","slice","concat","from","requestHeaders","Accept","PERIOD_OFFSET","BaseClient","clientConfig","constructor","periodOffset","getPublicProviders","length","Error","getPrivateProviders","bind","getProviderForRpcMethod","sendJsonRPCRequest","compactBytesForOperation","setProviders","promisifyJsonRpcCall","providers","hasPublicProvider","some","provider","type","PUBLIC","filter","PRIVATE","requestMethod","GET_ADDRESSES","GET_STATUS","SEND_OPERATIONS","GET_OPERATIONS","GET_BLOCKS","GET_ENDORSEMENTS","GET_CLIQUES","GET_STAKERS","GET_FILTERED_SC_OUTPUT_EVENT","EXECUTE_READ_ONLY_BYTECODE","EXECUTE_READ_ONLY_CALL","GET_DATASTORE_ENTRIES","GET_BLOCKCLIQUE_BLOCK_BY_SLOT","GET_GRAPH_INTERVAL","idx","Math","floor","random","STOP_NODE","NODE_BAN_BY_ID","NODE_BAN_BY_IP","NODE_UNBAN_BY_ID","NODE_UNBAN_BY_IP","GET_STAKING_ADDRESSES","REMOVE_STAKING_ADDRESSES","ADD_STAKING_PRIVATE_KEYS","NODE_SIGN_MESSAGE","NODE_REMOVE_FROM_WHITELIST","resource","params","resp","body","jsonrpc","method","id","post","url","ex","isError","result","error","String","responseData","data","message","opTypeId","expirePeriod","feeEncoded","fee","expirePeriodEncoded","typeIdEncoded","valueOf","ExecuteSC","scBinaryCode","contractDataBinary","maxGasEncoded","maxGas","maxCoinEncoded","maxCoins","contractDataEncoded","dataLengthEncoded","datastoreKeyMap","datastore","Map","datastoreSerializedBuffer","Uint8Array","key","value","encodedKeyBytes","encodedKeyLen","encodedValueBytes","encodedValueLen","datastoreSerializedBufferLen","size","CallSC","coinsEncoded","coins","targetAddress","functionNameEncoded","functionName","functionNameLengthEncoded","parametersEncoded","parameter","parametersLengthEncoded","Transaction","amount","transferAmountEncoded","recipientAddressEncoded","recipientAddress","RollBuy","RollSell","rollsAmountEncoded"],"sources":["../../../src/web3/BaseClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}