{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MassaStationProvider = exports.MASSA_STATION_PROVIDER_NAME = exports.MASSA_STATION_IMPORT_ACCOUNTS_URL = exports.MASSA_STATION_ACCOUNTS_URL = exports.MASSA_STATION_URL = void 0;\nconst AccountDeletion_1 = require(\"../provider/AccountDeletion\");\nconst AccountImport_1 = require(\"../provider/AccountImport\");\nconst RequestHandler_1 = require(\"./RequestHandler\");\nconst MassaStationAccount_1 = require(\"./MassaStationAccount\");\n/**\n * MassaStation url\n */\nexports.MASSA_STATION_URL = 'https://station.massa/';\n/**\n * The MassaStation accounts url\n */\nexports.MASSA_STATION_ACCOUNTS_URL = `${exports.MASSA_STATION_URL}plugin/massa-labs/massa-wallet/api/accounts`;\n/**\n * MassaStation's url for importing accounts\n */\nexports.MASSA_STATION_IMPORT_ACCOUNTS_URL = `${exports.MASSA_STATION_ACCOUNTS_URL}/import/`;\n/**\n * MassaStation's wallet provider name\n */\nexports.MASSA_STATION_PROVIDER_NAME = 'MASSASTATION';\n/**\n * This class provides an implementation for communicating with the MassaStation wallet provider.\n * @remarks\n * This class is used as a proxy to the MassaStation server for exchanging message over https calls.\n */\nclass MassaStationProvider {\n  /**\n   * Provider constructor\n   *\n   * @param providerName - The name of the provider.\n   * @returns An instance of the Provider class.\n   */\n  constructor() {\n    this.providerName = exports.MASSA_STATION_PROVIDER_NAME;\n  }\n  /**\n   * This method returns the name of the provider.\n   * @returns The name of the provider.\n   */\n  name() {\n    return this.providerName;\n  }\n  /**\n   * This method sends a message to the MassaStation server to get the list of accounts for the provider.\n   * It returns a Promise that resolves to an array of Account instances.\n   *\n   * @returns A promise that resolves to an array of Account instances.\n   */\n  async accounts() {\n    let massaStationAccountsResponse = null;\n    try {\n      massaStationAccountsResponse = await (0, RequestHandler_1.getRequest)(exports.MASSA_STATION_ACCOUNTS_URL);\n    } catch (ex) {\n      console.error(`MassaStation accounts retrieval error`);\n      throw ex;\n    }\n    if (massaStationAccountsResponse.isError || massaStationAccountsResponse.error) {\n      throw massaStationAccountsResponse.error.message;\n    }\n    return massaStationAccountsResponse.result.map(massaStationAccount => {\n      return new MassaStationAccount_1.MassaStationAccount({\n        address: massaStationAccount.address,\n        name: massaStationAccount.nickname\n      }, this.providerName);\n    });\n  }\n  /**\n   * This method makes an http call to the MassaStation server to import an account with\n   * the given publicKey and privateKey.\n   *\n   * @param publicKey - The public key of the account.\n   * @param privateKey - The private key of the account.\n   *\n   * @returns a Promise that resolves to an instance of IAccountImportResponse.\n   */\n  async importAccount(publicKey, privateKey) {\n    const accountImportRequest = {\n      publicKey,\n      privateKey\n    };\n    let massaStationAccountsResponse = null;\n    try {\n      massaStationAccountsResponse = await (0, RequestHandler_1.putRequest)(exports.MASSA_STATION_ACCOUNTS_URL, accountImportRequest);\n    } catch (ex) {\n      console.log(`MassaStation accounts retrieval error: ${ex}`);\n      throw ex;\n    }\n    if (massaStationAccountsResponse.isError || massaStationAccountsResponse.error) {\n      throw massaStationAccountsResponse.error.message;\n    }\n    return {\n      response: AccountImport_1.EAccountImportResponse.OK,\n      message: 'Account imported successfully'\n    };\n  }\n  /**\n   * This method sends an http call to the MassaStation server to delete the account associated with the given address.\n   *\n   * @param address - The address of the account.\n   * @returns a Promise that resolves to an instance of IAccountDeletionResponse.\n   */\n  async deleteAccount(address) {\n    // get all accounts\n    let allAccounts = null;\n    try {\n      allAccounts = await (0, RequestHandler_1.getRequest)(exports.MASSA_STATION_ACCOUNTS_URL);\n    } catch (ex) {\n      console.log(`MassaStation accounts retrieval error: ${ex}`);\n      throw ex;\n    }\n    if (allAccounts.isError || allAccounts.error) {\n      throw allAccounts.error.message;\n    }\n    // find the account with the desired address\n    const accountToDelete = allAccounts.result.find(account => account.address.toLowerCase() === address.toLowerCase());\n    // delete the account in question\n    let massaStationAccountsResponse = null;\n    try {\n      massaStationAccountsResponse = await (0, RequestHandler_1.deleteRequest)(`${exports.MASSA_STATION_ACCOUNTS_URL}/${accountToDelete.nickname}`);\n    } catch (ex) {\n      console.log(`MassaStation accounts deletion error`, ex);\n      return {\n        response: AccountDeletion_1.EAccountDeletionResponse.ERROR\n      };\n    }\n    if (massaStationAccountsResponse.isError || massaStationAccountsResponse.error) {\n      console.log(`MassaStation accounts deletion error`, massaStationAccountsResponse.error.message);\n      return {\n        response: AccountDeletion_1.EAccountDeletionResponse.ERROR\n      };\n    }\n    return {\n      response: AccountDeletion_1.EAccountDeletionResponse.OK\n    };\n  }\n  /**\n   * This method sends an http call to the MassaStation server to obtain node urls.\n   *\n   * @returns a Promise that resolves to a list of node urls.\n   */\n  async getNodesUrls() {\n    let nodesResponse = null;\n    try {\n      nodesResponse = await (0, RequestHandler_1.getRequest)(`${exports.MASSA_STATION_URL}massa/node`);\n      if (nodesResponse.isError || nodesResponse.error) {\n        throw nodesResponse.error.message;\n      }\n      // transform nodesResponse.result to a json and then get the \"url\" property\n      const nodes = nodesResponse.result;\n      return Array(nodes.url);\n    } catch (ex) {\n      console.error(`MassaStation nodes retrieval error`, ex);\n      throw ex;\n    }\n  }\n  /**\n   * This method sends an http call to the MassaStation server to create a new random account.\n   *\n   * @returns a Promise that resolves to the details of the newly generated account.\n   */\n  async generateNewAccount(name) {\n    let massaStationAccountsResponse = null;\n    console.log(exports.MASSA_STATION_ACCOUNTS_URL + '/' + name);\n    try {\n      massaStationAccountsResponse = await (0, RequestHandler_1.postRequest)(exports.MASSA_STATION_ACCOUNTS_URL + '/' + name, {});\n      if (massaStationAccountsResponse.isError || massaStationAccountsResponse.error) {\n        throw massaStationAccountsResponse.error.message;\n      }\n      return {\n        address: massaStationAccountsResponse.result.address,\n        name: massaStationAccountsResponse.result.nickname\n      };\n    } catch (ex) {\n      console.error(`Error while generating account: ${ex}`);\n      throw ex;\n    }\n  }\n}\nexports.MassaStationProvider = MassaStationProvider;","map":{"version":3,"names":["Object","defineProperty","exports","value","MassaStationProvider","MASSA_STATION_PROVIDER_NAME","MASSA_STATION_IMPORT_ACCOUNTS_URL","MASSA_STATION_ACCOUNTS_URL","MASSA_STATION_URL","AccountDeletion_1","require","AccountImport_1","RequestHandler_1","MassaStationAccount_1","constructor","providerName","name","accounts","massaStationAccountsResponse","getRequest","ex","console","error","isError","message","result","map","massaStationAccount","MassaStationAccount","address","nickname","importAccount","publicKey","privateKey","accountImportRequest","putRequest","log","response","EAccountImportResponse","OK","deleteAccount","allAccounts","accountToDelete","find","account","toLowerCase","deleteRequest","EAccountDeletionResponse","ERROR","getNodesUrls","nodesResponse","nodes","Array","url","generateNewAccount","postRequest"],"sources":["/Users/jwmdev/Development/github/massa/massa-sc-examples/age/react/node_modules/@massalabs/wallet-provider/dist/massaStation/MassaStationProvider.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MassaStationProvider = exports.MASSA_STATION_PROVIDER_NAME = exports.MASSA_STATION_IMPORT_ACCOUNTS_URL = exports.MASSA_STATION_ACCOUNTS_URL = exports.MASSA_STATION_URL = void 0;\nconst AccountDeletion_1 = require(\"../provider/AccountDeletion\");\nconst AccountImport_1 = require(\"../provider/AccountImport\");\nconst RequestHandler_1 = require(\"./RequestHandler\");\nconst MassaStationAccount_1 = require(\"./MassaStationAccount\");\n/**\n * MassaStation url\n */\nexports.MASSA_STATION_URL = 'https://station.massa/';\n/**\n * The MassaStation accounts url\n */\nexports.MASSA_STATION_ACCOUNTS_URL = `${exports.MASSA_STATION_URL}plugin/massa-labs/massa-wallet/api/accounts`;\n/**\n * MassaStation's url for importing accounts\n */\nexports.MASSA_STATION_IMPORT_ACCOUNTS_URL = `${exports.MASSA_STATION_ACCOUNTS_URL}/import/`;\n/**\n * MassaStation's wallet provider name\n */\nexports.MASSA_STATION_PROVIDER_NAME = 'MASSASTATION';\n/**\n * This class provides an implementation for communicating with the MassaStation wallet provider.\n * @remarks\n * This class is used as a proxy to the MassaStation server for exchanging message over https calls.\n */\nclass MassaStationProvider {\n    /**\n     * Provider constructor\n     *\n     * @param providerName - The name of the provider.\n     * @returns An instance of the Provider class.\n     */\n    constructor() {\n        this.providerName = exports.MASSA_STATION_PROVIDER_NAME;\n    }\n    /**\n     * This method returns the name of the provider.\n     * @returns The name of the provider.\n     */\n    name() {\n        return this.providerName;\n    }\n    /**\n     * This method sends a message to the MassaStation server to get the list of accounts for the provider.\n     * It returns a Promise that resolves to an array of Account instances.\n     *\n     * @returns A promise that resolves to an array of Account instances.\n     */\n    async accounts() {\n        let massaStationAccountsResponse = null;\n        try {\n            massaStationAccountsResponse = await (0, RequestHandler_1.getRequest)(exports.MASSA_STATION_ACCOUNTS_URL);\n        }\n        catch (ex) {\n            console.error(`MassaStation accounts retrieval error`);\n            throw ex;\n        }\n        if (massaStationAccountsResponse.isError ||\n            massaStationAccountsResponse.error) {\n            throw massaStationAccountsResponse.error.message;\n        }\n        return massaStationAccountsResponse.result.map((massaStationAccount) => {\n            return new MassaStationAccount_1.MassaStationAccount({\n                address: massaStationAccount.address,\n                name: massaStationAccount.nickname,\n            }, this.providerName);\n        });\n    }\n    /**\n     * This method makes an http call to the MassaStation server to import an account with\n     * the given publicKey and privateKey.\n     *\n     * @param publicKey - The public key of the account.\n     * @param privateKey - The private key of the account.\n     *\n     * @returns a Promise that resolves to an instance of IAccountImportResponse.\n     */\n    async importAccount(publicKey, privateKey) {\n        const accountImportRequest = {\n            publicKey,\n            privateKey,\n        };\n        let massaStationAccountsResponse = null;\n        try {\n            massaStationAccountsResponse = await (0, RequestHandler_1.putRequest)(exports.MASSA_STATION_ACCOUNTS_URL, accountImportRequest);\n        }\n        catch (ex) {\n            console.log(`MassaStation accounts retrieval error: ${ex}`);\n            throw ex;\n        }\n        if (massaStationAccountsResponse.isError ||\n            massaStationAccountsResponse.error) {\n            throw massaStationAccountsResponse.error.message;\n        }\n        return {\n            response: AccountImport_1.EAccountImportResponse.OK,\n            message: 'Account imported successfully',\n        };\n    }\n    /**\n     * This method sends an http call to the MassaStation server to delete the account associated with the given address.\n     *\n     * @param address - The address of the account.\n     * @returns a Promise that resolves to an instance of IAccountDeletionResponse.\n     */\n    async deleteAccount(address) {\n        // get all accounts\n        let allAccounts = null;\n        try {\n            allAccounts = await (0, RequestHandler_1.getRequest)(exports.MASSA_STATION_ACCOUNTS_URL);\n        }\n        catch (ex) {\n            console.log(`MassaStation accounts retrieval error: ${ex}`);\n            throw ex;\n        }\n        if (allAccounts.isError || allAccounts.error) {\n            throw allAccounts.error.message;\n        }\n        // find the account with the desired address\n        const accountToDelete = allAccounts.result.find((account) => account.address.toLowerCase() === address.toLowerCase());\n        // delete the account in question\n        let massaStationAccountsResponse = null;\n        try {\n            massaStationAccountsResponse = await (0, RequestHandler_1.deleteRequest)(`${exports.MASSA_STATION_ACCOUNTS_URL}/${accountToDelete.nickname}`);\n        }\n        catch (ex) {\n            console.log(`MassaStation accounts deletion error`, ex);\n            return {\n                response: AccountDeletion_1.EAccountDeletionResponse.ERROR,\n            };\n        }\n        if (massaStationAccountsResponse.isError ||\n            massaStationAccountsResponse.error) {\n            console.log(`MassaStation accounts deletion error`, massaStationAccountsResponse.error.message);\n            return {\n                response: AccountDeletion_1.EAccountDeletionResponse.ERROR,\n            };\n        }\n        return {\n            response: AccountDeletion_1.EAccountDeletionResponse.OK,\n        };\n    }\n    /**\n     * This method sends an http call to the MassaStation server to obtain node urls.\n     *\n     * @returns a Promise that resolves to a list of node urls.\n     */\n    async getNodesUrls() {\n        let nodesResponse = null;\n        try {\n            nodesResponse = await (0, RequestHandler_1.getRequest)(`${exports.MASSA_STATION_URL}massa/node`);\n            if (nodesResponse.isError || nodesResponse.error) {\n                throw nodesResponse.error.message;\n            }\n            // transform nodesResponse.result to a json and then get the \"url\" property\n            const nodes = nodesResponse.result;\n            return Array(nodes.url);\n        }\n        catch (ex) {\n            console.error(`MassaStation nodes retrieval error`, ex);\n            throw ex;\n        }\n    }\n    /**\n     * This method sends an http call to the MassaStation server to create a new random account.\n     *\n     * @returns a Promise that resolves to the details of the newly generated account.\n     */\n    async generateNewAccount(name) {\n        let massaStationAccountsResponse = null;\n        console.log(exports.MASSA_STATION_ACCOUNTS_URL + '/' + name);\n        try {\n            massaStationAccountsResponse = await (0, RequestHandler_1.postRequest)(exports.MASSA_STATION_ACCOUNTS_URL + '/' + name, {});\n            if (massaStationAccountsResponse.isError ||\n                massaStationAccountsResponse.error) {\n                throw massaStationAccountsResponse.error.message;\n            }\n            return {\n                address: massaStationAccountsResponse.result.address,\n                name: massaStationAccountsResponse.result.nickname,\n            };\n        }\n        catch (ex) {\n            console.error(`Error while generating account: ${ex}`);\n            throw ex;\n        }\n    }\n}\nexports.MassaStationProvider = MassaStationProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}