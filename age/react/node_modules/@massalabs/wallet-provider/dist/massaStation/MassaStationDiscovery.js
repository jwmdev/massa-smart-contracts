"use strict";
/**
 * This file defines a TypeScript class named MassaStationDiscovery.
 * The class is being used to recursively search for a connection to MassaStation's server
 * and if so report this via emitting messages.
 *
 * @remarks
 * - If you are only looking to use our library, the connector MassaStationDiscovery will not be useful to you.
 * - If you want to work on this repo, you will probably be interested in this object
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MassaStationDiscovery = exports.ON_MASSA_STATION_DISCONNECTED = exports.ON_MASSA_STATION_DISCOVERED = exports.MASSA_STATION_DISCOVERY_URL = void 0;
const events_1 = require("events");
const time_1 = require("../utils/time");
const RequestHandler_1 = require("./RequestHandler");
/**
 * Url used for the MassaStation discovery and pinging the MassaStation server's index.html
 */
exports.MASSA_STATION_DISCOVERY_URL = 'https://station.massa/web/index';
/**
 * A message emitted on successful MassaStation discovery
 */
exports.ON_MASSA_STATION_DISCOVERED = 'ON_MASSA_STATION_DISCOVERED';
/**
 * A message emitted on MassaStation disconnect
 */
exports.ON_MASSA_STATION_DISCONNECTED = 'ON_MASSA_STATION_DISCONNECTED';
/**
 * This file defines a TypeScript class named MassaStation.
 * The class is being used to recursively ping MassaStation's server
 * and if a response is received emit a message so MassaStation can be enlisted as
 * a wallet provider in the `Connector` class.
 */
class MassaStationDiscovery extends events_1.EventEmitter {
    /**
     * MassaStation constructor
     *
     * @param pollIntervalMillis - Polling interval defined in milliseconds
     *
     * @remarks
     * - It creates a timeout using the given `pollIntervalMillis` argument on every trigger of which
     *  the MassaStation pinging is triggered and if a successful response is fetched,
     * a message `ON_MASSA_STATION_DISCOVERED` is emitted that MassaStation has been discovered
     * as a wallet provider upon which the `Connector` class will enlist MassaStation as a wallet provider
     * - If once found, but then disconnected the following message `ON_MASSA_STATION_DISCONNECTED` is being emitted
     *  so that the `Connector` class delists MassaStation as a wallet provider
     *
     * @returns An instance of the MassaStation class.
     *
     */
    constructor(pollIntervalMillis) {
        super();
        this.pollIntervalMillis = pollIntervalMillis;
        this.timeoutId = null;
        this.isDiscovered = false;
        // bind class methods
        this.callback = this.callback.bind(this);
        this.stopListening = this.stopListening.bind(this);
        this.startListening = this.startListening.bind(this);
    }
    /**
     * A callback method that triggers a ping of the MassaStation's server
     *
     * @returns void
     */
    async callback() {
        let resp = null;
        try {
            resp = await (0, RequestHandler_1.getRequest)(exports.MASSA_STATION_DISCOVERY_URL);
        }
        catch (ex) {
            console.error(`Error calling ${exports.MASSA_STATION_DISCOVERY_URL}`);
        }
        if (!resp.isError && !resp.error) {
            this.isDiscovered = true;
            this.emit(exports.ON_MASSA_STATION_DISCOVERED);
        }
        if ((resp.isError || resp.error) && this.isDiscovered) {
            this.emit(exports.ON_MASSA_STATION_DISCONNECTED);
        }
    }
    /**
     * A method to stop listening for a connection to MassaStation's server
     *
     * @returns void
     */
    stopListening() {
        if (this.timeoutId)
            this.timeoutId.clear();
    }
    /**
     * A method to start listening for a connection to MassaStation's server.
     *
     * @returns void
     */
    startListening() {
        const that = this;
        if (this.timeoutId) {
            return;
        }
        this.timeoutId = new time_1.Timeout(this.pollIntervalMillis, () => that.callback());
    }
}
exports.MassaStationDiscovery = MassaStationDiscovery;
