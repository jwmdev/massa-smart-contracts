"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.putRequest = exports.deleteRequest = exports.postRequest = exports.getRequest = void 0;
/**
 * This file defines a TypeScript module with methods for performing GET, POST and DELETE http requests.
 *
 * @remarks
 * - The methods implemented here are quite generic and might be useful in other contexts too
 *  but have been particularly developed for making http calls specific to MassaStation's server API
 * - If you want to work on this repo, you will probably be interested in this object
 *
 */
const axios_1 = require("axios");
const requestHeaders = {
    Accept: 'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Credentials': true,
    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',
    'Content-Type': 'application/json',
    'Access-Control-Allow-Headers': 'Accept,authorization,Authorization,Content-Type',
};
/**
 * This method makes a GET request to an http rest point.
 *
 *
 * @param url - The url to call.
 * @returns a Promise that resolves to an instance of JsonRpcResponseData.
 *
 */
async function getRequest(url) {
    let resp = null;
    try {
        resp = await axios_1.default.get(url, requestHeaders);
    }
    catch (ex) {
        return {
            isError: true,
            result: null,
            error: new Error('Axios Error: ' + String(ex)),
        };
    }
    return {
        isError: false,
        result: resp.data,
        error: null,
    };
}
exports.getRequest = getRequest;
/**
 * This method makes a POST request to an http rest point.
 *
 *
 * @param url - The url to call.
 * @param body - The body of the request.
 * @returns a Promise that resolves to an instance of JsonRpcResponseData.
 *
 */
async function postRequest(url, body) {
    try {
        const resp = await axios_1.default.post(url, body, requestHeaders);
        return {
            isError: false,
            result: resp.data,
            error: null,
        };
    }
    catch (ex) {
        return {
            isError: true,
            result: null,
            error: ex.response?.data?.message
                ? new Error(String(ex.response.data.message))
                : new Error('Axios error: ' + String(ex)),
        };
    }
}
exports.postRequest = postRequest;
/**
 * This method makes a DELETE request to an http rest point.
 *
 *
 * @param url - The url to call.
 * @returns a Promise that resolves to an instance of JsonRpcResponseData.
 *
 */
async function deleteRequest(url) {
    let resp = null;
    try {
        resp = await axios_1.default.delete(url, requestHeaders);
    }
    catch (ex) {
        return {
            isError: true,
            result: null,
            error: new Error('Axios Error: ' + String(ex)),
        };
    }
    return {
        isError: false,
        result: resp.data,
        error: null,
    };
}
exports.deleteRequest = deleteRequest;
/**
 * This method makes a PUT request to an http rest point.
 *
 *
 * @param url - The url to call.
 * @param body - The body of the request.
 * @returns a Promise that resolves to an instance of JsonRpcResponseData.
 *
 */
async function putRequest(url, body) {
    let resp = null;
    try {
        resp = await axios_1.default.put(url, body, requestHeaders);
    }
    catch (ex) {
        return {
            isError: true,
            result: null,
            error: new Error('Axios error: ' + String(ex)),
        };
    }
    return {
        isError: false,
        result: resp.data,
        error: null,
    };
}
exports.putRequest = putRequest;
