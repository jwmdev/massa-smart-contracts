"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MassaStationProvider = exports.MASSA_STATION_PROVIDER_NAME = exports.MASSA_STATION_IMPORT_ACCOUNTS_URL = exports.MASSA_STATION_ACCOUNTS_URL = exports.MASSA_STATION_URL = void 0;
const AccountDeletion_1 = require("../provider/AccountDeletion");
const AccountImport_1 = require("../provider/AccountImport");
const RequestHandler_1 = require("./RequestHandler");
const MassaStationAccount_1 = require("./MassaStationAccount");
/**
 * MassaStation url
 */
exports.MASSA_STATION_URL = 'https://station.massa/';
/**
 * The MassaStation accounts url
 */
exports.MASSA_STATION_ACCOUNTS_URL = `${exports.MASSA_STATION_URL}plugin/massa-labs/massa-wallet/api/accounts`;
/**
 * MassaStation's url for importing accounts
 */
exports.MASSA_STATION_IMPORT_ACCOUNTS_URL = `${exports.MASSA_STATION_ACCOUNTS_URL}/import/`;
/**
 * MassaStation's wallet provider name
 */
exports.MASSA_STATION_PROVIDER_NAME = 'MASSASTATION';
/**
 * This class provides an implementation for communicating with the MassaStation wallet provider.
 * @remarks
 * This class is used as a proxy to the MassaStation server for exchanging message over https calls.
 */
class MassaStationProvider {
    /**
     * Provider constructor
     *
     * @param providerName - The name of the provider.
     * @returns An instance of the Provider class.
     */
    constructor() {
        this.providerName = exports.MASSA_STATION_PROVIDER_NAME;
    }
    /**
     * This method returns the name of the provider.
     * @returns The name of the provider.
     */
    name() {
        return this.providerName;
    }
    /**
     * This method sends a message to the MassaStation server to get the list of accounts for the provider.
     * It returns a Promise that resolves to an array of Account instances.
     *
     * @returns A promise that resolves to an array of Account instances.
     */
    async accounts() {
        let massaStationAccountsResponse = null;
        try {
            massaStationAccountsResponse = await (0, RequestHandler_1.getRequest)(exports.MASSA_STATION_ACCOUNTS_URL);
        }
        catch (ex) {
            console.error(`MassaStation accounts retrieval error`);
            throw ex;
        }
        if (massaStationAccountsResponse.isError ||
            massaStationAccountsResponse.error) {
            throw massaStationAccountsResponse.error.message;
        }
        return massaStationAccountsResponse.result.map((massaStationAccount) => {
            return new MassaStationAccount_1.MassaStationAccount({
                address: massaStationAccount.address,
                name: massaStationAccount.nickname,
            }, this.providerName);
        });
    }
    /**
     * This method makes an http call to the MassaStation server to import an account with
     * the given publicKey and privateKey.
     *
     * @param publicKey - The public key of the account.
     * @param privateKey - The private key of the account.
     *
     * @returns a Promise that resolves to an instance of IAccountImportResponse.
     */
    async importAccount(publicKey, privateKey) {
        const accountImportRequest = {
            publicKey,
            privateKey,
        };
        let massaStationAccountsResponse = null;
        try {
            massaStationAccountsResponse = await (0, RequestHandler_1.putRequest)(exports.MASSA_STATION_ACCOUNTS_URL, accountImportRequest);
        }
        catch (ex) {
            console.log(`MassaStation accounts retrieval error: ${ex}`);
            throw ex;
        }
        if (massaStationAccountsResponse.isError ||
            massaStationAccountsResponse.error) {
            throw massaStationAccountsResponse.error.message;
        }
        return {
            response: AccountImport_1.EAccountImportResponse.OK,
            message: 'Account imported successfully',
        };
    }
    /**
     * This method sends an http call to the MassaStation server to delete the account associated with the given address.
     *
     * @param address - The address of the account.
     * @returns a Promise that resolves to an instance of IAccountDeletionResponse.
     */
    async deleteAccount(address) {
        // get all accounts
        let allAccounts = null;
        try {
            allAccounts = await (0, RequestHandler_1.getRequest)(exports.MASSA_STATION_ACCOUNTS_URL);
        }
        catch (ex) {
            console.log(`MassaStation accounts retrieval error: ${ex}`);
            throw ex;
        }
        if (allAccounts.isError || allAccounts.error) {
            throw allAccounts.error.message;
        }
        // find the account with the desired address
        const accountToDelete = allAccounts.result.find((account) => account.address.toLowerCase() === address.toLowerCase());
        // delete the account in question
        let massaStationAccountsResponse = null;
        try {
            massaStationAccountsResponse = await (0, RequestHandler_1.deleteRequest)(`${exports.MASSA_STATION_ACCOUNTS_URL}/${accountToDelete.nickname}`);
        }
        catch (ex) {
            console.log(`MassaStation accounts deletion error`, ex);
            return {
                response: AccountDeletion_1.EAccountDeletionResponse.ERROR,
            };
        }
        if (massaStationAccountsResponse.isError ||
            massaStationAccountsResponse.error) {
            console.log(`MassaStation accounts deletion error`, massaStationAccountsResponse.error.message);
            return {
                response: AccountDeletion_1.EAccountDeletionResponse.ERROR,
            };
        }
        return {
            response: AccountDeletion_1.EAccountDeletionResponse.OK,
        };
    }
    /**
     * This method sends an http call to the MassaStation server to obtain node urls.
     *
     * @returns a Promise that resolves to a list of node urls.
     */
    async getNodesUrls() {
        let nodesResponse = null;
        try {
            nodesResponse = await (0, RequestHandler_1.getRequest)(`${exports.MASSA_STATION_URL}massa/node`);
            if (nodesResponse.isError || nodesResponse.error) {
                throw nodesResponse.error.message;
            }
            // transform nodesResponse.result to a json and then get the "url" property
            const nodes = nodesResponse.result;
            return Array(nodes.url);
        }
        catch (ex) {
            console.error(`MassaStation nodes retrieval error`, ex);
            throw ex;
        }
    }
    /**
     * This method sends an http call to the MassaStation server to create a new random account.
     *
     * @returns a Promise that resolves to the details of the newly generated account.
     */
    async generateNewAccount(name) {
        let massaStationAccountsResponse = null;
        console.log(exports.MASSA_STATION_ACCOUNTS_URL + '/' + name);
        try {
            massaStationAccountsResponse = await (0, RequestHandler_1.postRequest)(exports.MASSA_STATION_ACCOUNTS_URL + '/' + name, {});
            if (massaStationAccountsResponse.isError ||
                massaStationAccountsResponse.error) {
                throw massaStationAccountsResponse.error.message;
            }
            return {
                address: massaStationAccountsResponse.result.address,
                name: massaStationAccountsResponse.result.nickname,
            };
        }
        catch (ex) {
            console.error(`Error while generating account: ${ex}`);
            throw ex;
        }
    }
}
exports.MassaStationProvider = MassaStationProvider;
