"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provider = void 0;
const Connector_1 = require("../connector/Connector");
const Account_1 = require("../account/Account");
const __1 = require("..");
/**
 * The Provider class provides a simple and intuitive interface for interacting with a specific
 * wallet service.
 *
 */
class Provider {
    /**
     * Provider constructor
     *
     * @param providerName - The name of the provider.
     * @returns An instance of the Provider class.
     */
    constructor(providerName) {
        this.providerName = providerName;
    }
    /**
     * This method returns the name of the provider.
     * @returns The name of the provider.
     */
    name() {
        return this.providerName;
    }
    /**
     * This method sends a message to the content script to get the list of accounts for the provider.
     * It returns a Promise that resolves to an array of Account instances.
     *
     * @returns A promise that resolves to an array of Account instances.
     */
    async accounts() {
        const providersPromise = new Promise((resolve, reject) => {
            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderListAccounts, {}, (result, err) => {
                if (err)
                    return reject(err);
                return resolve(result);
            });
        });
        const providerAccounts = await providersPromise;
        let accounts = [];
        for (const providerAccount of providerAccounts) {
            const accInstance = new Account_1.Account(providerAccount, this.providerName);
            accounts.push(accInstance);
        }
        return accounts;
    }
    /**
     * This method sends a message to the content script to import an account with the given publicKey and privateKey.
     *
     * @remarks
     * - The IAccountImportResponse object contains the address of the imported account.
     * - The address is generated from the public key.
     *
     * @param publicKey - The public key of the account.
     * @param privateKey - The private key of the account.
     * @returns a Promise that resolves to an instance of IAccountImportResponse.
     *
     */
    async importAccount(publicKey, privateKey) {
        const accountImportRequest = {
            publicKey,
            privateKey,
        };
        return new Promise((resolve, reject) => {
            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderImportAccount, accountImportRequest, (result, err) => {
                if (err)
                    return reject(err);
                return resolve(result);
            });
        });
    }
    /**
     * This method sends a message to the content script to delete the account associated with the given address.
     *
     * @param address - The address of the account.
     * @returns a Promise that resolves to an instance of IAccountDeletionResponse.
     */
    async deleteAccount(address) {
        const accountDeletionRequest = { address };
        return new Promise((resolve, reject) => {
            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderDeleteAccount, accountDeletionRequest, (result, err) => {
                if (err)
                    return reject(err);
                return resolve(result);
            });
        });
    }
    /**
     * This method sends a message to the content script to get the list of nodes urls
     * used to connect the front end to the Massa network.
     *
     * @returns a Promise that resolves to an array of nodes urls (string).
     *
     */
    async getNodesUrls() {
        return new Promise((resolve, reject) => {
            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderGetNodesUrls, {}, (result, err) => {
                if (err)
                    return reject(err);
                return resolve(result);
            });
        });
    }
    /**
     * This method generates a new account by a given name and adds it to the wallet.
     *
     * @param name - The account name
     * @returns a Promise that resolves to an instance of IAccountDetails.
     */
    async generateNewAccount(name) {
        const accountGenerationRequest = { name };
        return new Promise((resolve, reject) => {
            Connector_1.connector.sendMessageToContentScript(this.providerName, __1.AvailableCommands.ProviderGenerateNewAccount, accountGenerationRequest, (result, err) => {
                if (err)
                    return reject(err);
                return resolve(result);
            });
        });
    }
}
exports.Provider = Provider;
