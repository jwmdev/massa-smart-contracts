"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MassaStationAccount = exports.Provider = exports.EAccountImportResponse = exports.EAccountDeletionResponse = exports.Account = exports.registerProvider = exports.providers = exports.AvailableCommands = void 0;
/** Polyfills */
const buffer_1 = require("buffer");
// Check if we are on browser
if (typeof window !== 'undefined') {
    window.Buffer = buffer_1.Buffer;
}
const Connector_1 = require("./connector/Connector");
const Provider_1 = require("./provider/Provider");
const MassaStationProvider_1 = require("./massaStation/MassaStationProvider");
var AvailableCommands;
(function (AvailableCommands) {
    AvailableCommands["ProviderListAccounts"] = "LIST_ACCOUNTS";
    AvailableCommands["ProviderDeleteAccount"] = "DELETE_ACCOUNT";
    AvailableCommands["ProviderImportAccount"] = "IMPORT_ACCOUNT";
    AvailableCommands["ProviderGetNodesUrls"] = "GET_NODES_URLS";
    AvailableCommands["AccountBalance"] = "ACCOUNT_BALANCE";
    AvailableCommands["AccountSign"] = "ACCOUNT_SIGN";
    AvailableCommands["ProviderGenerateNewAccount"] = "GENERATE_NEW_ACCOUNT";
    AvailableCommands["AccountSellRolls"] = "ACCOUNT_SELL_ROLLS";
    AvailableCommands["AccountBuyRolls"] = "ACCOUNT_BUY_ROLLS";
    AvailableCommands["AccountSendTransaction"] = "ACCOUNT_SEND_TRANSACTION";
    AvailableCommands["AccountCallSC"] = "ACCOUNT_CALL_SC";
})(AvailableCommands = exports.AvailableCommands || (exports.AvailableCommands = {}));
/**
 * Get the list of providers that are available to interact with.
 *
 * @param retry - If true, will retry to get the list of providers if none are available.
 * @param pollInterval - The timeout in milliseconds to wait between retries. default is 2000ms.
 * @param timeout - The timeout in milliseconds to wait before giving up. default is 3000ms.
 *
 * @returns An array of providers.
 */
async function providers(retry = true, timeout = 3000, pollInterval = 500) {
    if (timeout <= 0) {
        return [];
    }
    return new Promise((resolve) => {
        let provider = [];
        for (const providerName of Object.keys(Connector_1.connector.getWalletProviders())) {
            if (providerName === MassaStationProvider_1.MASSA_STATION_PROVIDER_NAME) {
                const p = new MassaStationProvider_1.MassaStationProvider();
                provider.push(p);
            }
            else {
                const p = new Provider_1.Provider(providerName);
                provider.push(p);
            }
        }
        // If no providers are available, wait and try again
        if (retry && provider.length === 0) {
            setTimeout(() => {
                providers(retry, timeout - pollInterval, pollInterval).then(resolve);
            }, pollInterval);
        }
        else {
            resolve(provider);
        }
    });
}
exports.providers = providers;
/**
 * Manually register a provider to interact with.
 *
 * @param name - The name of the provider.
 * @param id - The id of the HTML element that is used to communicate with the provider.
 */
function registerProvider(name, id = Connector_1.MASSA_WINDOW_OBJECT) {
    const registerEvent = new CustomEvent('register', {
        detail: { providerName: name },
    });
    const element = document.getElementById(id);
    if (element) {
        element.dispatchEvent(registerEvent);
    }
}
exports.registerProvider = registerProvider;
var account_1 = require("./account");
Object.defineProperty(exports, "Account", { enumerable: true, get: function () { return account_1.Account; } });
var provider_1 = require("./provider");
Object.defineProperty(exports, "EAccountDeletionResponse", { enumerable: true, get: function () { return provider_1.EAccountDeletionResponse; } });
Object.defineProperty(exports, "EAccountImportResponse", { enumerable: true, get: function () { return provider_1.EAccountImportResponse; } });
Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return provider_1.Provider; } });
var MassaStationAccount_1 = require("./massaStation/MassaStationAccount");
Object.defineProperty(exports, "MassaStationAccount", { enumerable: true, get: function () { return MassaStationAccount_1.MassaStationAccount; } });
