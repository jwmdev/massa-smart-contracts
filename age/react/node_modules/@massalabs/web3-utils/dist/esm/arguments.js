import * as ser from './serializers';
/**
 * Typed Arguments facilitating the differentiation
 * between different argument types due to Javascript's
 * single number type.
 *
 * @remarks In AssemblyScript the latter are all native types
 */
export var ArrayType;
(function (ArrayType) {
    ArrayType[ArrayType["STRING"] = 0] = "STRING";
    ArrayType[ArrayType["BOOL"] = 1] = "BOOL";
    ArrayType[ArrayType["U8"] = 2] = "U8";
    ArrayType[ArrayType["U32"] = 3] = "U32";
    ArrayType[ArrayType["U64"] = 4] = "U64";
    ArrayType[ArrayType["U128"] = 5] = "U128";
    ArrayType[ArrayType["U256"] = 6] = "U256";
    ArrayType[ArrayType["I32"] = 7] = "I32";
    ArrayType[ArrayType["I64"] = 8] = "I64";
    ArrayType[ArrayType["F32"] = 9] = "F32";
    ArrayType[ArrayType["F64"] = 10] = "F64";
})(ArrayType || (ArrayType = {}));
/**
 * Storage and serialization class for remote function call arguments.
 *
 * @remarks
 * This class can serialize typescript native types into bytes, in order to
 * make smart-contract function call easier.
 * It also can deserialize bytes.
 *
 */
export class Args {
    offset = 0;
    serialized;
    /**
     * Constructor to either serialize or deserialize data passed from/to DApps and remote Smart contracts.
     *
     * @param serialized - The optional serialized arguments to deserialize.
     * @param offset - The optional offset to start deserializing from.
     */
    constructor(serialized = [], offset = 0) {
        this.serialized = Uint8Array.from(serialized);
        this.offset = offset;
    }
    /**
     * Returns the current deserialization offset of the serialized byte array.
     *
     * @returns the current offset
     */
    getOffset() {
        return this.offset;
    }
    /**
     * Returns the serialized byte array.
     *
     * @returns A byte array.
     */
    serialize() {
        return Array.from(this.serialized);
    }
    // Getters
    /**
     * Returns the next string in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized string
     */
    nextString() {
        const length = this.nextU32();
        const end = this.offset + length;
        const result = ser.bytesToStr(this.serialized.slice(this.offset, end));
        this.offset = end;
        return result;
    }
    /**
     * Returns the next unsigned byte in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number.
     */
    nextU8() {
        const value = ser.byteToU8(this.serialized, this.offset);
        this.offset++;
        return BigInt(value);
    }
    /**
     * Returns the next unsigned integer in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number
     */
    nextU32() {
        const value = ser.bytesToU32(this.serialized, this.offset);
        this.offset += 4;
        return value;
    }
    /**
     * Returns the next long integer in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number.
     */
    nextU64() {
        const value = ser.bytesToU64(this.serialized, this.offset);
        this.offset += 8;
        return value;
    }
    /**
     * Returns the next uint128 in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number.
     */
    nextU128() {
        const value = ser.bytesToU128(this.serialized, this.offset);
        this.offset += 16;
        return value;
    }
    /**
     * Returns the next uint256 in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number.
     */
    nextU256() {
        const value = ser.bytesToU256(this.serialized, this.offset);
        this.offset += 32;
        return value;
    }
    /**
     * Returns the next boolean in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized boolean.
     */
    nextBool() {
        return !!this.serialized[this.offset++];
    }
    /**
     * Returns the next signed integer in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number.
     */
    nextI32() {
        const value = ser.bytesToI32(this.serialized, this.offset);
        this.offset += 4;
        return value;
    }
    /**
     * Returns the next signed long integer in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number.
     */
    nextI64() {
        const value = ser.bytesToI64(this.serialized, this.offset);
        this.offset += 8;
        return BigInt(value);
    }
    /**
     * Returns the next floating number in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number.
     */
    nextF32() {
        const value = ser.bytesToF32(this.serialized, this.offset);
        this.offset += 4;
        return value;
    }
    /**
     * Returns the next long floating number in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized number.
     */
    nextF64() {
        const value = ser.bytesToF64(this.serialized, this.offset);
        this.offset += 8;
        return value;
    }
    /**
     * Returns the next sub byte array in the serialized byte array.
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @returns the deserialized byte array.
     */
    nextUint8Array() {
        const length = this.nextU32();
        const byteArray = this.serialized.slice(this.offset, this.offset + length);
        this.offset += length;
        return byteArray;
    }
    /**
     * Returns the next {@link ISerializable} object in the serialized byte array
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @param ctor - the class constructor prototype T.prototype
     *
     * @returns the deserialized object T
     */
    nextSerializable(ctor) {
        let deserializationResult = ser.deserializeObj(this.serialized, this.offset, ctor);
        this.offset = deserializationResult.offset;
        return deserializationResult.instance;
    }
    /**
     * Returns the next array of {@link ISerializable} objects in the serialized byte array
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @param ctor - the class constructor prototype T.prototype
     *
     * @returns the deserialized array of object that implement ISerializable
     */
    nextSerializableObjectArray(ctor) {
        const length = this.nextU32();
        if (!length) {
            return [];
        }
        if (this.offset + length > this.serialized.length) {
            throw new Error("can't deserialize length of array from given argument");
        }
        const buffer = this.getNextData(length);
        const value = ser.bytesToSerializableObjectArray(buffer, ctor);
        this.offset += length;
        return value;
    }
    /**
     * Returns the next array of {@link ArrayType} objects in the serialized byte array
     *
     * @remarks
     * Increments to offset to point the data after the one that as been deserialized in the byte array.
     *
     * @param type - the type of the elements in the array.
     *
     * @returns the next array of object that are native type
     */
    nextArray(type) {
        const length = this.nextU32();
        if (!length) {
            return [];
        }
        if (this.offset + length > this.serialized.length) {
            throw new Error("can't deserialize length of array from given argument");
        }
        const buffer = this.getNextData(length);
        const value = ser.bytesToArray(buffer, type);
        this.offset += length;
        return value;
    }
    // Setter
    /**
     * Adds a unsigned byte to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addU8(value) {
        this.serialized = Args.concatArrays(this.serialized, ser.u8toByte(value));
        this.offset++;
        return this;
    }
    /**
     * Adds a boolean to the serialized arguments.
     *
     * @param value - the boolean to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addBool(value) {
        this.serialized = Args.concatArrays(this.serialized, ser.u8toByte(value ? 1 : 0));
        this.offset++;
        return this;
    }
    /**
     * Adds an unsigned integer to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addU32(value) {
        this.serialized = Args.concatArrays(this.serialized, ser.u32ToBytes(value));
        this.offset += 4;
        return this;
    }
    /**
     * Adds an unsigned long integer to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addU64(bigInt) {
        this.serialized = Args.concatArrays(this.serialized, ser.u64ToBytes(bigInt));
        this.offset += 8;
        return this;
    }
    /**
     * Adds an unsigned long integer to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addU128(bigInt) {
        this.serialized = Args.concatArrays(this.serialized, ser.u128ToBytes(bigInt));
        this.offset += 16;
        return this;
    }
    /**
     * Adds an unsigned long integer to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addU256(bigInt) {
        this.serialized = Args.concatArrays(this.serialized, ser.u256ToBytes(bigInt));
        this.offset += 32;
        return this;
    }
    /**
     * Adds a signed integer to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addI32(value) {
        this.serialized = Args.concatArrays(this.serialized, ser.i32ToBytes(value));
        this.offset += 4;
        return this;
    }
    /**
     * Adds a signed long integer to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addI64(bigInt) {
        this.serialized = Args.concatArrays(this.serialized, ser.i64ToBytes(bigInt));
        this.offset += 8;
        return this;
    }
    /**
     * Adds a floating number to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addF32(value) {
        this.serialized = Args.concatArrays(this.serialized, ser.f32ToBytes(value));
        this.offset += 4;
        return this;
    }
    /**
     * Adds a long floating number to the serialized arguments.
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addF64(value) {
        this.serialized = Args.concatArrays(this.serialized, ser.f64ToBytes(value));
        this.offset += 8;
        return this;
    }
    /**
     * Adds a byte array integer to the serialized arguments.
     *
     * @param array - the array to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addUint8Array(array) {
        this.addU32(array.length);
        this.serialized = Args.concatArrays(this.serialized, array);
        this.offset += array.length;
        return this;
    }
    /**
     * Adds a string to the serialized arguments.
     *
     * @remarks
     * Works only if the argument is an instance of a handled type (String of 4294967295 characters maximum)
     *
     * @param value - the number to add.
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addString(arg) {
        const maxSize = 4294967295;
        const size = arg.length;
        if (size > maxSize) {
            console.warn('input string is too long, it will be truncated');
            arg = arg.slice(0, maxSize);
        }
        const serialized = ser.strToBytes(arg);
        this.addU32(serialized.length);
        this.serialized = Args.concatArrays(this.serialized, ser.strToBytes(arg));
        return this;
    }
    /**
     * Adds a serializable object to the serialized arguments.
     *
     * @remarks
     * The object must implement the {@link ISerializable} interface
     *
     * @see {@link ISerializable}
     *
     * @param value - the object to add
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addSerializable(value) {
        const serializedValue = value.serialize();
        this.serialized = Args.concatArrays(this.serialized, serializedValue);
        this.offset += serializedValue.length;
        return this;
    }
    /**
     * Adds an array of serializable objects to the serialized arguments.
     *
     * @remarks
     * Each object must implement the {@link ISerializable} interface.
     * This will perform a deep copy of your objects thanks to the {@link ISerializable.serialize}
     * method you define in your class.
     *
     * @see {@link ISerializable}
     *
     * @param arg - the argument to add
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addSerializableObjectArray(arg) {
        const content = ser.serializableObjectsArrayToBytes(arg);
        this.addU32(content.length);
        this.serialized = Args.concatArrays(this.serialized, content);
        return this;
    }
    /**
     * Adds an array of objects to the serialized arguments.
     *
     * @remarks
     * If the type of the values of the array is not native type, this will serialize the pointers, which is certainly
     * not what you want! You can only serialize properly array of native types or array of `Serializable` object.
     *
     * @see {@link addSerializableObjectArray}
     *
     * @param arg - the argument to add
     *
     * @returns the serialized arguments to be able to chain `add` method calls.
     */
    addArray(arg, type) {
        const content = ser.arrayToBytes(arg, type);
        this.addU32(content.length);
        this.serialized = Args.concatArrays(this.serialized, content);
        return this;
    }
    // Utils
    /**
     * Internal function to concat to Uint8Array.
     *
     * @param a - first array to concat
     * @param b - second array to concat
     *
     * @returns the concatenated array
     */
    static concatArrays(a, b) {
        return new Uint8Array([...a, ...b]);
    }
    /**
     * Returns the data of requested size for current offset
     *
     * @param size - The data size
     * @returns the slice of the serialized internal buffer
     */
    getNextData(size) {
        return this.serialized.slice(this.offset, this.offset + size);
    }
}
//# sourceMappingURL=arguments.js.map