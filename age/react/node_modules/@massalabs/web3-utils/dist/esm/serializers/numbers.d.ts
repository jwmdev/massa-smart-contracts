/**
 * This module aim's to provide number variable types serialization and conversion helper functions.
 */
/**
 * Converts an unsigned 8-bit integer (u8) into a Uint8Array.
 *
 * @param val - The number to convert
 *
 * @throws Will throw an error if the input value is not within the valid u8 range (0 to 255)
 *
 * @returns A Uint8Array containing the serialized u8 value
 *
 */
export declare function u8toByte(val: number): Uint8Array;
/**
 * Converts a Uint8Array into an unsigned 8-bit integer (u8).
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the u8 value (default: 0)
 *
 * @returns The deserialized u8 value
 *
 */
export declare function byteToU8(arr: Uint8Array, offset?: number): number;
/**
 * Converts an unsigned 32-bit integer (u32) into a Uint8Array.
 *
 * @param val - The number to convert
 *
 * @throws Will throw an error if the input value is not within the valid u32 range (0 to 4,294,967,295)
 *
 * @returns A Uint8Array containing the serialized u32 value
 *
 */
export declare function u32ToBytes(val: number): Uint8Array;
/**
 * Converts a Uint8Array into an unsigned 32-bit integer (u32).
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the u32 value (default: 0)
 *
 * @returns The deserialized u32 value
 *
 */
export declare function bytesToU32(arr: Uint8Array, offset?: number): number;
/**
 * Converts an unsigned 64-bit integer (u64) BigInt into a Uint8Array.
 *
 * @param val - The BigInt to convert
 *
 * @throws Will throw an error if the input value is not within the valid u64 range (0 to 18,446,744,073,709,551,615)
 *
 * @returns A Uint8Array containing the serialized u64 BigInt value
 *
 */
export declare function u64ToBytes(val: bigint): Uint8Array;
/**
 * Converts a Uint8Array into an unsigned 64-bit integer (u64) BigInt.
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the u64 value (default: 0)
 *
 * @returns The deserialized u64 BigInt value
 *
 */
export declare function bytesToU64(arr: Uint8Array, offset?: number): bigint;
/**
 * Converts an unsigned 128-bit integer (u128) BigInt into a Uint8Array.
 *
 * @param val - The BigInt to convert
 *
 * @throws Will throw an error if the input value is not within the valid u128 range (0 to 340282366920938463463374607431768211455)
 *
 * @returns A Uint8Array containing the serialized u128 BigInt value
 *
 */
export declare function u128ToBytes(val: bigint): Uint8Array;
/**
 * Converts a Uint8Array into an unsigned 128-bit integer (u128) BigInt.
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the u128 value (default: 0)
 *
 * @returns The deserialized u128BigInt value
 *
 */
export declare function bytesToU128(arr: Uint8Array, offset?: number): bigint;
/**
 * Converts an unsigned 256-bit integer (u256) BigInt into a Uint8Array.
 *
 * @param val - The BigInt to convert
 *
 * @throws Will throw an error if the input value is not within the valid u256 range (0 to 340282366920938463463374607431768211455)
 *
 * @returns A Uint8Array containing the serialized u256 BigInt value
 *
 */
export declare function u256ToBytes(val: bigint): Uint8Array;
/**
 * Converts a Uint8Array into an unsigned 256-bit integer (u256) BigInt.
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the u256 value (default: 0)
 *
 * @returns The deserialized u256BigInt value
 *
 */
export declare function bytesToU256(arr: Uint8Array, offset?: number): bigint;
/**
 * Converts a signed 32-bit integer (i32) into a Uint8Array.
 *
 * @param val - The number to convert
 *
 * @throws Will throw an error if the input value is not within the valid i32 range (-2,147,483,648 to 2,147,483,647)
 *
 * @returns A Uint8Array containing the serialized i32 value
 *
 */
export declare function i32ToBytes(val: number): Uint8Array;
/**
 * Converts a Uint8Array into a signed 32-bit integer (i32).
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the i32 value (default: 0)
 *
 * @returns The deserialized i32 value
 *
 */
export declare function bytesToI32(arr: Uint8Array, offset?: number): number;
/**
 * Converts a i64 BigInt in a Uint8Array.
 *
 * @param val - The BigInt to convert
 *
 * @throws Will throw an error if the input value is not within the valid i64 range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)
 *
 * @returns A Uint8Array containing the serialized i64 BigInt value
 *
 */
export declare function i64ToBytes(val: bigint): Uint8Array;
/**
 * Converts a Uint8Array into a i64 BigInt.
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the i64 value (default: 0)
 *
 * @returns The deserialized i64 BigInt value
 *
 */
export declare function bytesToI64(arr: Uint8Array, offset?: number): bigint;
/**
 * Converts a 32-bit floating-point number (f32) into a Uint8Array.
 *
 * @param val - The number to convert
 *
 * @returns A Uint8Array containing the serialized f32 value
 *
 */
export declare function f32ToBytes(val: number): Uint8Array;
/**
 * Converts a Uint8Array into a 32-bit floating-point number (f32).
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the f32 value (default: 0)
 *
 * @returns The deserialized f32 value
 *
 */
export declare function bytesToF32(arr: Uint8Array, offset?: number): number;
/**
 * Converts a 64-bit floating-point number (f64) into a Uint8Array.
 *
 * @param val - The BigInt to convert
 *
 * @returns A Uint8Array containing the serialized f64 value
 *
 */
export declare function f64ToBytes(val: number): Uint8Array;
/**
 * Converts a Uint8Array into a f64 BigInt.
 *
 * @param arr - The array to convert
 * @param offset - The optional offset in the Uint8Array at which to start reading the f64 value (default: 0)
 *
 * @returns The deserialized f64 value
 *
 */
export declare function bytesToF64(arr: Uint8Array, offset?: number): number;
