/// <reference types="node" />
import { IClientConfig } from '../interfaces/IClientConfig';
import { IAccount } from '../interfaces/IAccount';
import { BaseClient } from './BaseClient';
import { IFullAddressInfo } from '../interfaces/IFullAddressInfo';
import { ISignature } from '../interfaces/ISignature';
import { ITransactionData } from '../interfaces/ITransactionData';
import { PublicApiClient } from './PublicApiClient';
import { IRollsData } from '../interfaces/IRollsData';
import { IBalance } from '../interfaces/IBalance';
import { IWalletClient } from '../interfaces/IWalletClient';
import { IBaseAccount } from '../interfaces/IBaseAccount';
/**
 * A client class for interacting with wallets, which can seamlessly work with WebExtensions.
 *
 * @remarks
 * The WalletClient manages multiple accounts and handles operations such as transaction signing,
 * fetching account information, and interacting with the blockchain. It extends the BaseClient
 * class and implements the IWalletClient interface.
 */
export declare class WalletClient extends BaseClient implements IWalletClient {
    private readonly publicApiClient;
    private wallet;
    private baseAccount?;
    /**
     * Constructor of the {@link WalletClient} class.
     *
     * @param clientConfig - Configuration parameters for the client.
     * @param publicApiClient - A {@link PublicApiClient} instance used for making API calls.
     * @param baseAccount - (Optional) An {@link IAccount} to set as the base account for the wallet.
     */
    constructor(clientConfig: IClientConfig, publicApiClient: PublicApiClient, baseAccount?: IBaseAccount);
    /**
     * Sets a provided account as the default (base) account for the wallet.
     *
     * @param baseAccount - An {@link IAccount} to be set as the base account.
     *
     * @returns A Promise that resolves to `void` when the base account has been set successfully.
     */
    setBaseAccount(baseAccount: IBaseAccount): Promise<void>;
    /**
     * Retrieves the default (base) account of the wallet.
     *
     * @returns The default {@link IAccount} of the wallet. If no default account is set, it returns `null`.
     */
    getBaseAccount(): IBaseAccount | null;
    /**
     * Retrieves all accounts stored in the wallet.
     *
     * @returns An array of {@link IAccount} objects.
     */
    getWalletAccounts(): Array<IAccount>;
    /**
     * Removes all accounts from the wallet.
     */
    cleanWallet(): void;
    /**
     * Retrieves a wallet account based on its address.
     *
     * @param address - The address of the account to retrieve.
     *
     * @returns The {@link IAccount} associated with the provided address
     * or `undefined` if no account with the given address is found in the wallet.
     */
    getWalletAccountByAddress(address: string): IAccount | undefined;
    /**
     * Adds a set of private keys to the wallet.
     *
     * @param secretKeys - An array of base58 encoded private keys to be added to the wallet.
     *
     * @throws if the number of private keys exceeds the maximum limit.
     *
     * @returns A Promise that resolves to an array of {@link IAccount} objects.
     */
    addSecretKeysToWallet(secretKeys: Array<string>): Promise<Array<IAccount>>;
    /**
     * Adds a set of accounts to the wallet.
     *
     * @privateRemarks
     * Each account must have a base58 encoded random entropy or private key.
     *
     * @param accounts - An array of accounts ({@link IAccount} objects) to be added to the wallet.
     *
     * @throws
     * - If the number of accounts exceeds the {@link MAX_WALLET_ACCOUNTS} limit
     * - If an account is missing a private key
     * - If a submitted public key doesn't correspond to the associated private key
     * - If an account address doesn't correspond to the private key-derived address
     *
     * @returns A Promise that resolves to an array of {@link IAccount} objects.
     */
    addAccountsToWallet(accounts: Array<IAccount>): Promise<Array<IAccount>>;
    /**
     * Remove a list of addresses from the wallet.
     *
     * @param addresses - An array of addresses to remove from the wallet.
     */
    removeAddressesFromWallet(addresses: Array<string>): void;
    /**
     * Retrieves detailed information about the wallet.
     *
     * @throws Will throw an error if the number of retrieved wallets does not match the number of addresses in the wallet.
     *
     * @returns A Promise that resolves to an array of {@link IFullAddressInfo} objects.
     */
    walletInfo(): Promise<Array<IFullAddressInfo>>;
    /**
     * Generates a new wallet account.
     * @param version_number - The version number of the secret key to be generated, to create a new account.
     *
     * @returns A Promise that resolves to an {@link IAccount} object, which represents the newly created account.
     */
    static walletGenerateNewAccount(): Promise<IAccount>;
    /**
     * Generates an account from a given private key.
     *
     * @param secretKeyBase58 - A base58 encoded private key from which the account will be generated.
     *
     * @returns A Promise that resolves to an {@link IAccount} object.
     */
    static getAccountFromSecretKey(secretKeyBase58: string): Promise<IAccount>;
    /**
     * Signs a random message data using a wallet account that has already been added.
     *
     * @param data - The data to be signed.
     * @param accountSignerAddress - The address of the wallet account that will sign the data.
     *
     * @throws Will throw an error if the account associated with the provided address is not found in the wallet.
     *
     * @returns A Promise that resolves to an {@link ISignature} object representing the signature.
     */
    signMessage(data: string | Buffer, accountSignerAddress: string): Promise<ISignature>;
    /**
     * Retrieves information about specified wallet addresses.
     *
     * @param addresses - An array of wallet addresses for which information is to be retrieved.
     *
     * @returns A Promise that resolves to an array of {@link IAddressInfo} objects, each containing
     * information about a corresponding wallet address.
     */
    private getWalletAddressesInfo;
    /**
     * Signs the provided data with the given address.
     *
     * @remarks
     * The address must be present in the wallet.
     *
     * @param data - The data to be signed.
     * @param signer - The account that will be used to sign the data.
     *
     * @throws
     * - if no private key is available for signing the message.
     * - if no public key is available for verifying the signed message.
     * - if the length of the generated signature is not valid.
     * - if the signature could not be verified with the public key.
     *
     * @returns A Promise that resolves to an {@link ISignature} object representing the signature.
     */
    static walletSignMessage(data: string | Buffer, signer: IBaseAccount): Promise<ISignature>;
    /**
     * Verify a signature.
     *
     * @param data - The signed data to verify.
     * @param signature - The signature to verify.
     * @param signerPubKey - The public key of the signer.
     *
     * @returns A Promise that resolves to `true` if the signature is valid, `false` otherwise.
     */
    verifySignature(data: string | Buffer, signature: ISignature, signerPubKey: string): Promise<boolean>;
    /**
     * Retrieves the balance of an account.
     *
     * @param address - The address to get the balance from.
     *
     * @returns A Promise that resolves to an {@link IBalance}. If the address is not found,
     * it returns `null`.
     */
    getAccountBalance(address: string): Promise<IBalance | null>;
    /**
     * Sends native MAS from a wallet address to another.
     *
     * @param txData - The transaction data.
     * @param executor - (Optional) The account that will execute the transaction. If not
     * provided, the base account is used.
     *
     * @throws if no sender account is available for the transaction.
     *
     * @returns a promise that resolves to an array of operations ids.
     */
    sendTransaction(txData: ITransactionData, executor?: IBaseAccount): Promise<Array<string>>;
    /**
     * Buy rolls with wallet address.
     *
     * @param txData - The transaction data
     * @param executor - (Optional) The account that will execute the transaction.
     * If not specified, the base account is used by default.
     *
     * @throws if no sender account is available for the transaction.
     *
     * @returns a promise that resolves to an array of operations ids.
     */
    buyRolls(txData: IRollsData, executor?: IBaseAccount): Promise<Array<string>>;
    /**
     * Sell rolls with wallet address.
     *
     * @param txData - The transaction data.
     * @param executor - (Optional) The account that will execute the transaction.
     * If not specified, the base account is used by default.
     *
     * @throws if no sender account is available for the transaction.
     *
     * @returns a promise that resolves to an array of operations ids.
     */
    sellRolls(txData: IRollsData, executor?: IBaseAccount): Promise<Array<string>>;
}
