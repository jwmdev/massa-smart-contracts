"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletProviderAccount = void 0;
const Xbqcrypto_1 = require("../../utils/Xbqcrypto");
class WalletProviderAccount {
    constructor(account) {
        this.account = account;
    }
    async sign(data) {
        let bytes_signature = (await this.account.sign(data)).signature;
        const base58Encoded = (0, Xbqcrypto_1.base58Encode)(bytes_signature);
        return {
            base58Encoded,
        };
    }
    address() {
        return this.account.address();
    }
    async sellRolls(rollsData) {
        let res = await this.account.sellRolls(rollsData.amount, rollsData.fee);
        return res.operationId;
    }
    async buyRolls(rollsData) {
        let res = await this.account.buyRolls(rollsData.amount, rollsData.fee);
        return res.operationId;
    }
    async sendTransaction(txData) {
        let res = await this.account.sendTransaction(txData.amount, txData.recipientAddress, txData.fee);
        return res.operationId;
    }
    async callSmartContract(callData) {
        let res = await this.account.callSC(callData.targetAddress, callData.functionName, new Uint8Array(callData.parameter), callData.coins, callData.fee, callData.maxGas, false);
        return res.operationId;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async deploySmartContract(_) {
        throw new Error('deploySmartContract with an account from WalletProvider is not implemented yet.');
    }
    async verify() {
        return;
    }
}
exports.WalletProviderAccount = WalletProviderAccount;
//# sourceMappingURL=WalletProviderAccount.js.map