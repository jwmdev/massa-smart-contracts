"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const PrivateApiClient_1 = require("./PrivateApiClient");
const PublicApiClient_1 = require("./PublicApiClient");
const WalletClient_1 = require("./WalletClient");
const SmartContractsClient_1 = require("./SmartContractsClient");
const IProvider_1 = require("../interfaces/IProvider");
/**
 * Massa Web3 Client object wraps all public, private, wallet and smart-contracts-related functionalities.
 */
class Client {
    /**
     * Constructor of the Client class.
     *
     * @param clientConfig - client configuration object.
     * @param baseAccount - base account to use for signing transactions (optional).
     */
    constructor(clientConfig, baseAccount, publicApiClient) {
        this.clientConfig = clientConfig;
        this.publicApiClient = publicApiClient || new PublicApiClient_1.PublicApiClient(clientConfig);
        this.privateApiClient = new PrivateApiClient_1.PrivateApiClient(clientConfig);
        this.walletClient = new WalletClient_1.WalletClient(clientConfig, this.publicApiClient, baseAccount);
        this.smartContractsClient = new SmartContractsClient_1.SmartContractsClient(clientConfig, this.publicApiClient, this.walletClient);
        // subclients
        this.privateApi = this.privateApi.bind(this);
        this.publicApi = this.publicApi.bind(this);
        this.wallet = this.wallet.bind(this);
        this.smartContracts = this.smartContracts.bind(this);
        // setters
        this.setCustomProviders = this.setCustomProviders.bind(this);
        this.setNewDefaultProvider = this.setNewDefaultProvider.bind(this);
        // getters
        this.getProviders = this.getProviders.bind(this);
        this.getPrivateProviders = this.getPrivateProviders.bind(this);
        this.getPublicProviders = this.getPublicProviders.bind(this);
    }
    /**
     * Get the private api related RPC methods.
     *
     * @returns PrivateApiClient object.
     */
    privateApi() {
        return this.privateApiClient;
    }
    /**
     * Get the public api related RPC methods.
     *
     * @returns PublicApiClient object.
     */
    publicApi() {
        return this.publicApiClient;
    }
    /**
     * Get the Wallet related methods.
     *
     * @returns WalletClient object.
     */
    wallet() {
        return this.walletClient;
    }
    /**
     * Get the smart Contracts related methods.
     *
     * @returns SmartContractsClient object.
     */
    smartContracts() {
        return this.smartContractsClient;
    }
    /**
     * Set new providers.
     *
     * @param providers - array of providers to set.
     */
    setCustomProviders(providers) {
        this.publicApiClient.setProviders(providers);
        this.privateApiClient.setProviders(providers);
        this.walletClient.setProviders(providers);
        this.smartContractsClient.setProviders(providers);
    }
    /**
     * Get the currently set providers.
     *
     * @returns array of the known providers.
     */
    getProviders() {
        return this.clientConfig.providers;
    }
    /**
     * Get all private providers.
     *
     * @returns all private providers.
     */
    getPrivateProviders() {
        return this.clientConfig.providers.filter((provider) => provider.type === IProvider_1.ProviderType.PRIVATE);
    }
    /**
     * Get all public providers
     *
     * @returns all public providers
     */
    getPublicProviders() {
        return this.clientConfig.providers.filter((provider) => provider.type === IProvider_1.ProviderType.PUBLIC);
    }
    /**
     * Set a new default json rpc provider.
     *
     * @param provider - The new default provider to set.
     */
    setNewDefaultProvider(provider) {
        const providers = [
            {
                url: provider,
                type: IProvider_1.ProviderType.PUBLIC,
            },
            {
                url: provider,
                type: IProvider_1.ProviderType.PRIVATE,
            },
        ];
        this.publicApiClient.setProviders(providers);
        this.privateApiClient.setProviders(providers);
        this.walletClient.setProviders(providers);
        this.smartContractsClient.setProviders(providers);
    }
}
exports.Client = Client;
//# sourceMappingURL=Client.js.map