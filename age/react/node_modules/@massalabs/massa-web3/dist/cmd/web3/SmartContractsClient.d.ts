/**
 * This file includes the implementation for the {@link SmartContractsClient} class. This class provides methods for interacting with smart contracts
 * in the Massa blockchain. Such methods include {@link SmartContractsClient#deploySmartContract|deploying}, {@link SmartContractsClient#callSmartContract|calling},
 * and {@link SmartContractsClient#readSmartContract|reading} smart contracts, as well as retrieving smart contract {@link SmartContractsClient#getFilteredScOutputEvents|events}
 * and {@link SmartContractsClient#getContractBalance|balances}.
 *
 * @module SmartContractsClient
 */
import { EOperationStatus } from '../interfaces/EOperationStatus';
import { IBalance } from '../interfaces/IBalance';
import { ICallData } from '../interfaces/ICallData';
import { IClientConfig } from '../interfaces/IClientConfig';
import { IContractData } from '../interfaces/IContractData';
import { IContractReadOperationResponse } from '../interfaces/IContractReadOperationResponse';
import { IEvent } from '../interfaces/IEvent';
import { IEventFilter } from '../interfaces/IEventFilter';
import { IExecuteReadOnlyResponse } from '../interfaces/IExecuteReadOnlyResponse';
import { IReadData } from '../interfaces/IReadData';
import { ISmartContractsClient } from '../interfaces/ISmartContractsClient';
import { BaseClient } from './BaseClient';
import { PublicApiClient } from './PublicApiClient';
import { IWalletClient } from '../interfaces/IWalletClient';
import { IBaseAccount } from '../interfaces/IBaseAccount';
/**
 * The key name (as a string) to look for when we are retrieving the proto file from a contract
 */
export declare const MASSA_PROTOFILE_KEY = "protoMassa";
/**
 * The separator used to split the proto file content into separate proto files
 */
export declare const PROTO_FILE_SEPARATOR = "|||||";
/**
 * Smart Contracts Client object enables smart contract deployment, calls and streaming of events.
 */
export declare class SmartContractsClient extends BaseClient implements ISmartContractsClient {
    private readonly publicApiClient;
    private readonly walletClient;
    /**
     * Constructor for {@link SmartContractsClient} objects.
     */
    constructor(clientConfig: IClientConfig, publicApiClient: PublicApiClient, walletClient: IWalletClient);
    /**
     * Deploy a smart contract on th massa blockchain by creating and sending
     * an operation containing byte code.
     *
     * @remarks
     * If no executor is provided, the default wallet account from the provided {@link WalletClient}
     * will be used.
     *
     * @param contractData - The deployment contract data.
     * @param executor - The account to use for the deployment.
     *
     * @returns A promise that resolves to the operation ID of the deployment operation.
     */
    deploySmartContract(contractData: IContractData, executor?: IBaseAccount): Promise<string>;
    /**
     * Calls a smart contract method.
     *
     * @remarks
     * If no executor is provided, the default wallet account will be used.
     *
     * @param callData -  The data required for the smart contract call.
     * @param executor - The account that will execute the call (default: the default
     * wallet account from {@link WalletClient}).
     *
     * @returns A promise that resolves to the operation ID of the call operation as a string.
     */
    callSmartContract(callData: ICallData, executor?: IBaseAccount): Promise<string>;
    /**
     * Execute a dry run Smart contract call and returns some data regarding its execution
     * such as the changes of in the states that would have happen if the transaction was really executed on chain.
     *
     * @param readData - The data required for the a read operation of a smart contract.
     *
     * @returns A promise that resolves to an object which represents the result of the operation and contains data about its execution.
     */
    readSmartContract(readData: IReadData): Promise<IContractReadOperationResponse>;
    /**
     * Returns the balance of the smart contract.
     *
     * @param address - The address of the smart contract.
     *
     * @returns A promise that resolves to the balance of the smart contract.
     */
    getContractBalance(address: string): Promise<IBalance | null>;
    /**
     * Get filtered smart contract output events.
     *
     * @param eventFilterData - The filter data for the events.
     *
     * @returns A promise that resolves to an array of IEvent objects containing the filtered events.
     */
    getFilteredScOutputEvents(eventFilterData: IEventFilter): Promise<Array<IEvent>>;
    /**
     * Send a read-only smart contract execution request.
     *
     * @remarks
     * This method is used to dry-run a smart contract execution and get the changes of the states that would
     * have happen if the transaction was really executed on chain.
     * This operation does not modify the blockchain state.
     *
     * @param contractData - The data required for the operation.
     *
     * @returns A promise which resolves to an object containing data about the operation.
     *
     * @throws
     * - If the contract binary data is missing.
     * - If the contract contract address is missing.
     * - If the result is empty.
     * - If the result contains an error.
     */
    executeReadOnlySmartContract(contractData: IContractData): Promise<IExecuteReadOnlyResponse>;
    /**
     * Get the status of a specific operation.
     *
     * @param opId - The operation id.
     *
     * @returns A promise that resolves to the status of the operation.
     */
    getOperationStatus(opId: string): Promise<EOperationStatus>;
    /**
     * Get the status of a specific operation and wait until it reaches the required status.
     *
     * @param opId - The required operation id.
     * @param requiredStatus - The required status.
     *
     * @returns A promise that resolves to the status of the operation.
     */
    awaitRequiredOperationStatus(opId: string, requiredStatus: EOperationStatus): Promise<EOperationStatus>;
}
