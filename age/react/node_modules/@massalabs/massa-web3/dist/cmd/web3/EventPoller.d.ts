/// <reference types="node" />
import { EventEmitter } from 'events';
import { IEvent } from '../interfaces/IEvent';
import { IEventFilter } from '../interfaces/IEventFilter';
import { IEventRegexFilter } from '../interfaces/IEventRegexFilter';
import { Client } from './Client';
/** Smart Contracts Event Poller */
export declare const ON_MASSA_EVENT_DATA = "ON_MASSA_EVENT";
export declare const ON_MASSA_EVENT_ERROR = "ON_MASSA_ERROR";
/**
 * The EventPoller class provides a convenient way to poll events from the Massa network.
 */
export declare class EventPoller extends EventEmitter {
    private readonly eventsFilter;
    private readonly pollIntervalMillis;
    private readonly web3Client;
    private timeoutId;
    private lastSlot;
    /**
     * Constructor of the EventPoller object.
     *
     * @param eventsFilter - The filter to use for the events.
     * @param pollIntervalMillis - The interval in milliseconds to poll for events.
     * @param web3Client - The web3 client to use for polling.
     */
    constructor(eventsFilter: IEventFilter | IEventRegexFilter, pollIntervalMillis: number, web3Client: Client);
    /**
     * Polls for new events that match a specified filter and emits them.
     *
     * @remarks
     * It uses the Web3 client to retrieve events from a smart contract and filters them further.
     * based on regular expression and last scanned slot.
     * If any matching events are found, it sorts them based on the highest period and thread and emits them.
     */
    private callback;
    /**
     * Stops polling for events.
     */
    stopPolling(): void;
    /**
     * Starts polling for events.
     */
    startPolling(): void;
    /**
     * Starts polling for events and returns the EventPoller object.
     *
     * @param eventsFilter - The filter to use for the events.
     * @param pollIntervalMillis - The interval in milliseconds to poll for events.
     * @param web3Client - The web3 client to use for polling.
     * @param onData - The callback function to call when new events are found.
     * @param onError - The callback function to call when an error occurs.
     *
     * @returns The EventPoller object created.
     */
    static startEventsPolling(eventsFilter: IEventFilter | IEventRegexFilter, pollIntervalMillis: number, web3Client: Client, onData?: (data: Array<IEvent>) => void, onError?: (err: Error) => void): EventPoller;
    /**
     * Get only the events that match the filter once.
     *
     * @param eventsFilter - The filter to use for the events.
     * @param web3Client - The web3 client to use for polling.
     *
     * @returns The events that match the filter as a promise.
     */
    static getEventsOnce(eventsFilter: IEventFilter | IEventRegexFilter, web3Client: Client): Promise<Array<IEvent>>;
}
