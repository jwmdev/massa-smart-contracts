"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.varintDecode = exports.varintEncode = exports.base58Decode = exports.base58Encode = exports.hashBlake3 = void 0;
const tslib_1 = require("tslib");
const varint = tslib_1.__importStar(require("varint"));
const blake3_1 = require("@noble/hashes/blake3");
/**
 * A collection of utility functions for working with various data encoding and hashing formats.
 *
 * This module provides several functions for encoding and decoding data in various formats, including
 * `base58`, `varint`, and `blake3 hashes`.
 *
 * @module Xbqcrypto.ts
 */
const encode_decode_int_1 = require("./encode_decode_int");
const bs58check_1 = require("bs58check");
/**
 * Hashes data with blake3
 *
 * @param data - The data to hash
 *
 * @returns The hash of the data with blake3
 */
function hashBlake3(data) {
    return (0, blake3_1.blake3)(data);
}
exports.hashBlake3 = hashBlake3;
/**
 * Encodes a buffer or an Uint8Array to base58
 *
 * @param data - The data to encode
 *
 * @returns The base58 encoded data as a string
 */
function base58Encode(data) {
    return (0, bs58check_1.encode)(data);
}
exports.base58Encode = base58Encode;
/**
 * Decode a base58 encoded string to a buffer
 *
 * @param data - The base58 encoded string
 *
 * @returns The decoded buffer
 */
function base58Decode(data) {
    const decoded = (0, bs58check_1.decode)(data);
    return Buffer.from(decoded);
}
exports.base58Decode = base58Decode;
/**
 * Encodes a number or bigint to a varint encoded Uint8Array.
 *
 * @param data - The data to encode
 *
 * @returns The varint encoded data as a Uint8Array
 */
function varintEncode(data) {
    if (typeof data === 'bigint') {
        return encode_decode_int_1.unsignedBigIntUtils.encode(data);
    }
    return varint.encode(data);
}
exports.varintEncode = varintEncode;
/**
 * Decodes a varint encoded Uint8Array to a number
 *
 * @param data - The varint encoded Uint8Array
 *
 * @returns The decoded number and the number of bytes read
 */
function varintDecode(data) {
    const value = varint.decode(data);
    const bytes = varint.decode.bytes;
    return { value, bytes };
}
exports.varintDecode = varintDecode;
//# sourceMappingURL=Xbqcrypto.js.map