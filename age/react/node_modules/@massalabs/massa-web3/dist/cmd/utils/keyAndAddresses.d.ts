/**
 * A secret key.
 * The secret key object is created from a base58 encoded string representing the secret key.
 *
 * @remarks
 * - String representation is S + base58Check(version_bytes + secret_key_hash_bytes)
 * - bytes attribute is the Uint8Array representation of the secret key.
 */
export declare class SecretKey {
    version: number;
    private bytes;
    constructor(secretKeyBase58Encoded: string);
    getPublicKey(): Promise<PublicKey>;
    signDigest(messageHashDigest: Uint8Array): Promise<Uint8Array>;
}
/**
 * The PublicKey class represents a cryptographic public key.
 *
 * @remarks
 * - The public key is derived from the secret key and got the same version as the secret key.
 * - String representation is P + base58Check(version_bytes + public_key_hash_bytes)
 * - bytes attribute is the Uint8Array representation of the public key.
 */
export declare class PublicKey {
    version: number;
    base58Encode: string;
    bytes: Uint8Array;
    constructor(bytes: Uint8Array, version: number);
    static fromString(base58Encoded: string): PublicKey;
}
/**
 * An address.
 *
 * @remarks the address object is created from a public key and got the same version as the public key.
 *
 * @remarks
 * - String representation is A + U/S + base58Check(version_bytes + hashBlake3(version_bytes + public_key_bytes))
 * - The address bytes representation is `version + hashBlake3(version + publicKey)`.
 * - bytes is not an attribute of the address object because it is not needed.
 */
export declare class Address {
    version: number;
    base58Encode: string;
    constructor(publicKey: PublicKey);
}
