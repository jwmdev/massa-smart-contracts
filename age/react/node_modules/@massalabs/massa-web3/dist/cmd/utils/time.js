"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withTimeoutRejection = exports.wait = exports.Interval = exports.Timeout = void 0;
/**
 * A class representing a timeout that triggers a callback function after a specified time interval.
 */
class Timeout {
    /**
     * Constructs a new Timeout instance with the given timeout duration and callback function.
     *
     * @param timeoutMil - The timeout duration in milliseconds.
     * @param callback - The function to be called when the timeout is triggered.
     */
    constructor(timeoutMil, callback) {
        this.clear = this.clear.bind(this);
        const that = this;
        this.isCleared = false;
        this.isCalled = false;
        this.timeoutHook = setTimeout(() => {
            if (!that.isCleared) {
                this.isCalled = true;
                callback();
            }
        }, timeoutMil);
    }
    /**
     * Clears the timeout so that the callback function is not called.
     */
    clear() {
        if (!this.isCleared) {
            clearTimeout(this.timeoutHook);
            this.isCleared = true;
        }
    }
}
exports.Timeout = Timeout;
/**
 * A class representing an interval that triggers a callback function repeatedly
 * at a specified time interval.
 */
class Interval {
    /**
     * Constructs a new Interval instance with the given interval duration and callback function.
     *
     * @param timeoutMil - The interval duration in milliseconds.
     * @param callback - The function to be called when the interval is triggered.
     */
    constructor(timeoutMil, callback) {
        this.clear = this.clear.bind(this);
        const that = this;
        this.isCleared = false;
        this.isCalled = false;
        this.intervalHook = setInterval(() => {
            if (!that.isCleared) {
                this.isCalled = true;
                callback();
            }
        }, timeoutMil);
    }
    /**
     * Clears the interval so that the callback function is not called anymore.
     */
    clear() {
        if (!this.isCleared) {
            clearInterval(this.intervalHook);
            this.isCleared = true;
        }
    }
}
exports.Interval = Interval;
/**
 * Returns a promise that resolves after the specified time interval.
 *
 * @param timeMilli - The time interval in milliseconds.
 *
 * @returns A promise that resolves after the specified time interval.
 */
const wait = async (timeMilli) => {
    return new Promise((resolve) => {
        const timeout = new Timeout(timeMilli, () => {
            timeout.clear();
            return resolve();
        });
    });
};
exports.wait = wait;
/**
 * Returns a promise that resolves after the specified time interval and throws an error if the
 * specified promise does not resolve before the timeout interval.
 *
 * @param promise - The promise to be resolved.
 * @param timeoutMs - The time interval in milliseconds.
 *
 * @throws if the specified promise does not resolve before the timeout interval.
 *
 * @returns A promise that resolves after the specified time interval.
 */
async function withTimeoutRejection(promise, timeoutMs) {
    const sleep = new Promise((resolve, reject) => setTimeout(() => reject(new Error(`Timeout of ${timeoutMs} has passed and promise did not resolve`)), timeoutMs));
    return Promise.race([promise, sleep]);
}
exports.withTimeoutRejection = withTimeoutRejection;
//# sourceMappingURL=time.js.map