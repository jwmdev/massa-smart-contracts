"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = exports.PublicKey = exports.SecretKey = void 0;
const tslib_1 = require("tslib");
const Xbqcrypto_1 = require("./Xbqcrypto");
const ed = tslib_1.__importStar(require("@noble/ed25519"));
const bytes_1 = require("./bytes");
/**
 * Prefixes for secret keys, public keys, and addresses.
 * Prefixes are used as a convention to differentiate one key from another.
 */
const PUBLIC_KEY_PREFIX = 'P';
const ADDRESS_PREFIX = 'AU';
/**
 * A secret key.
 * The secret key object is created from a base58 encoded string representing the secret key.
 *
 * @remarks
 * - String representation is S + base58Check(version_bytes + secret_key_hash_bytes)
 * - bytes attribute is the Uint8Array representation of the secret key.
 */
class SecretKey {
    constructor(secretKeyBase58Encoded) {
        const versionAndKeyBytes = (0, bytes_1.getBytesSecretKey)(secretKeyBase58Encoded);
        // Slice off the version byte
        this.bytes = versionAndKeyBytes.slice(1);
        this.version = (0, Xbqcrypto_1.varintDecode)(versionAndKeyBytes.slice(0, 1)).value;
    }
    /* Get the public key from the secret key */
    async getPublicKey() {
        const publicKeyArray = await ed.getPublicKey(this.bytes);
        return new PublicKey(publicKeyArray, this.version);
    }
    /* Sign a message hash digest with the secret key */
    async signDigest(messageHashDigest) {
        return await ed.sign(messageHashDigest, this.bytes);
    }
}
exports.SecretKey = SecretKey;
/**
 * The PublicKey class represents a cryptographic public key.
 *
 * @remarks
 * - The public key is derived from the secret key and got the same version as the secret key.
 * - String representation is P + base58Check(version_bytes + public_key_hash_bytes)
 * - bytes attribute is the Uint8Array representation of the public key.
 */
class PublicKey {
    constructor(bytes, version) {
        this.version = version;
        this.bytes = bytes;
        const versionBuffer = Buffer.from((0, Xbqcrypto_1.varintEncode)(this.version));
        // Generate base58 encoded public key
        this.base58Encode =
            PUBLIC_KEY_PREFIX +
                (0, Xbqcrypto_1.base58Encode)(Buffer.concat([versionBuffer, Buffer.from(this.bytes)]));
    }
    // Create a new PublicKey object from a base58 encoded string
    static fromString(base58Encoded) {
        const versionAndKeyBytes = (0, bytes_1.getBytesPublicKey)(base58Encoded);
        // Slice off the version byte
        const version = (0, Xbqcrypto_1.varintDecode)(versionAndKeyBytes.slice(0, 1)).value;
        const keyBytes = versionAndKeyBytes.slice(1);
        return new PublicKey(keyBytes, version);
    }
}
exports.PublicKey = PublicKey;
/**
 * An address.
 *
 * @remarks the address object is created from a public key and got the same version as the public key.
 *
 * @remarks
 * - String representation is A + U/S + base58Check(version_bytes + hashBlake3(version_bytes + public_key_bytes))
 * - The address bytes representation is `version + hashBlake3(version + publicKey)`.
 * - bytes is not an attribute of the address object because it is not needed.
 */
class Address {
    constructor(publicKey) {
        this.version = publicKey.version;
        const versionBuffer = Buffer.from((0, Xbqcrypto_1.varintEncode)(this.version));
        const versionAndPublicKey = Buffer.concat([versionBuffer, publicKey.bytes]);
        // Generate base58 encoded address
        this.base58Encode =
            ADDRESS_PREFIX +
                (0, Xbqcrypto_1.base58Encode)(Buffer.concat([versionBuffer, (0, Xbqcrypto_1.hashBlake3)(versionAndPublicKey)]));
    }
}
exports.Address = Address;
//# sourceMappingURL=keyAndAddresses.js.map