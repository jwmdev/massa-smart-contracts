import { ISlot } from './ISlot';
/**
 * The IEvent interface represents an event emitted by a smart contract.
 *
 * @see id represents the identifier of the event (optional).
 * @see data represents the data of the event (arbitrary JSON format).
 * @see context represents the context of the event. It contains :
 * @see context.slot: the slot at which the event was generated.
 * @see context.block: the block at which the event was generated (null if unknown).
 * @see context.read_only: whether the event was generated during a read-only call (boolean).
 * @see context.call_stack: represents the call stack of the contract addresses, with the most recent at the end.
 * @see context.index_in_slot: the index of the event in the slot.
 * @see context.origin_operation_id: the operation id of the operation that generated the event (null if unknown).
 * @see context.is_final: whether the event is final (boolean).
 * @see context.is_error: whether the event was generated in a failed execution (boolean).
 */
export interface IEvent {
    id?: string;
    data: string;
    context: {
        slot: ISlot;
        block: null | string;
        read_only: boolean;
        call_stack: string[];
        index_in_slot: number;
        origin_operation_id: null | string;
        is_final: boolean;
        is_error: boolean;
    };
}
