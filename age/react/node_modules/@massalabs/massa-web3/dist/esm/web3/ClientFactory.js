import { ProviderType } from '../interfaces/IProvider';
import { Client } from './Client';
import { Web3Account } from './accounts/Web3Account';
import { PublicApiClient } from './PublicApiClient';
import { WalletProviderAccount } from './accounts/WalletProviderAccount';
/** Global connection urls, for Massa's MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET */
export var DefaultProviderUrls;
(function (DefaultProviderUrls) {
    DefaultProviderUrls["MAINNET"] = "https://massa.net/api/v2";
    DefaultProviderUrls["TESTNET"] = "https://test.massa.net/api/v2";
    DefaultProviderUrls["BUILDNET"] = "https://buildnet.massa.net/api/v2";
    DefaultProviderUrls["LABNET"] = "https://labnet.massa.net/api/v2";
    DefaultProviderUrls["LOCALNET"] = "http://127.0.0.1";
})(DefaultProviderUrls || (DefaultProviderUrls = {}));
/**
 * Massa Web3 ClientFactory class allows you to easily initialize a client to
 * connect to the massa blockchain.
 *
 * @remarks
 * The client can be initialized using a default provider (MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET)
 * or a custom set of providers.
 */
export class ClientFactory {
    /**
     * Creates a default client using a default provider (MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET).
     *
     * @param provider - Default provider to be used by the client.
     * @param retryStrategyOn - Whether to retry failed requests.
     * @param baseAccount - Base account to use with the client (optional).
     *
     * @returns A promise that resolves to a Client object.
     */
    static async createDefaultClient(provider, retryStrategyOn = true, baseAccount) {
        let publicProviderUrl = provider.toString();
        let privateProviderUrl = provider.toString();
        switch (provider) {
            // in the case of LocalNet append specific default ports to url.
            case DefaultProviderUrls.LOCALNET: {
                privateProviderUrl = `${privateProviderUrl}:33034`;
                publicProviderUrl = `${publicProviderUrl}:33035`;
                break;
            }
            // all other networks should have public access only.
            default: {
                break;
            }
        }
        const providers = [
            {
                url: publicProviderUrl,
                type: ProviderType.PUBLIC,
            },
            {
                url: privateProviderUrl,
                type: ProviderType.PRIVATE,
            },
        ];
        let clientConfig = {
            retryStrategyOn,
            providers,
        };
        let publicApi = new PublicApiClient(clientConfig);
        let account = null;
        if (baseAccount) {
            account = new Web3Account(baseAccount, publicApi);
        }
        const client = new Client({
            retryStrategyOn,
            providers,
        }, account, publicApi);
        return client;
    }
    /**
     * Initializes a new client using a custom set of private and public providers.
     *
     * @remarks
     * Suitable for local node interactions.
     *
     * @param providers - Array of providers to be used by the client.
     * @param retryStrategyOn - Whether to retry failed requests.
     * @param baseAccount - Base account to be used by the client (optional).
     *
     * @returns A promise that resolves to a Client object.
     */
    static async createCustomClient(providers, retryStrategyOn = true, baseAccount) {
        let clientConfig = {
            retryStrategyOn,
            providers,
        };
        let publicApi = new PublicApiClient(clientConfig);
        let account = null;
        if (baseAccount) {
            account = new Web3Account(baseAccount, publicApi);
        }
        const client = new Client(clientConfig, account, publicApi);
        return client;
    }
    /**
     * Initializes a new client using the wallet provider.
     *
     * @remarks
     * Suitable for local node interactions.
     *
     * @param provider - Provider from wallet provider to be used by the client.
     * @param baseAccount - Base account from the wallet provider to be used by the client.
     * @param retryStrategyOn - Whether to retry failed requests.
     *
     * @returns A promise that resolves to a Client object.
     */
    static async fromWalletProvider(provider, baseAccount, retryStrategyOn = true) {
        const providers = (await provider.getNodesUrls()).map((url) => {
            return {
                url,
                type: ProviderType.PUBLIC,
            };
        });
        const client = new Client({
            retryStrategyOn,
            providers,
        }, new WalletProviderAccount(baseAccount));
        return client;
    }
}
//# sourceMappingURL=ClientFactory.js.map