import { IClientConfig } from '../interfaces/IClientConfig';
import { ISignedMessage } from '../interfaces/ISignedMessage';
import { BaseClient } from './BaseClient';
import { IPrivateApiClient } from '../interfaces/IPrivateApiClient';
/**
 * Private Api Client for interacting with a massa node.
 */
export declare class PrivateApiClient extends BaseClient implements IPrivateApiClient {
    /**
     * Constructor for the {@link PrivateApiClient} object.
     *
     * @param clientConfig - The client configuration.
     */
    constructor(clientConfig: IClientConfig);
    /**
     * Add a given Node IP address from the whitelist.
     *
     * @param ipAddress - The IP address to add to the whitelist.
     *
     * @returns A promise that resolves when the request is complete.
     */
    nodeAddToPeersWhitelist(ipAddress: string): Promise<void>;
    /**
     * Remove a given Node IP address from the whitelist.
     *
     * @param ipAddress - The IP address to remove from the whitelist.
     *
     * @returns A promise that resolves when the request is complete.
     */
    nodeRemoveFromWhitelist(ipAddress: string): Promise<void>;
    /**
     * Unban a given IP address.
     *
     * @param ipAddress - The IP address to unban.
     *
     * @returns A promise that resolves when the request is complete.
     */
    nodeUnbanByIpAddress(ipAddress: string): Promise<void>;
    /**
     * Unban a given node id.
     *
     * @param nodeId - The node id to unban.
     * @returns A promise that resolves when the request is complete.
     */
    nodeUnbanById(nodeId: string): Promise<void>;
    /**
     * Ban a given node IP address.
     *
     * @param ipAddress - The IP address to ban.
     * @returns A promise that resolves when the request is complete.
     */
    nodeBanByIpAddress(ipAddress: string): Promise<void>;
    /**
     * Ban a given node Id.
     *
     * @param id - The node id to ban.
     *
     * @returns A promise that resolves when the request is complete.
     */
    nodeBanById(id: string): Promise<void>;
    /**
     * Stops the node.
     *
     * @returns A promise that resolves when the request is complete.
     */
    nodeStop(): Promise<void>;
    /**
     * Node signs a message.
     *
     * @param message - The message to sign.
     *
     * @returns A promise that resolves to an ISignedMessage object.
     */
    nodeSignMessage(message: Uint8Array): Promise<ISignedMessage>;
    /**
     * Get staking addresses.
     *
     * @returns A promise that resolves to an array of addresses (strings).
     */
    nodeGetStakingAddresses(): Promise<Array<string>>;
    /**
     * Remove staking addresses.
     *
     * @param addresses - The addresses to remove.
     *
     * @returns A promise that resolves when the request is complete.
     */
    nodeRemoveStakingAddresses(addresses: Array<string>): Promise<void>;
    /**
     * Add staking private keys.
     *
     * @param secretKeys - The secret keys to add.
     *
     * @returns A promise that resolves when the request is complete.
     */
    nodeAddStakingSecretKeys(secretKeys: Array<string>): Promise<void>;
}
