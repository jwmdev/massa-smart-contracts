/// <reference types="node" />
import { IProvider } from '../interfaces/IProvider';
import { IClientConfig } from '../interfaces/IClientConfig';
import { Buffer } from 'buffer';
import { IContractData } from '../interfaces/IContractData';
import { AxiosRequestHeaders } from 'axios';
import { JSON_RPC_REQUEST_METHOD } from '../interfaces/JsonRpcMethods';
import { ITransactionData } from '../interfaces/ITransactionData';
import { OperationTypeId } from '../interfaces/OperationTypes';
import { IRollsData } from '../interfaces/IRollsData';
import { ICallData } from '../interfaces/ICallData';
export type DataType = IContractData | ITransactionData | IRollsData | ICallData;
export declare const requestHeaders: AxiosRequestHeaders;
export declare const PERIOD_OFFSET = 5;
/**
 * The Base Client object is the main entry point for interacting with the massa blockchain.
 *
 * @remarks
 * The `BaseClient` class should not be instantiated directly; instead, it should
 * be extended by other client classes to provide additional functionality on top of the core
 * methods provided by this class.
 *
 * @throws Will throw an error if no public providers are included in client configuration.
 * @throws Will throw an error if no private providers are included in client configuration.
 */
export declare class BaseClient {
    clientConfig: IClientConfig;
    /**
     * Constructor of the BaseClient class
     *
     * @param clientConfig - The client configuration object as defined in {@link IClientConfig}
     */
    constructor(clientConfig: IClientConfig);
    /**
     * Set new providers as {@link IProvider}.
     *
     * @privateRemarks
     * This methods add the providers to the existing ones in the clientConfig object.
     *
     * @param providers - The new providers to set as an array of IProvider.
     *
     * @throws Will throw an error if no public providers are included in the given array of providers.
     * @throws Will throw an error if no private providers are included in the given array of providers.
     */
    setProviders(providers: Array<IProvider>): void;
    /**
     * Returns all the private providers.
     *
     * @returns An array of IProvider containing all the private providers.
     */
    protected getPrivateProviders(): Array<IProvider>;
    /**
     * Returns all the public providers.
     *
     * @returns An array of IProvider containing all the public providers.
     */
    protected getPublicProviders(): Array<IProvider>;
    /**
     * Find provider for a concrete rpc method
     *
     * @remarks
     * This method chooses the provider to use for a given rpc method.
     *  - If the rpc method is about getting or sending data to the blockchain,
     *    it will choose a public provider.
     *  - If the rpc method is meant to be used by the node itself, it will choose a private provider.
     *  - An error is thrown if no provider is found for the rpc method.
     *
     * @param requestMethod - The rpc method to find the provider for.
     *
     * @returns The provider for the rpc method.
     */
    private getProviderForRpcMethod;
    /**
     * Converts a json rpc call to a promise that resolves as a JsonRpcResponseData
     *
     * @privateRemarks
     * If there is an error while sending the request, the function catches the error, the isError
     * property is set to true, the result property set to null, and the error property set to a
     * new Error object with a message indicating that there was an error.
     *
     * @param resource - The rpc method to call.
     * @param params - The parameters to pass to the rpc method.
     *
     * @returns A promise that resolves as a JsonRpcResponseData.
     */
    private promisifyJsonRpcCall;
    /**
     * Sends a post JSON rpc request to the node.
     *
     * @param resource - The rpc method to call.
     * @param params - The parameters to pass to the rpc method.
     *
     * @throws An error if the rpc method returns an error.
     *
     * @returns A promise that resolves as the result of the rpc method.
     */
    protected sendJsonRPCRequest<T>(resource: JSON_RPC_REQUEST_METHOD, params: object): Promise<T>;
    /**
     * Compacts bytes payload per operation.
     *
     * @param data - The operation data.
     * @param opTypeId - The operation type id.
     * @param account - The account used.
     * @param expirePeriod - The expire period.
     *
     * @returns The compacted bytes payload.
     */
    protected compactBytesForOperation(data: DataType, opTypeId: OperationTypeId, expirePeriod: number): Buffer;
}
