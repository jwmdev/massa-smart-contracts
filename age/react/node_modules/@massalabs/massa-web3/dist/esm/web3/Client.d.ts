import { IClientConfig } from '../interfaces/IClientConfig';
import { PrivateApiClient } from './PrivateApiClient';
import { PublicApiClient } from './PublicApiClient';
import { WalletClient } from './WalletClient';
import { SmartContractsClient } from './SmartContractsClient';
import { IProvider } from '../interfaces/IProvider';
import { DefaultProviderUrls } from './ClientFactory';
import { IClient } from '../interfaces/IClient';
import { IBaseAccount } from '../interfaces/IBaseAccount';
/**
 * Massa Web3 Client object wraps all public, private, wallet and smart-contracts-related functionalities.
 */
export declare class Client implements IClient {
    private clientConfig;
    private publicApiClient;
    private privateApiClient;
    private walletClient;
    private smartContractsClient;
    /**
     * Constructor of the Client class.
     *
     * @param clientConfig - client configuration object.
     * @param baseAccount - base account to use for signing transactions (optional).
     */
    constructor(clientConfig: IClientConfig, baseAccount?: IBaseAccount, publicApiClient?: PublicApiClient);
    /**
     * Get the private api related RPC methods.
     *
     * @returns PrivateApiClient object.
     */
    privateApi(): PrivateApiClient;
    /**
     * Get the public api related RPC methods.
     *
     * @returns PublicApiClient object.
     */
    publicApi(): PublicApiClient;
    /**
     * Get the Wallet related methods.
     *
     * @returns WalletClient object.
     */
    wallet(): WalletClient;
    /**
     * Get the smart Contracts related methods.
     *
     * @returns SmartContractsClient object.
     */
    smartContracts(): SmartContractsClient;
    /**
     * Set new providers.
     *
     * @param providers - array of providers to set.
     */
    setCustomProviders(providers: Array<IProvider>): void;
    /**
     * Get the currently set providers.
     *
     * @returns array of the known providers.
     */
    getProviders(): Array<IProvider>;
    /**
     * Get all private providers.
     *
     * @returns all private providers.
     */
    getPrivateProviders(): Array<IProvider>;
    /**
     * Get all public providers
     *
     * @returns all public providers
     */
    getPublicProviders(): Array<IProvider>;
    /**
     * Set a new default json rpc provider.
     *
     * @param provider - The new default provider to set.
     */
    setNewDefaultProvider(provider: DefaultProviderUrls): void;
}
