import { IClientConfig } from '../interfaces/IClientConfig';
import { INodeStatus } from '../interfaces/INodeStatus';
import { IAddressInfo } from '../interfaces/IAddressInfo';
import { IBlockInfo } from '../interfaces/IBlockInfo';
import { IEndorsement } from '../interfaces/IEndorsement';
import { IOperationData } from '../interfaces/IOperationData';
import { IClique } from '../interfaces/IClique';
import { IStakingAddresses } from '../interfaces/IStakingAddresses';
import { BaseClient } from './BaseClient';
import { IPublicApiClient } from '../interfaces/IPublicApiClient';
import { IDatastoreEntry } from '../interfaces/IDatastoreEntry';
import { IDatastoreEntryInput } from '../interfaces/IDatastoreEntryInput';
import { ISlot } from '../interfaces/ISlot';
import { IGetGraphInterval } from '../interfaces/IGetGraphInterval';
import { IGraphInterval } from '../interfaces/IGraphInterval';
import { IBlockcliqueBlockBySlot } from '../interfaces/IBlockcliqueBlockBySlot';
/**
 * Public API client for interacting with a Massa node.
 *
 * This class provides an interface for interacting with the public API of a Massa node.
 * It offers methods for querying various data structures used in the Massa blockchain,
 * such as blocks, endorsements, operations, and stakers.
 *
 * @module PublicApiClient
 */
export declare class PublicApiClient extends BaseClient implements IPublicApiClient {
    /**
     * Constructor for the {@link PublicApiClient} object.
     *
     * @param clientConfig - The configuration settings for this client.
     */
    constructor(clientConfig: IClientConfig);
    /**
     * Get graph interval.
     *
     * @param graphInterval - The graph interval values in ms as an IGetGraphInterval.
     *
     * @returns A promise which resolves in the graph interval.
     */
    getGraphInterval(graphInterval: IGetGraphInterval): Promise<Array<IGraphInterval>>;
    /**
     * Get blockclique details by period and thread.
     *
     * @param slot - The slot as an ISlot.
     *
     * @returns A promise which resolves in the blockclique details.
     */
    getBlockcliqueBlockBySlot(slot: ISlot): Promise<IBlockcliqueBlockBySlot>;
    /**
     * Retrieves the node's status.
     *
     * @remarks
     * The returned information includes:
     * - Whether the node is reachable
     * - The number of connected peers
     * - The node's version
     * - The node's configuration parameters
     *
     * @returns A promise that resolves to the node's status information.
     */
    getNodeStatus(): Promise<INodeStatus>;
    /**
     * Retrieves data about a list of addresses, such as their balances and block creation details.
     *
     * @param addresses - An array of addresses to query.
     *
     * @returns A promise that resolves to an array of address information.
     */
    getAddresses(addresses: Array<string>): Promise<Array<IAddressInfo>>;
    /**
     * Show data about a block (content, finality ...).
     *
     * @remarks
     * The blocks are stored in the node cache. After a certain time (depending of the network activity),
     * the blocks are removed from the cache and the node will not be able to return the block data.
     * The corresponding api parameter is 'max_discarded_blocks'.
     * More information can be found here: https://docs.massa.net/en/latest/testnet/all-config.html
     *
     * @param blockIds - The block ids as an array of strings.
     *
     * @returns A promise which resolves in the block data.
     */
    getBlocks(blockIds: Array<string>): Promise<Array<IBlockInfo>>;
    /**
     * Show info about a list of endorsements.
     *
     * @param endorsementIds - The endorsement ids as an array of strings.
     *
     * @returns A promise which resolves in the endorsement data.
     */
    getEndorsements(endorsementIds: Array<string>): Promise<Array<IEndorsement>>;
    /**
     * Retrieves data about a list of operations.
     *
     * @param operationIds - An array of operation IDs to query.
     *
     * @returns A promise that resolves to an array of operation data.
     */
    getOperations(operationIds: Array<string>): Promise<Array<IOperationData>>;
    /**
     * Get cliques.
     *
     * @returns A promise which resolves to the cliques.
     */
    getCliques(): Promise<Array<IClique>>;
    /**
     * Retrieves a list of active stakers and their roll counts for the current cycle.
     *
     * @returns A promise that resolves to an array of staking addresses and their roll counts.
     */
    getStakers(): Promise<Array<IStakingAddresses>>;
    /**
     * Retrieves the data entries at both the latest final and active executed slots.
     *
     * @param addressesKeys - An array of objects containing address and key data.
     *
     * @returns A promise that resolves to an array of datastore entries.
     */
    getDatastoreEntries(addressesKeys: Array<IDatastoreEntryInput>): Promise<Array<IDatastoreEntry>>;
}
