import { IProvider } from '../interfaces/IProvider';
import { IAccount } from '../interfaces/IAccount';
import { Client } from './Client';
import { IAccount as IAccountWalletProvider, IProvider as IProviderWalletProvider } from '@massalabs/wallet-provider';
/** Global connection urls, for Massa's MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET */
export declare enum DefaultProviderUrls {
    MAINNET = "https://massa.net/api/v2",
    TESTNET = "https://test.massa.net/api/v2",
    BUILDNET = "https://buildnet.massa.net/api/v2",
    LABNET = "https://labnet.massa.net/api/v2",
    LOCALNET = "http://127.0.0.1"
}
/**
 * Massa Web3 ClientFactory class allows you to easily initialize a client to
 * connect to the massa blockchain.
 *
 * @remarks
 * The client can be initialized using a default provider (MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET)
 * or a custom set of providers.
 */
export declare class ClientFactory {
    /**
     * Creates a default client using a default provider (MAINNET, TESTNET, LABNET, LOCALNET and BUILDNET).
     *
     * @param provider - Default provider to be used by the client.
     * @param retryStrategyOn - Whether to retry failed requests.
     * @param baseAccount - Base account to use with the client (optional).
     *
     * @returns A promise that resolves to a Client object.
     */
    static createDefaultClient(provider: DefaultProviderUrls, retryStrategyOn?: boolean, baseAccount?: IAccount): Promise<Client>;
    /**
     * Initializes a new client using a custom set of private and public providers.
     *
     * @remarks
     * Suitable for local node interactions.
     *
     * @param providers - Array of providers to be used by the client.
     * @param retryStrategyOn - Whether to retry failed requests.
     * @param baseAccount - Base account to be used by the client (optional).
     *
     * @returns A promise that resolves to a Client object.
     */
    static createCustomClient(providers: Array<IProvider>, retryStrategyOn?: boolean, baseAccount?: IAccount): Promise<Client>;
    /**
     * Initializes a new client using the wallet provider.
     *
     * @remarks
     * Suitable for local node interactions.
     *
     * @param provider - Provider from wallet provider to be used by the client.
     * @param baseAccount - Base account from the wallet provider to be used by the client.
     * @param retryStrategyOn - Whether to retry failed requests.
     *
     * @returns A promise that resolves to a Client object.
     */
    static fromWalletProvider(provider: IProviderWalletProvider, baseAccount: IAccountWalletProvider, retryStrategyOn?: boolean): Promise<Client>;
}
