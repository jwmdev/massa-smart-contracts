/**
 * A class representing a timeout that triggers a callback function after a specified time interval.
 */
export declare class Timeout {
    /**
     * Constructs a new Timeout instance with the given timeout duration and callback function.
     *
     * @param timeoutMil - The timeout duration in milliseconds.
     * @param callback - The function to be called when the timeout is triggered.
     */
    constructor(timeoutMil: number, callback: () => void);
    private isCleared;
    private isCalled;
    private timeoutHook;
    /**
     * Clears the timeout so that the callback function is not called.
     */
    clear(): void;
}
/**
 * A class representing an interval that triggers a callback function repeatedly
 * at a specified time interval.
 */
export declare class Interval {
    /**
     * Constructs a new Interval instance with the given interval duration and callback function.
     *
     * @param timeoutMil - The interval duration in milliseconds.
     * @param callback - The function to be called when the interval is triggered.
     */
    constructor(timeoutMil: number, callback: () => void);
    private isCleared;
    private isCalled;
    private intervalHook;
    /**
     * Clears the interval so that the callback function is not called anymore.
     */
    clear(): void;
}
/**
 * Returns a promise that resolves after the specified time interval.
 *
 * @param timeMilli - The time interval in milliseconds.
 *
 * @returns A promise that resolves after the specified time interval.
 */
export declare const wait: (timeMilli: number) => Promise<void>;
/**
 * Returns a promise that resolves after the specified time interval and throws an error if the
 * specified promise does not resolve before the timeout interval.
 *
 * @param promise - The promise to be resolved.
 * @param timeoutMs - The time interval in milliseconds.
 *
 * @throws if the specified promise does not resolve before the timeout interval.
 *
 * @returns A promise that resolves after the specified time interval.
 */
export declare function withTimeoutRejection<T>(promise: Promise<T>, timeoutMs: number): Promise<T>;
